/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiCallback;
import so.hiro.stacks_blockchain_api_client.ApiClient;
import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.ApiResponse;
import so.hiro.stacks_blockchain_api_client.Configuration;
import so.hiro.stacks_blockchain_api_client.Pair;
import so.hiro.stacks_blockchain_api_client.ProgressRequestBody;
import so.hiro.stacks_blockchain_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import so.hiro.stacks_blockchain_api_client.model.AccountDataResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressAssetsListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressBalanceResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressNftListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressNonces;
import so.hiro.stacks_blockchain_api_client.model.AddressStxInboundListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionWithTransfers;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionsListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionsWithTransfersListResponse;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccountAssets
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account assets to fetch (optional)
     * @param offset index of first account assets to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state at that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAssetsCall(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/assets"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAssetsValidateBeforeCall(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountAssets(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountAssetsCall(principal, limit, offset, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get account assets
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account assets to fetch (optional)
     * @param offset index of first account assets to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state at that point in time, rather than the current block. (optional)
     * @return AddressAssetsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressAssetsListResponse getAccountAssets(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressAssetsListResponse> localVarResp = getAccountAssetsWithHttpInfo(principal, limit, offset, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get account assets
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account assets to fetch (optional)
     * @param offset index of first account assets to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state at that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressAssetsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressAssetsListResponse> getAccountAssetsWithHttpInfo(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountAssetsValidateBeforeCall(principal, limit, offset, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressAssetsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account assets (asynchronously)
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account assets to fetch (optional)
     * @param offset index of first account assets to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state at that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAssetsAsync(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback<AddressAssetsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAssetsValidateBeforeCall(principal, limit, offset, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressAssetsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountBalance
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBalanceCall(String principal, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/balances"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBalanceValidateBeforeCall(String principal, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountBalance(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountBalanceCall(principal, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get account balances
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return AddressBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressBalanceResponse getAccountBalance(String principal, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressBalanceResponse> localVarResp = getAccountBalanceWithHttpInfo(principal, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get account balances
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressBalanceResponse> getAccountBalanceWithHttpInfo(String principal, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(principal, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account balances (asynchronously)
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountBalanceAsync(String principal, Boolean unanchored, String untilBlock, final ApiCallback<AddressBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(principal, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountInbound
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param height Filter for transfers only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInboundCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/stx_inbound"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountInboundValidateBeforeCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountInbound(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountInboundCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get inbound STX transfers
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the &#x60;send-many-memo&#x60; bulk sending contract. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param height Filter for transfers only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return AddressStxInboundListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressStxInboundListResponse getAccountInbound(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressStxInboundListResponse> localVarResp = getAccountInboundWithHttpInfo(principal, limit, offset, height, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get inbound STX transfers
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the &#x60;send-many-memo&#x60; bulk sending contract. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param height Filter for transfers only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressStxInboundListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressStxInboundListResponse> getAccountInboundWithHttpInfo(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountInboundValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressStxInboundListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get inbound STX transfers (asynchronously)
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the &#x60;send-many-memo&#x60; bulk sending contract. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param height Filter for transfers only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInboundAsync(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback<AddressStxInboundListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountInboundValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressStxInboundListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountInfo
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInfoCall(String principal, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{principal}"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proof", proof));
        }

        if (tip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip", tip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountInfoValidateBeforeCall(String principal, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountInfoCall(principal, proof, tip, _callback);
        return localVarCall;

    }

    /**
     * Get account info
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return AccountDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountDataResponse getAccountInfo(String principal, Integer proof, String tip) throws ApiException {
        ApiResponse<AccountDataResponse> localVarResp = getAccountInfoWithHttpInfo(principal, proof, tip);
        return localVarResp.getData();
    }

    /**
     * Get account info
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ApiResponse&lt;AccountDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDataResponse> getAccountInfoWithHttpInfo(String principal, Integer proof, String tip) throws ApiException {
        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(principal, proof, tip, null);
        Type localVarReturnType = new TypeToken<AccountDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account info (asynchronously)
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInfoAsync(String principal, Integer proof, String tip, final ApiCallback<AccountDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(principal, proof, tip, _callback);
        Type localVarReturnType = new TypeToken<AccountDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountNft
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAccountNftCall(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/nft_events"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountNftValidateBeforeCall(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountNft(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountNftCall(principal, limit, offset, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get nft events
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return AddressNftListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AddressNftListResponse getAccountNft(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressNftListResponse> localVarResp = getAccountNftWithHttpInfo(principal, limit, offset, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get nft events
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressNftListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AddressNftListResponse> getAccountNftWithHttpInfo(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountNftValidateBeforeCall(principal, limit, offset, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressNftListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get nft events (asynchronously)
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit number of items to return (optional)
     * @param offset number of items to skip (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAccountNftAsync(String principal, Integer limit, Integer offset, Boolean unanchored, String untilBlock, final ApiCallback<AddressNftListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountNftValidateBeforeCall(principal, limit, offset, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressNftListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountNonces
     * @param principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param blockHeight Optionally get the nonce at a given block height (optional)
     * @param blockHash Optionally get the nonce at a given block hash (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNoncesCall(String principal, BigDecimal blockHeight, String blockHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/nonces"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block_height", blockHeight));
        }

        if (blockHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("block_hash", blockHash));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountNoncesValidateBeforeCall(String principal, BigDecimal blockHeight, String blockHash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountNonces(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountNoncesCall(principal, blockHeight, blockHash, _callback);
        return localVarCall;

    }

    /**
     * Get the latest nonce used by an account
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * @param principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param blockHeight Optionally get the nonce at a given block height (optional)
     * @param blockHash Optionally get the nonce at a given block hash (optional)
     * @return AddressNonces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressNonces getAccountNonces(String principal, BigDecimal blockHeight, String blockHash) throws ApiException {
        ApiResponse<AddressNonces> localVarResp = getAccountNoncesWithHttpInfo(principal, blockHeight, blockHash);
        return localVarResp.getData();
    }

    /**
     * Get the latest nonce used by an account
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * @param principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param blockHeight Optionally get the nonce at a given block height (optional)
     * @param blockHash Optionally get the nonce at a given block hash (optional)
     * @return ApiResponse&lt;AddressNonces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressNonces> getAccountNoncesWithHttpInfo(String principal, BigDecimal blockHeight, String blockHash) throws ApiException {
        okhttp3.Call localVarCall = getAccountNoncesValidateBeforeCall(principal, blockHeight, blockHash, null);
        Type localVarReturnType = new TypeToken<AddressNonces>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest nonce used by an account (asynchronously)
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     * @param principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param blockHeight Optionally get the nonce at a given block height (optional)
     * @param blockHash Optionally get the nonce at a given block hash (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNoncesAsync(String principal, BigDecimal blockHeight, String blockHash, final ApiCallback<AddressNonces> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountNoncesValidateBeforeCall(principal, blockHeight, blockHash, _callback);
        Type localVarReturnType = new TypeToken<AddressNonces>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountStxBalance
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountStxBalanceCall(String principal, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/stx"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountStxBalanceValidateBeforeCall(String principal, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountStxBalance(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountStxBalanceCall(principal, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get account STX balance
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object getAccountStxBalance(String principal, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<Object> localVarResp = getAccountStxBalanceWithHttpInfo(principal, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get account STX balance
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getAccountStxBalanceWithHttpInfo(String principal, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountStxBalanceValidateBeforeCall(principal, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account STX balance (asynchronously)
     * Retrieves STX token balance for a given Address or Contract Identifier.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountStxBalanceAsync(String principal, Boolean unanchored, String untilBlock, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountStxBalanceValidateBeforeCall(principal, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountTransactions
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountTransactionsCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/transactions"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountTransactionsValidateBeforeCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountTransactionsCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get account transactions
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return AddressTransactionsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressTransactionsListResponse getAccountTransactions(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressTransactionsListResponse> localVarResp = getAccountTransactionsWithHttpInfo(principal, limit, offset, height, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get account transactions
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressTransactionsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressTransactionsListResponse> getAccountTransactionsWithHttpInfo(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountTransactionsValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressTransactionsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account transactions (asynchronously)
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountTransactionsAsync(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback<AddressTransactionsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountTransactionsValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressTransactionsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountTransactionsWithTransfers
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountTransactionsWithTransfersCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/transactions_with_transfers"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        if (untilBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until_block", untilBlock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountTransactionsWithTransfersValidateBeforeCall(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getAccountTransactionsWithTransfers(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountTransactionsWithTransfersCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        return localVarCall;

    }

    /**
     * Get account transactions including STX transfers for each transaction.
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return AddressTransactionsWithTransfersListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressTransactionsWithTransfersListResponse getAccountTransactionsWithTransfers(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        ApiResponse<AddressTransactionsWithTransfersListResponse> localVarResp = getAccountTransactionsWithTransfersWithHttpInfo(principal, limit, offset, height, unanchored, untilBlock);
        return localVarResp.getData();
    }

    /**
     * Get account transactions including STX transfers for each transaction.
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @return ApiResponse&lt;AddressTransactionsWithTransfersListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressTransactionsWithTransfersListResponse> getAccountTransactionsWithTransfersWithHttpInfo(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock) throws ApiException {
        okhttp3.Call localVarCall = getAccountTransactionsWithTransfersValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, null);
        Type localVarReturnType = new TypeToken<AddressTransactionsWithTransfersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account transactions including STX transfers for each transaction. (asynchronously)
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     * @param principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param limit max number of account transactions to fetch (optional)
     * @param offset index of first account transaction to fetch (optional)
     * @param height Filter for transactions only at this given block height (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param untilBlock returned data representing the state up until that point in time, rather than the current block. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountTransactionsWithTransfersAsync(String principal, Integer limit, Integer offset, BigDecimal height, Boolean unanchored, String untilBlock, final ApiCallback<AddressTransactionsWithTransfersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountTransactionsWithTransfersValidateBeforeCall(principal, limit, offset, height, unanchored, untilBlock, _callback);
        Type localVarReturnType = new TypeToken<AddressTransactionsWithTransfersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSingleTransactionWithTransfers
     * @param principal Stacks address or a contract identifier (required)
     * @param txId Transaction id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleTransactionWithTransfersCall(String principal, String txId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/address/{principal}/{tx_id}/with_transfers"
            .replaceAll("\\{" + "principal" + "\\}", localVarApiClient.escapeString(principal.toString()))
            .replaceAll("\\{" + "tx_id" + "\\}", localVarApiClient.escapeString(txId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTransactionWithTransfersValidateBeforeCall(String principal, String txId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principal' is set
        if (principal == null) {
            throw new ApiException("Missing the required parameter 'principal' when calling getSingleTransactionWithTransfers(Async)");
        }
        
        // verify the required parameter 'txId' is set
        if (txId == null) {
            throw new ApiException("Missing the required parameter 'txId' when calling getSingleTransactionWithTransfers(Async)");
        }
        

        okhttp3.Call localVarCall = getSingleTransactionWithTransfersCall(principal, txId, _callback);
        return localVarCall;

    }

    /**
     * Get account transaction information for specific transaction
     * Retrieves transaction details for a given Transcation Id &#x60;tx_id&#x60;, for a given account or contract Identifier.
     * @param principal Stacks address or a contract identifier (required)
     * @param txId Transaction id (required)
     * @return AddressTransactionWithTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public AddressTransactionWithTransfers getSingleTransactionWithTransfers(String principal, String txId) throws ApiException {
        ApiResponse<AddressTransactionWithTransfers> localVarResp = getSingleTransactionWithTransfersWithHttpInfo(principal, txId);
        return localVarResp.getData();
    }

    /**
     * Get account transaction information for specific transaction
     * Retrieves transaction details for a given Transcation Id &#x60;tx_id&#x60;, for a given account or contract Identifier.
     * @param principal Stacks address or a contract identifier (required)
     * @param txId Transaction id (required)
     * @return ApiResponse&lt;AddressTransactionWithTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressTransactionWithTransfers> getSingleTransactionWithTransfersWithHttpInfo(String principal, String txId) throws ApiException {
        okhttp3.Call localVarCall = getSingleTransactionWithTransfersValidateBeforeCall(principal, txId, null);
        Type localVarReturnType = new TypeToken<AddressTransactionWithTransfers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account transaction information for specific transaction (asynchronously)
     * Retrieves transaction details for a given Transcation Id &#x60;tx_id&#x60;, for a given account or contract Identifier.
     * @param principal Stacks address or a contract identifier (required)
     * @param txId Transaction id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleTransactionWithTransfersAsync(String principal, String txId, final ApiCallback<AddressTransactionWithTransfers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTransactionWithTransfersValidateBeforeCall(principal, txId, _callback);
        Type localVarReturnType = new TypeToken<AddressTransactionWithTransfers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
