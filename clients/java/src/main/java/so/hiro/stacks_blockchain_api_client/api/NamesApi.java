/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiCallback;
import so.hiro.stacks_blockchain_api_client.ApiClient;
import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.ApiResponse;
import so.hiro.stacks_blockchain_api_client.Configuration;
import so.hiro.stacks_blockchain_api_client.Pair;
import so.hiro.stacks_blockchain_api_client.ProgressRequestBody;
import so.hiro.stacks_blockchain_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobject;
import so.hiro.stacks_blockchain_api_client.model.BnsError;
import so.hiro.stacks_blockchain_api_client.model.BnsGetAllNamespacesResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNameInfoResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNamePriceResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNamespacePriceResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsNamesOwnByAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NamesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchZoneFile
     * @param name fully-qualified name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchZoneFileCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/names/{name}/zonefile"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchZoneFileValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling fetchZoneFile(Async)");
        }
        

        okhttp3.Call localVarCall = fetchZoneFileCall(name, _callback);
        return localVarCall;

    }

    /**
     * Get Zone File
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * @param name fully-qualified name (required)
     * @return AnyOfobjectobject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AnyOfobjectobject fetchZoneFile(String name) throws ApiException {
        ApiResponse<AnyOfobjectobject> localVarResp = fetchZoneFileWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get Zone File
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * @param name fully-qualified name (required)
     * @return ApiResponse&lt;AnyOfobjectobject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnyOfobjectobject> fetchZoneFileWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = fetchZoneFileValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<AnyOfobjectobject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zone File (asynchronously)
     * Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     * @param name fully-qualified name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchZoneFileAsync(String name, final ApiCallback<AnyOfobjectobject> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchZoneFileValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<AnyOfobjectobject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllNames
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamesCall(Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllNamesValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllNames(Async)");
        }
        

        okhttp3.Call localVarCall = getAllNamesCall(page, _callback);
        return localVarCall;

    }

    /**
     * Get All Names
     * Retrieves a list of all names known to the node.
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAllNames(Integer page) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAllNamesWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * Get All Names
     * Retrieves a list of all names known to the node.
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAllNamesWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAllNamesValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Names (asynchronously)
     * Retrieves a list of all names known to the node.
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamesAsync(Integer page, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllNamesValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllNamespaces
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamespacesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/namespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllNamespacesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllNamespacesCall(_callback);
        return localVarCall;

    }

    /**
     * Get All Namespaces
     * Retrieves a list of all namespaces known to the node.
     * @return BnsGetAllNamespacesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BnsGetAllNamespacesResponse getAllNamespaces() throws ApiException {
        ApiResponse<BnsGetAllNamespacesResponse> localVarResp = getAllNamespacesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get All Namespaces
     * Retrieves a list of all namespaces known to the node.
     * @return ApiResponse&lt;BnsGetAllNamespacesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BnsGetAllNamespacesResponse> getAllNamespacesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllNamespacesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BnsGetAllNamespacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Namespaces (asynchronously)
     * Retrieves a list of all namespaces known to the node.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamespacesAsync(final ApiCallback<BnsGetAllNamespacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllNamespacesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BnsGetAllNamespacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHistoricalZoneFile
     * @param name fully-qualified name (required)
     * @param zoneFileHash zone file hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoricalZoneFileCall(String name, String zoneFileHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/names/{name}/zonefile/{zoneFileHash}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "zoneFileHash" + "\\}", localVarApiClient.escapeString(zoneFileHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoricalZoneFileValidateBeforeCall(String name, String zoneFileHash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getHistoricalZoneFile(Async)");
        }
        
        // verify the required parameter 'zoneFileHash' is set
        if (zoneFileHash == null) {
            throw new ApiException("Missing the required parameter 'zoneFileHash' when calling getHistoricalZoneFile(Async)");
        }
        

        okhttp3.Call localVarCall = getHistoricalZoneFileCall(name, zoneFileHash, _callback);
        return localVarCall;

    }

    /**
     * Get Historical Zone File
     * Retrieves the historical zonefile specified by the username and zone hash.
     * @param name fully-qualified name (required)
     * @param zoneFileHash zone file hash (required)
     * @return AnyOfobjectobject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AnyOfobjectobject getHistoricalZoneFile(String name, String zoneFileHash) throws ApiException {
        ApiResponse<AnyOfobjectobject> localVarResp = getHistoricalZoneFileWithHttpInfo(name, zoneFileHash);
        return localVarResp.getData();
    }

    /**
     * Get Historical Zone File
     * Retrieves the historical zonefile specified by the username and zone hash.
     * @param name fully-qualified name (required)
     * @param zoneFileHash zone file hash (required)
     * @return ApiResponse&lt;AnyOfobjectobject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnyOfobjectobject> getHistoricalZoneFileWithHttpInfo(String name, String zoneFileHash) throws ApiException {
        okhttp3.Call localVarCall = getHistoricalZoneFileValidateBeforeCall(name, zoneFileHash, null);
        Type localVarReturnType = new TypeToken<AnyOfobjectobject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Historical Zone File (asynchronously)
     * Retrieves the historical zonefile specified by the username and zone hash.
     * @param name fully-qualified name (required)
     * @param zoneFileHash zone file hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoricalZoneFileAsync(String name, String zoneFileHash, final ApiCallback<AnyOfobjectobject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoricalZoneFileValidateBeforeCall(name, zoneFileHash, _callback);
        Type localVarReturnType = new TypeToken<AnyOfobjectobject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNameHistory
     * @param name name to query (required)
     * @param page the page (in 20-entry pages) of the history to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameHistoryCall(String name, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/names/{name}/history"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNameHistoryValidateBeforeCall(String name, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNameHistory(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getNameHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getNameHistoryCall(name, page, _callback);
        return localVarCall;

    }

    /**
     * Get Name History
     * Retrieves a history of all blockchain records of a registered name.
     * @param name name to query (required)
     * @param page the page (in 20-entry pages) of the history to fetch (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getNameHistory(String name, Integer page) throws ApiException {
        ApiResponse<Object> localVarResp = getNameHistoryWithHttpInfo(name, page);
        return localVarResp.getData();
    }

    /**
     * Get Name History
     * Retrieves a history of all blockchain records of a registered name.
     * @param name name to query (required)
     * @param page the page (in 20-entry pages) of the history to fetch (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNameHistoryWithHttpInfo(String name, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getNameHistoryValidateBeforeCall(name, page, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Name History (asynchronously)
     * Retrieves a history of all blockchain records of a registered name.
     * @param name name to query (required)
     * @param page the page (in 20-entry pages) of the history to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameHistoryAsync(String name, Integer page, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNameHistoryValidateBeforeCall(name, page, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNameInfo
     * @param name fully-qualified name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameInfoCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/names/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNameInfoValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNameInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getNameInfoCall(name, _callback);
        return localVarCall;

    }

    /**
     * Get Name Details
     * Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
     * @param name fully-qualified name (required)
     * @return BnsGetNameInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BnsGetNameInfoResponse getNameInfo(String name) throws ApiException {
        ApiResponse<BnsGetNameInfoResponse> localVarResp = getNameInfoWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get Name Details
     * Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
     * @param name fully-qualified name (required)
     * @return ApiResponse&lt;BnsGetNameInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BnsGetNameInfoResponse> getNameInfoWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getNameInfoValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<BnsGetNameInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Name Details (asynchronously)
     * Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
     * @param name fully-qualified name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameInfoAsync(String name, final ApiCallback<BnsGetNameInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNameInfoValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<BnsGetNameInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamePrice
     * @param name the name to query price information for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamePriceCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/prices/names/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamePriceValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNamePrice(Async)");
        }
        

        okhttp3.Call localVarCall = getNamePriceCall(name, _callback);
        return localVarCall;

    }

    /**
     * Get Name Price
     * Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param name the name to query price information for (required)
     * @return BnsGetNamePriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BnsGetNamePriceResponse getNamePrice(String name) throws ApiException {
        ApiResponse<BnsGetNamePriceResponse> localVarResp = getNamePriceWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get Name Price
     * Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param name the name to query price information for (required)
     * @return ApiResponse&lt;BnsGetNamePriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BnsGetNamePriceResponse> getNamePriceWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getNamePriceValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<BnsGetNamePriceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Name Price (asynchronously)
     * Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param name the name to query price information for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamePriceAsync(String name, final ApiCallback<BnsGetNamePriceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamePriceValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<BnsGetNamePriceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamesOwnedByAddress
     * @param blockchain the layer-1 blockchain for the address (required)
     * @param address the address to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamesOwnedByAddressCall(String blockchain, String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/addresses/{blockchain}/{address}"
            .replaceAll("\\{" + "blockchain" + "\\}", localVarApiClient.escapeString(blockchain.toString()))
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamesOwnedByAddressValidateBeforeCall(String blockchain, String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getNamesOwnedByAddress(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getNamesOwnedByAddress(Async)");
        }
        

        okhttp3.Call localVarCall = getNamesOwnedByAddressCall(blockchain, address, _callback);
        return localVarCall;

    }

    /**
     * Get Names Owned by Address
     * Retrieves a list of names owned by the address provided.
     * @param blockchain the layer-1 blockchain for the address (required)
     * @param address the address to lookup (required)
     * @return BnsNamesOwnByAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BnsNamesOwnByAddressResponse getNamesOwnedByAddress(String blockchain, String address) throws ApiException {
        ApiResponse<BnsNamesOwnByAddressResponse> localVarResp = getNamesOwnedByAddressWithHttpInfo(blockchain, address);
        return localVarResp.getData();
    }

    /**
     * Get Names Owned by Address
     * Retrieves a list of names owned by the address provided.
     * @param blockchain the layer-1 blockchain for the address (required)
     * @param address the address to lookup (required)
     * @return ApiResponse&lt;BnsNamesOwnByAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BnsNamesOwnByAddressResponse> getNamesOwnedByAddressWithHttpInfo(String blockchain, String address) throws ApiException {
        okhttp3.Call localVarCall = getNamesOwnedByAddressValidateBeforeCall(blockchain, address, null);
        Type localVarReturnType = new TypeToken<BnsNamesOwnByAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Names Owned by Address (asynchronously)
     * Retrieves a list of names owned by the address provided.
     * @param blockchain the layer-1 blockchain for the address (required)
     * @param address the address to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamesOwnedByAddressAsync(String blockchain, String address, final ApiCallback<BnsNamesOwnByAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamesOwnedByAddressValidateBeforeCall(blockchain, address, _callback);
        Type localVarReturnType = new TypeToken<BnsNamesOwnByAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespaceNames
     * @param tld the namespace to fetch names from (required)
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceNamesCall(String tld, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/namespaces/{tld}/names"
            .replaceAll("\\{" + "tld" + "\\}", localVarApiClient.escapeString(tld.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceNamesValidateBeforeCall(String tld, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tld' is set
        if (tld == null) {
            throw new ApiException("Missing the required parameter 'tld' when calling getNamespaceNames(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getNamespaceNames(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespaceNamesCall(tld, page, _callback);
        return localVarCall;

    }

    /**
     * Get Namespace Names
     * Retrieves a list of names within a given namespace.
     * @param tld the namespace to fetch names from (required)
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getNamespaceNames(String tld, Integer page) throws ApiException {
        ApiResponse<List<String>> localVarResp = getNamespaceNamesWithHttpInfo(tld, page);
        return localVarResp.getData();
    }

    /**
     * Get Namespace Names
     * Retrieves a list of names within a given namespace.
     * @param tld the namespace to fetch names from (required)
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getNamespaceNamesWithHttpInfo(String tld, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceNamesValidateBeforeCall(tld, page, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Namespace Names (asynchronously)
     * Retrieves a list of names within a given namespace.
     * @param tld the namespace to fetch names from (required)
     * @param page names are returned in pages of size 100, so specify the page number. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceNamesAsync(String tld, Integer page, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceNamesValidateBeforeCall(tld, page, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacePrice
     * @param tld the namespace to fetch price for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacePriceCall(String tld, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/prices/namespaces/{tld}"
            .replaceAll("\\{" + "tld" + "\\}", localVarApiClient.escapeString(tld.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacePriceValidateBeforeCall(String tld, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tld' is set
        if (tld == null) {
            throw new ApiException("Missing the required parameter 'tld' when calling getNamespacePrice(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespacePriceCall(tld, _callback);
        return localVarCall;

    }

    /**
     * Get Namespace Price
     * Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param tld the namespace to fetch price for (required)
     * @return BnsGetNamespacePriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BnsGetNamespacePriceResponse getNamespacePrice(String tld) throws ApiException {
        ApiResponse<BnsGetNamespacePriceResponse> localVarResp = getNamespacePriceWithHttpInfo(tld);
        return localVarResp.getData();
    }

    /**
     * Get Namespace Price
     * Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param tld the namespace to fetch price for (required)
     * @return ApiResponse&lt;BnsGetNamespacePriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BnsGetNamespacePriceResponse> getNamespacePriceWithHttpInfo(String tld) throws ApiException {
        okhttp3.Call localVarCall = getNamespacePriceValidateBeforeCall(tld, null);
        Type localVarReturnType = new TypeToken<BnsGetNamespacePriceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Namespace Price (asynchronously)
     * Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     * @param tld the namespace to fetch price for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacePriceAsync(String tld, final ApiCallback<BnsGetNamespacePriceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacePriceValidateBeforeCall(tld, _callback);
        Type localVarReturnType = new TypeToken<BnsGetNamespacePriceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
