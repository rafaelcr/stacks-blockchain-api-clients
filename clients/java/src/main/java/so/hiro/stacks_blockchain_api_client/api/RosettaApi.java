/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiCallback;
import so.hiro.stacks_blockchain_api_client.ApiClient;
import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.ApiResponse;
import so.hiro.stacks_blockchain_api_client.Configuration;
import so.hiro.stacks_blockchain_api_client.Pair;
import so.hiro.stacks_blockchain_api_client.ProgressRequestBody;
import so.hiro.stacks_blockchain_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import so.hiro.stacks_blockchain_api_client.model.RosettaAccountBalanceRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaAccountBalanceResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockTransactionRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockTransactionResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionCombineRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionCombineResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionDeriveRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionDeriveResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionHashRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionHashResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionMetadataRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionMetadataResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionParseRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionParseResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPayloadResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPayloadsRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPreprocessRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPreprocessResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionSubmitRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionSubmitResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaError;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolTransactionRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolTransactionResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaNetworkListResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaNetworkOptionsResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaOptionsRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RosettaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RosettaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RosettaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rosettaAccountBalance
     * @param rosettaAccountBalanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaAccountBalanceCall(RosettaAccountBalanceRequest rosettaAccountBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaAccountBalanceRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/account/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaAccountBalanceValidateBeforeCall(RosettaAccountBalanceRequest rosettaAccountBalanceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaAccountBalanceRequest' is set
        if (rosettaAccountBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaAccountBalanceRequest' when calling rosettaAccountBalance(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaAccountBalanceCall(rosettaAccountBalanceRequest, _callback);
        return localVarCall;

    }

    /**
     * Get an Account Balance
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
     * @param rosettaAccountBalanceRequest  (required)
     * @return RosettaAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaAccountBalanceResponse rosettaAccountBalance(RosettaAccountBalanceRequest rosettaAccountBalanceRequest) throws ApiException {
        ApiResponse<RosettaAccountBalanceResponse> localVarResp = rosettaAccountBalanceWithHttpInfo(rosettaAccountBalanceRequest);
        return localVarResp.getData();
    }

    /**
     * Get an Account Balance
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
     * @param rosettaAccountBalanceRequest  (required)
     * @return ApiResponse&lt;RosettaAccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaAccountBalanceResponse> rosettaAccountBalanceWithHttpInfo(RosettaAccountBalanceRequest rosettaAccountBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaAccountBalanceValidateBeforeCall(rosettaAccountBalanceRequest, null);
        Type localVarReturnType = new TypeToken<RosettaAccountBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Account Balance (asynchronously)
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
     * @param rosettaAccountBalanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaAccountBalanceAsync(RosettaAccountBalanceRequest rosettaAccountBalanceRequest, final ApiCallback<RosettaAccountBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaAccountBalanceValidateBeforeCall(rosettaAccountBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaAccountBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaBlock
     * @param rosettaBlockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaBlockCall(RosettaBlockRequest rosettaBlockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaBlockRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/block";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaBlockValidateBeforeCall(RosettaBlockRequest rosettaBlockRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaBlockRequest' is set
        if (rosettaBlockRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaBlockRequest' when calling rosettaBlock(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaBlockCall(rosettaBlockRequest, _callback);
        return localVarCall;

    }

    /**
     * Get a Block
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * @param rosettaBlockRequest  (required)
     * @return RosettaBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaBlockResponse rosettaBlock(RosettaBlockRequest rosettaBlockRequest) throws ApiException {
        ApiResponse<RosettaBlockResponse> localVarResp = rosettaBlockWithHttpInfo(rosettaBlockRequest);
        return localVarResp.getData();
    }

    /**
     * Get a Block
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * @param rosettaBlockRequest  (required)
     * @return ApiResponse&lt;RosettaBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaBlockResponse> rosettaBlockWithHttpInfo(RosettaBlockRequest rosettaBlockRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaBlockValidateBeforeCall(rosettaBlockRequest, null);
        Type localVarReturnType = new TypeToken<RosettaBlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Block (asynchronously)
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     * @param rosettaBlockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaBlockAsync(RosettaBlockRequest rosettaBlockRequest, final ApiCallback<RosettaBlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaBlockValidateBeforeCall(rosettaBlockRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaBlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaBlockTransaction
     * @param rosettaBlockTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaBlockTransactionCall(RosettaBlockTransactionRequest rosettaBlockTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaBlockTransactionRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/block/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaBlockTransactionValidateBeforeCall(RosettaBlockTransactionRequest rosettaBlockTransactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaBlockTransactionRequest' is set
        if (rosettaBlockTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaBlockTransactionRequest' when calling rosettaBlockTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaBlockTransactionCall(rosettaBlockTransactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Get a Block Transaction
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * @param rosettaBlockTransactionRequest  (required)
     * @return RosettaBlockTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaBlockTransactionResponse rosettaBlockTransaction(RosettaBlockTransactionRequest rosettaBlockTransactionRequest) throws ApiException {
        ApiResponse<RosettaBlockTransactionResponse> localVarResp = rosettaBlockTransactionWithHttpInfo(rosettaBlockTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Get a Block Transaction
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * @param rosettaBlockTransactionRequest  (required)
     * @return ApiResponse&lt;RosettaBlockTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaBlockTransactionResponse> rosettaBlockTransactionWithHttpInfo(RosettaBlockTransactionRequest rosettaBlockTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaBlockTransactionValidateBeforeCall(rosettaBlockTransactionRequest, null);
        Type localVarReturnType = new TypeToken<RosettaBlockTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Block Transaction (asynchronously)
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     * @param rosettaBlockTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaBlockTransactionAsync(RosettaBlockTransactionRequest rosettaBlockTransactionRequest, final ApiCallback<RosettaBlockTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaBlockTransactionValidateBeforeCall(rosettaBlockTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaBlockTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionCombine
     * @param rosettaConstructionCombineRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionCombineCall(RosettaConstructionCombineRequest rosettaConstructionCombineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionCombineRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/combine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionCombineValidateBeforeCall(RosettaConstructionCombineRequest rosettaConstructionCombineRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionCombineRequest' is set
        if (rosettaConstructionCombineRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionCombineRequest' when calling rosettaConstructionCombine(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionCombineCall(rosettaConstructionCombineRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Network Transaction from Signatures
     * Take unsigned transaction and signature, combine both and return signed transaction
     * @param rosettaConstructionCombineRequest  (required)
     * @return RosettaConstructionCombineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionCombineResponse rosettaConstructionCombine(RosettaConstructionCombineRequest rosettaConstructionCombineRequest) throws ApiException {
        ApiResponse<RosettaConstructionCombineResponse> localVarResp = rosettaConstructionCombineWithHttpInfo(rosettaConstructionCombineRequest);
        return localVarResp.getData();
    }

    /**
     * Create Network Transaction from Signatures
     * Take unsigned transaction and signature, combine both and return signed transaction
     * @param rosettaConstructionCombineRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionCombineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionCombineResponse> rosettaConstructionCombineWithHttpInfo(RosettaConstructionCombineRequest rosettaConstructionCombineRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionCombineValidateBeforeCall(rosettaConstructionCombineRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionCombineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Transaction from Signatures (asynchronously)
     * Take unsigned transaction and signature, combine both and return signed transaction
     * @param rosettaConstructionCombineRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionCombineAsync(RosettaConstructionCombineRequest rosettaConstructionCombineRequest, final ApiCallback<RosettaConstructionCombineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionCombineValidateBeforeCall(rosettaConstructionCombineRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionCombineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionDerive
     * @param rosettaConstructionDeriveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionDeriveCall(RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionDeriveRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/derive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionDeriveValidateBeforeCall(RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionDeriveRequest' is set
        if (rosettaConstructionDeriveRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionDeriveRequest' when calling rosettaConstructionDerive(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionDeriveCall(rosettaConstructionDeriveRequest, _callback);
        return localVarCall;

    }

    /**
     * Derive an AccountIdentifier from a PublicKey
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * @param rosettaConstructionDeriveRequest  (required)
     * @return RosettaConstructionDeriveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionDeriveResponse rosettaConstructionDerive(RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest) throws ApiException {
        ApiResponse<RosettaConstructionDeriveResponse> localVarResp = rosettaConstructionDeriveWithHttpInfo(rosettaConstructionDeriveRequest);
        return localVarResp.getData();
    }

    /**
     * Derive an AccountIdentifier from a PublicKey
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * @param rosettaConstructionDeriveRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionDeriveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionDeriveResponse> rosettaConstructionDeriveWithHttpInfo(RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionDeriveValidateBeforeCall(rosettaConstructionDeriveRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionDeriveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Derive an AccountIdentifier from a PublicKey (asynchronously)
     * Retrieves the Account Identifier information based on a Public Key for a given network
     * @param rosettaConstructionDeriveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionDeriveAsync(RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest, final ApiCallback<RosettaConstructionDeriveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionDeriveValidateBeforeCall(rosettaConstructionDeriveRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionDeriveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionHash
     * @param rosettaConstructionHashRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionHashCall(RosettaConstructionHashRequest rosettaConstructionHashRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionHashRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionHashValidateBeforeCall(RosettaConstructionHashRequest rosettaConstructionHashRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionHashRequest' is set
        if (rosettaConstructionHashRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionHashRequest' when calling rosettaConstructionHash(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionHashCall(rosettaConstructionHashRequest, _callback);
        return localVarCall;

    }

    /**
     * Get the Hash of a Signed Transaction
     * Retrieves the network-specific transaction hash for a signed transaction.
     * @param rosettaConstructionHashRequest  (required)
     * @return RosettaConstructionHashResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionHashResponse rosettaConstructionHash(RosettaConstructionHashRequest rosettaConstructionHashRequest) throws ApiException {
        ApiResponse<RosettaConstructionHashResponse> localVarResp = rosettaConstructionHashWithHttpInfo(rosettaConstructionHashRequest);
        return localVarResp.getData();
    }

    /**
     * Get the Hash of a Signed Transaction
     * Retrieves the network-specific transaction hash for a signed transaction.
     * @param rosettaConstructionHashRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionHashResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionHashResponse> rosettaConstructionHashWithHttpInfo(RosettaConstructionHashRequest rosettaConstructionHashRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionHashValidateBeforeCall(rosettaConstructionHashRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionHashResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Hash of a Signed Transaction (asynchronously)
     * Retrieves the network-specific transaction hash for a signed transaction.
     * @param rosettaConstructionHashRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionHashAsync(RosettaConstructionHashRequest rosettaConstructionHashRequest, final ApiCallback<RosettaConstructionHashResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionHashValidateBeforeCall(rosettaConstructionHashRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionHashResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionMetadata
     * @param rosettaConstructionMetadataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionMetadataCall(RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionMetadataRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionMetadataValidateBeforeCall(RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionMetadataRequest' is set
        if (rosettaConstructionMetadataRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionMetadataRequest' when calling rosettaConstructionMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionMetadataCall(rosettaConstructionMetadataRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Metadata for Transaction Construction
     * To Do
     * @param rosettaConstructionMetadataRequest  (required)
     * @return RosettaConstructionMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionMetadataResponse rosettaConstructionMetadata(RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest) throws ApiException {
        ApiResponse<RosettaConstructionMetadataResponse> localVarResp = rosettaConstructionMetadataWithHttpInfo(rosettaConstructionMetadataRequest);
        return localVarResp.getData();
    }

    /**
     * Get Metadata for Transaction Construction
     * To Do
     * @param rosettaConstructionMetadataRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionMetadataResponse> rosettaConstructionMetadataWithHttpInfo(RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionMetadataValidateBeforeCall(rosettaConstructionMetadataRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Metadata for Transaction Construction (asynchronously)
     * To Do
     * @param rosettaConstructionMetadataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionMetadataAsync(RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest, final ApiCallback<RosettaConstructionMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionMetadataValidateBeforeCall(rosettaConstructionMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionParse
     * @param rosettaConstructionParseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionParseCall(RosettaConstructionParseRequest rosettaConstructionParseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionParseRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionParseValidateBeforeCall(RosettaConstructionParseRequest rosettaConstructionParseRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionParseRequest' is set
        if (rosettaConstructionParseRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionParseRequest' when calling rosettaConstructionParse(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionParseCall(rosettaConstructionParseRequest, _callback);
        return localVarCall;

    }

    /**
     * Parse a Transaction
     * TODO
     * @param rosettaConstructionParseRequest  (required)
     * @return RosettaConstructionParseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionParseResponse rosettaConstructionParse(RosettaConstructionParseRequest rosettaConstructionParseRequest) throws ApiException {
        ApiResponse<RosettaConstructionParseResponse> localVarResp = rosettaConstructionParseWithHttpInfo(rosettaConstructionParseRequest);
        return localVarResp.getData();
    }

    /**
     * Parse a Transaction
     * TODO
     * @param rosettaConstructionParseRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionParseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionParseResponse> rosettaConstructionParseWithHttpInfo(RosettaConstructionParseRequest rosettaConstructionParseRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionParseValidateBeforeCall(rosettaConstructionParseRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionParseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parse a Transaction (asynchronously)
     * TODO
     * @param rosettaConstructionParseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionParseAsync(RosettaConstructionParseRequest rosettaConstructionParseRequest, final ApiCallback<RosettaConstructionParseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionParseValidateBeforeCall(rosettaConstructionParseRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionParseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionPayloads
     * @param rosettaConstructionPayloadsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionPayloadsCall(RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionPayloadsRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/payloads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionPayloadsValidateBeforeCall(RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionPayloadsRequest' is set
        if (rosettaConstructionPayloadsRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionPayloadsRequest' when calling rosettaConstructionPayloads(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionPayloadsCall(rosettaConstructionPayloadsRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads
     * Generate and unsigned transaction from operations and metadata
     * @param rosettaConstructionPayloadsRequest  (required)
     * @return RosettaConstructionPayloadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionPayloadResponse rosettaConstructionPayloads(RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest) throws ApiException {
        ApiResponse<RosettaConstructionPayloadResponse> localVarResp = rosettaConstructionPayloadsWithHttpInfo(rosettaConstructionPayloadsRequest);
        return localVarResp.getData();
    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads
     * Generate and unsigned transaction from operations and metadata
     * @param rosettaConstructionPayloadsRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionPayloadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionPayloadResponse> rosettaConstructionPayloadsWithHttpInfo(RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionPayloadsValidateBeforeCall(rosettaConstructionPayloadsRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionPayloadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an Unsigned Transaction and Signing Payloads (asynchronously)
     * Generate and unsigned transaction from operations and metadata
     * @param rosettaConstructionPayloadsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionPayloadsAsync(RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest, final ApiCallback<RosettaConstructionPayloadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionPayloadsValidateBeforeCall(rosettaConstructionPayloadsRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionPayloadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionPreprocess
     * @param rosettaConstructionPreprocessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionPreprocessCall(RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionPreprocessRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/preprocess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionPreprocessValidateBeforeCall(RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionPreprocessRequest' is set
        if (rosettaConstructionPreprocessRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionPreprocessRequest' when calling rosettaConstructionPreprocess(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionPreprocessCall(rosettaConstructionPreprocessRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a Request to Fetch Metadata
     * TODO
     * @param rosettaConstructionPreprocessRequest  (required)
     * @return RosettaConstructionPreprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionPreprocessResponse rosettaConstructionPreprocess(RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest) throws ApiException {
        ApiResponse<RosettaConstructionPreprocessResponse> localVarResp = rosettaConstructionPreprocessWithHttpInfo(rosettaConstructionPreprocessRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Request to Fetch Metadata
     * TODO
     * @param rosettaConstructionPreprocessRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionPreprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionPreprocessResponse> rosettaConstructionPreprocessWithHttpInfo(RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionPreprocessValidateBeforeCall(rosettaConstructionPreprocessRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionPreprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Request to Fetch Metadata (asynchronously)
     * TODO
     * @param rosettaConstructionPreprocessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionPreprocessAsync(RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest, final ApiCallback<RosettaConstructionPreprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionPreprocessValidateBeforeCall(rosettaConstructionPreprocessRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionPreprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaConstructionSubmit
     * @param rosettaConstructionSubmitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionSubmitCall(RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaConstructionSubmitRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/construction/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaConstructionSubmitValidateBeforeCall(RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaConstructionSubmitRequest' is set
        if (rosettaConstructionSubmitRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaConstructionSubmitRequest' when calling rosettaConstructionSubmit(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaConstructionSubmitCall(rosettaConstructionSubmitRequest, _callback);
        return localVarCall;

    }

    /**
     * Submit a Signed Transaction
     * Submit a pre-signed transaction to the node.
     * @param rosettaConstructionSubmitRequest  (required)
     * @return RosettaConstructionSubmitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaConstructionSubmitResponse rosettaConstructionSubmit(RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest) throws ApiException {
        ApiResponse<RosettaConstructionSubmitResponse> localVarResp = rosettaConstructionSubmitWithHttpInfo(rosettaConstructionSubmitRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a Signed Transaction
     * Submit a pre-signed transaction to the node.
     * @param rosettaConstructionSubmitRequest  (required)
     * @return ApiResponse&lt;RosettaConstructionSubmitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaConstructionSubmitResponse> rosettaConstructionSubmitWithHttpInfo(RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaConstructionSubmitValidateBeforeCall(rosettaConstructionSubmitRequest, null);
        Type localVarReturnType = new TypeToken<RosettaConstructionSubmitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Signed Transaction (asynchronously)
     * Submit a pre-signed transaction to the node.
     * @param rosettaConstructionSubmitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaConstructionSubmitAsync(RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest, final ApiCallback<RosettaConstructionSubmitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaConstructionSubmitValidateBeforeCall(rosettaConstructionSubmitRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaConstructionSubmitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaMempool
     * @param rosettaMempoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaMempoolCall(RosettaMempoolRequest rosettaMempoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaMempoolRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/mempool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaMempoolValidateBeforeCall(RosettaMempoolRequest rosettaMempoolRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaMempoolRequest' is set
        if (rosettaMempoolRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaMempoolRequest' when calling rosettaMempool(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaMempoolCall(rosettaMempoolRequest, _callback);
        return localVarCall;

    }

    /**
     * Get All Mempool Transactions
     * Retrieves a list of transcations currently in the mempool for a given network.
     * @param rosettaMempoolRequest  (required)
     * @return RosettaMempoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaMempoolResponse rosettaMempool(RosettaMempoolRequest rosettaMempoolRequest) throws ApiException {
        ApiResponse<RosettaMempoolResponse> localVarResp = rosettaMempoolWithHttpInfo(rosettaMempoolRequest);
        return localVarResp.getData();
    }

    /**
     * Get All Mempool Transactions
     * Retrieves a list of transcations currently in the mempool for a given network.
     * @param rosettaMempoolRequest  (required)
     * @return ApiResponse&lt;RosettaMempoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaMempoolResponse> rosettaMempoolWithHttpInfo(RosettaMempoolRequest rosettaMempoolRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaMempoolValidateBeforeCall(rosettaMempoolRequest, null);
        Type localVarReturnType = new TypeToken<RosettaMempoolResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Mempool Transactions (asynchronously)
     * Retrieves a list of transcations currently in the mempool for a given network.
     * @param rosettaMempoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaMempoolAsync(RosettaMempoolRequest rosettaMempoolRequest, final ApiCallback<RosettaMempoolResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaMempoolValidateBeforeCall(rosettaMempoolRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaMempoolResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaMempoolTransaction
     * @param rosettaMempoolTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaMempoolTransactionCall(RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaMempoolTransactionRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/mempool/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaMempoolTransactionValidateBeforeCall(RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaMempoolTransactionRequest' is set
        if (rosettaMempoolTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaMempoolTransactionRequest' when calling rosettaMempoolTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaMempoolTransactionCall(rosettaMempoolTransactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Get a Mempool Transaction
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * @param rosettaMempoolTransactionRequest  (required)
     * @return RosettaMempoolTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaMempoolTransactionResponse rosettaMempoolTransaction(RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest) throws ApiException {
        ApiResponse<RosettaMempoolTransactionResponse> localVarResp = rosettaMempoolTransactionWithHttpInfo(rosettaMempoolTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Get a Mempool Transaction
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * @param rosettaMempoolTransactionRequest  (required)
     * @return ApiResponse&lt;RosettaMempoolTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaMempoolTransactionResponse> rosettaMempoolTransactionWithHttpInfo(RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaMempoolTransactionValidateBeforeCall(rosettaMempoolTransactionRequest, null);
        Type localVarReturnType = new TypeToken<RosettaMempoolTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Mempool Transaction (asynchronously)
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     * @param rosettaMempoolTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaMempoolTransactionAsync(RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest, final ApiCallback<RosettaMempoolTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaMempoolTransactionValidateBeforeCall(rosettaMempoolTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaMempoolTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaNetworkList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rosetta/v1/network/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaNetworkListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rosettaNetworkListCall(_callback);
        return localVarCall;

    }

    /**
     * Get List of Available Networks
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * @return RosettaNetworkListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaNetworkListResponse rosettaNetworkList() throws ApiException {
        ApiResponse<RosettaNetworkListResponse> localVarResp = rosettaNetworkListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get List of Available Networks
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * @return ApiResponse&lt;RosettaNetworkListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaNetworkListResponse> rosettaNetworkListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rosettaNetworkListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RosettaNetworkListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of Available Networks (asynchronously)
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkListAsync(final ApiCallback<RosettaNetworkListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaNetworkListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RosettaNetworkListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaNetworkOptions
     * @param rosettaOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkOptionsCall(RosettaOptionsRequest rosettaOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaOptionsRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/network/options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaNetworkOptionsValidateBeforeCall(RosettaOptionsRequest rosettaOptionsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaOptionsRequest' is set
        if (rosettaOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaOptionsRequest' when calling rosettaNetworkOptions(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaNetworkOptionsCall(rosettaOptionsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Network Options
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
     * @param rosettaOptionsRequest  (required)
     * @return RosettaNetworkOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RosettaNetworkOptionsResponse rosettaNetworkOptions(RosettaOptionsRequest rosettaOptionsRequest) throws ApiException {
        ApiResponse<RosettaNetworkOptionsResponse> localVarResp = rosettaNetworkOptionsWithHttpInfo(rosettaOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Get Network Options
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
     * @param rosettaOptionsRequest  (required)
     * @return ApiResponse&lt;RosettaNetworkOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RosettaNetworkOptionsResponse> rosettaNetworkOptionsWithHttpInfo(RosettaOptionsRequest rosettaOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaNetworkOptionsValidateBeforeCall(rosettaOptionsRequest, null);
        Type localVarReturnType = new TypeToken<RosettaNetworkOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Options (asynchronously)
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
     * @param rosettaOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkOptionsAsync(RosettaOptionsRequest rosettaOptionsRequest, final ApiCallback<RosettaNetworkOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaNetworkOptionsValidateBeforeCall(rosettaOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<RosettaNetworkOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rosettaNetworkStatus
     * @param rosettaStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkStatusCall(RosettaStatusRequest rosettaStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rosettaStatusRequest;

        // create path and map variables
        String localVarPath = "/rosetta/v1/network/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rosettaNetworkStatusValidateBeforeCall(RosettaStatusRequest rosettaStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rosettaStatusRequest' is set
        if (rosettaStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'rosettaStatusRequest' when calling rosettaNetworkStatus(Async)");
        }
        

        okhttp3.Call localVarCall = rosettaNetworkStatusCall(rosettaStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Network Status
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
     * @param rosettaStatusRequest  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rosettaNetworkStatus(RosettaStatusRequest rosettaStatusRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rosettaNetworkStatusWithHttpInfo(rosettaStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Get Network Status
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
     * @param rosettaStatusRequest  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rosettaNetworkStatusWithHttpInfo(RosettaStatusRequest rosettaStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = rosettaNetworkStatusValidateBeforeCall(rosettaStatusRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Status (asynchronously)
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
     * @param rosettaStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rosettaNetworkStatusAsync(RosettaStatusRequest rosettaStatusRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rosettaNetworkStatusValidateBeforeCall(rosettaStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
