/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiCallback;
import so.hiro.stacks_blockchain_api_client.ApiClient;
import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.ApiResponse;
import so.hiro.stacks_blockchain_api_client.Configuration;
import so.hiro.stacks_blockchain_api_client.Pair;
import so.hiro.stacks_blockchain_api_client.ProgressRequestBody;
import so.hiro.stacks_blockchain_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobjectobjectobjectobject;
import so.hiro.stacks_blockchain_api_client.model.ContractInterfaceResponse;
import so.hiro.stacks_blockchain_api_client.model.ContractListResponse;
import so.hiro.stacks_blockchain_api_client.model.ContractSourceResponse;
import so.hiro.stacks_blockchain_api_client.model.MapEntryResponse;
import so.hiro.stacks_blockchain_api_client.model.ReadOnlyFunctionArgs;
import so.hiro.stacks_blockchain_api_client.model.ReadOnlyFunctionSuccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmartContractsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmartContractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmartContractsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callReadOnlyFunction
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param functionName Function name (required)
     * @param readOnlyFunctionArgs  (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callReadOnlyFunctionCall(String contractAddress, String contractName, String functionName, ReadOnlyFunctionArgs readOnlyFunctionArgs, String tip, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readOnlyFunctionArgs;

        // create path and map variables
        String localVarPath = "/v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}"
            .replaceAll("\\{" + "contract_address" + "\\}", localVarApiClient.escapeString(contractAddress.toString()))
            .replaceAll("\\{" + "contract_name" + "\\}", localVarApiClient.escapeString(contractName.toString()))
            .replaceAll("\\{" + "function_name" + "\\}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip", tip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callReadOnlyFunctionValidateBeforeCall(String contractAddress, String contractName, String functionName, ReadOnlyFunctionArgs readOnlyFunctionArgs, String tip, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractAddress' is set
        if (contractAddress == null) {
            throw new ApiException("Missing the required parameter 'contractAddress' when calling callReadOnlyFunction(Async)");
        }
        
        // verify the required parameter 'contractName' is set
        if (contractName == null) {
            throw new ApiException("Missing the required parameter 'contractName' when calling callReadOnlyFunction(Async)");
        }
        
        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling callReadOnlyFunction(Async)");
        }
        
        // verify the required parameter 'readOnlyFunctionArgs' is set
        if (readOnlyFunctionArgs == null) {
            throw new ApiException("Missing the required parameter 'readOnlyFunctionArgs' when calling callReadOnlyFunction(Async)");
        }
        

        okhttp3.Call localVarCall = callReadOnlyFunctionCall(contractAddress, contractName, functionName, readOnlyFunctionArgs, tip, _callback);
        return localVarCall;

    }

    /**
     * Call read-only function
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param functionName Function name (required)
     * @param readOnlyFunctionArgs  (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ReadOnlyFunctionSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReadOnlyFunctionSuccessResponse callReadOnlyFunction(String contractAddress, String contractName, String functionName, ReadOnlyFunctionArgs readOnlyFunctionArgs, String tip) throws ApiException {
        ApiResponse<ReadOnlyFunctionSuccessResponse> localVarResp = callReadOnlyFunctionWithHttpInfo(contractAddress, contractName, functionName, readOnlyFunctionArgs, tip);
        return localVarResp.getData();
    }

    /**
     * Call read-only function
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param functionName Function name (required)
     * @param readOnlyFunctionArgs  (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ApiResponse&lt;ReadOnlyFunctionSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadOnlyFunctionSuccessResponse> callReadOnlyFunctionWithHttpInfo(String contractAddress, String contractName, String functionName, ReadOnlyFunctionArgs readOnlyFunctionArgs, String tip) throws ApiException {
        okhttp3.Call localVarCall = callReadOnlyFunctionValidateBeforeCall(contractAddress, contractName, functionName, readOnlyFunctionArgs, tip, null);
        Type localVarReturnType = new TypeToken<ReadOnlyFunctionSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Call read-only function (asynchronously)
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param functionName Function name (required)
     * @param readOnlyFunctionArgs  (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callReadOnlyFunctionAsync(String contractAddress, String contractName, String functionName, ReadOnlyFunctionArgs readOnlyFunctionArgs, String tip, final ApiCallback<ReadOnlyFunctionSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callReadOnlyFunctionValidateBeforeCall(contractAddress, contractName, functionName, readOnlyFunctionArgs, tip, _callback);
        Type localVarReturnType = new TypeToken<ReadOnlyFunctionSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractById
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot find contract of given ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractByIdCall(String contractId, Boolean unanchored, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/contract/{contract_id}"
            .replaceAll("\\{" + "contract_id" + "\\}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractByIdValidateBeforeCall(String contractId, Boolean unanchored, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getContractById(Async)");
        }
        

        okhttp3.Call localVarCall = getContractByIdCall(contractId, unanchored, _callback);
        return localVarCall;

    }

    /**
     * Get contract info
     * Retrieves details of a contract with a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot find contract of given ID </td><td>  -  </td></tr>
     </table>
     */
    public Object getContractById(String contractId, Boolean unanchored) throws ApiException {
        ApiResponse<Object> localVarResp = getContractByIdWithHttpInfo(contractId, unanchored);
        return localVarResp.getData();
    }

    /**
     * Get contract info
     * Retrieves details of a contract with a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot find contract of given ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getContractByIdWithHttpInfo(String contractId, Boolean unanchored) throws ApiException {
        okhttp3.Call localVarCall = getContractByIdValidateBeforeCall(contractId, unanchored, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract info (asynchronously)
     * Retrieves details of a contract with a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot find contract of given ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractByIdAsync(String contractId, Boolean unanchored, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractByIdValidateBeforeCall(contractId, unanchored, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractDataMapEntry
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param mapName Map name (required)
     * @param key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param proof Returns object without the proof field when set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed loading data map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractDataMapEntryCall(String contractAddress, String contractName, String mapName, String key, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = key;

        // create path and map variables
        String localVarPath = "/v2/map_entry/{contract_address}/{contract_name}/{map_name}"
            .replaceAll("\\{" + "contract_address" + "\\}", localVarApiClient.escapeString(contractAddress.toString()))
            .replaceAll("\\{" + "contract_name" + "\\}", localVarApiClient.escapeString(contractName.toString()))
            .replaceAll("\\{" + "map_name" + "\\}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proof", proof));
        }

        if (tip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip", tip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractDataMapEntryValidateBeforeCall(String contractAddress, String contractName, String mapName, String key, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractAddress' is set
        if (contractAddress == null) {
            throw new ApiException("Missing the required parameter 'contractAddress' when calling getContractDataMapEntry(Async)");
        }
        
        // verify the required parameter 'contractName' is set
        if (contractName == null) {
            throw new ApiException("Missing the required parameter 'contractName' when calling getContractDataMapEntry(Async)");
        }
        
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling getContractDataMapEntry(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getContractDataMapEntry(Async)");
        }
        

        okhttp3.Call localVarCall = getContractDataMapEntryCall(contractAddress, contractName, mapName, key, proof, tip, _callback);
        return localVarCall;

    }

    /**
     * Get specific data-map inside a contract
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address &#x60;contract_address&#x60; and Contract Name &#x60;contract_address&#x60; in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, &#x60;data&#x60; is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param mapName Map name (required)
     * @param key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param proof Returns object without the proof field when set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return MapEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed loading data map </td><td>  -  </td></tr>
     </table>
     */
    public MapEntryResponse getContractDataMapEntry(String contractAddress, String contractName, String mapName, String key, Integer proof, String tip) throws ApiException {
        ApiResponse<MapEntryResponse> localVarResp = getContractDataMapEntryWithHttpInfo(contractAddress, contractName, mapName, key, proof, tip);
        return localVarResp.getData();
    }

    /**
     * Get specific data-map inside a contract
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address &#x60;contract_address&#x60; and Contract Name &#x60;contract_address&#x60; in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, &#x60;data&#x60; is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param mapName Map name (required)
     * @param key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param proof Returns object without the proof field when set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ApiResponse&lt;MapEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed loading data map </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MapEntryResponse> getContractDataMapEntryWithHttpInfo(String contractAddress, String contractName, String mapName, String key, Integer proof, String tip) throws ApiException {
        okhttp3.Call localVarCall = getContractDataMapEntryValidateBeforeCall(contractAddress, contractName, mapName, key, proof, tip, null);
        Type localVarReturnType = new TypeToken<MapEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific data-map inside a contract (asynchronously)
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address &#x60;contract_address&#x60; and Contract Name &#x60;contract_address&#x60; in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, &#x60;data&#x60; is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param mapName Map name (required)
     * @param key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param proof Returns object without the proof field when set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed loading data map </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractDataMapEntryAsync(String contractAddress, String contractName, String mapName, String key, Integer proof, String tip, final ApiCallback<MapEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractDataMapEntryValidateBeforeCall(contractAddress, contractName, mapName, key, proof, tip, _callback);
        Type localVarReturnType = new TypeToken<MapEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractEventsById
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param limit max number of contract events to fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractEventsByIdCall(String contractId, Integer limit, Integer offset, Boolean unanchored, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/contract/{contract_id}/events"
            .replaceAll("\\{" + "contract_id" + "\\}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (unanchored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unanchored", unanchored));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractEventsByIdValidateBeforeCall(String contractId, Integer limit, Integer offset, Boolean unanchored, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling getContractEventsById(Async)");
        }
        

        okhttp3.Call localVarCall = getContractEventsByIdCall(contractId, limit, offset, unanchored, _callback);
        return localVarCall;

    }

    /**
     * Get contract events
     * Retrieves a list of events that have been triggered by a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param limit max number of contract events to fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @return AnyOfobjectobjectobjectobjectobject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events </td><td>  -  </td></tr>
     </table>
     */
    public AnyOfobjectobjectobjectobjectobject getContractEventsById(String contractId, Integer limit, Integer offset, Boolean unanchored) throws ApiException {
        ApiResponse<AnyOfobjectobjectobjectobjectobject> localVarResp = getContractEventsByIdWithHttpInfo(contractId, limit, offset, unanchored);
        return localVarResp.getData();
    }

    /**
     * Get contract events
     * Retrieves a list of events that have been triggered by a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param limit max number of contract events to fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @return ApiResponse&lt;AnyOfobjectobjectobjectobjectobject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnyOfobjectobjectobjectobjectobject> getContractEventsByIdWithHttpInfo(String contractId, Integer limit, Integer offset, Boolean unanchored) throws ApiException {
        okhttp3.Call localVarCall = getContractEventsByIdValidateBeforeCall(contractId, limit, offset, unanchored, null);
        Type localVarReturnType = new TypeToken<AnyOfobjectobjectobjectobjectobject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract events (asynchronously)
     * Retrieves a list of events that have been triggered by a given &#x60;contract_id&#x60;
     * @param contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param limit max number of contract events to fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractEventsByIdAsync(String contractId, Integer limit, Integer offset, Boolean unanchored, final ApiCallback<AnyOfobjectobjectobjectobjectobject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractEventsByIdValidateBeforeCall(contractId, limit, offset, unanchored, _callback);
        Type localVarReturnType = new TypeToken<AnyOfobjectobjectobjectobjectobject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractInterface
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract interface </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractInterfaceCall(String contractAddress, String contractName, String tip, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contracts/interface/{contract_address}/{contract_name}"
            .replaceAll("\\{" + "contract_address" + "\\}", localVarApiClient.escapeString(contractAddress.toString()))
            .replaceAll("\\{" + "contract_name" + "\\}", localVarApiClient.escapeString(contractName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip", tip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractInterfaceValidateBeforeCall(String contractAddress, String contractName, String tip, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractAddress' is set
        if (contractAddress == null) {
            throw new ApiException("Missing the required parameter 'contractAddress' when calling getContractInterface(Async)");
        }
        
        // verify the required parameter 'contractName' is set
        if (contractName == null) {
            throw new ApiException("Missing the required parameter 'contractName' when calling getContractInterface(Async)");
        }
        

        okhttp3.Call localVarCall = getContractInterfaceCall(contractAddress, contractName, tip, _callback);
        return localVarCall;

    }

    /**
     * Get contract interface
     * Retrieves a contract interface with a given &#x60;contract_address&#x60; and &#x60;contract name&#x60;
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ContractInterfaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract interface </td><td>  -  </td></tr>
     </table>
     */
    public ContractInterfaceResponse getContractInterface(String contractAddress, String contractName, String tip) throws ApiException {
        ApiResponse<ContractInterfaceResponse> localVarResp = getContractInterfaceWithHttpInfo(contractAddress, contractName, tip);
        return localVarResp.getData();
    }

    /**
     * Get contract interface
     * Retrieves a contract interface with a given &#x60;contract_address&#x60; and &#x60;contract name&#x60;
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ApiResponse&lt;ContractInterfaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract interface </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractInterfaceResponse> getContractInterfaceWithHttpInfo(String contractAddress, String contractName, String tip) throws ApiException {
        okhttp3.Call localVarCall = getContractInterfaceValidateBeforeCall(contractAddress, contractName, tip, null);
        Type localVarReturnType = new TypeToken<ContractInterfaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract interface (asynchronously)
     * Retrieves a contract interface with a given &#x60;contract_address&#x60; and &#x60;contract name&#x60;
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contract interface </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractInterfaceAsync(String contractAddress, String contractName, String tip, final ApiCallback<ContractInterfaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractInterfaceValidateBeforeCall(contractAddress, contractName, tip, _callback);
        Type localVarReturnType = new TypeToken<ContractInterfaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractSource
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractSourceCall(String contractAddress, String contractName, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contracts/source/{contract_address}/{contract_name}"
            .replaceAll("\\{" + "contract_address" + "\\}", localVarApiClient.escapeString(contractAddress.toString()))
            .replaceAll("\\{" + "contract_name" + "\\}", localVarApiClient.escapeString(contractName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proof", proof));
        }

        if (tip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip", tip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractSourceValidateBeforeCall(String contractAddress, String contractName, Integer proof, String tip, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractAddress' is set
        if (contractAddress == null) {
            throw new ApiException("Missing the required parameter 'contractAddress' when calling getContractSource(Async)");
        }
        
        // verify the required parameter 'contractName' is set
        if (contractName == null) {
            throw new ApiException("Missing the required parameter 'contractName' when calling getContractSource(Async)");
        }
        

        okhttp3.Call localVarCall = getContractSourceCall(contractAddress, contractName, proof, tip, _callback);
        return localVarCall;

    }

    /**
     * Get contract source
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ContractSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContractSourceResponse getContractSource(String contractAddress, String contractName, Integer proof, String tip) throws ApiException {
        ApiResponse<ContractSourceResponse> localVarResp = getContractSourceWithHttpInfo(contractAddress, contractName, proof, tip);
        return localVarResp.getData();
    }

    /**
     * Get contract source
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @return ApiResponse&lt;ContractSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractSourceResponse> getContractSourceWithHttpInfo(String contractAddress, String contractName, Integer proof, String tip) throws ApiException {
        okhttp3.Call localVarCall = getContractSourceValidateBeforeCall(contractAddress, contractName, proof, tip, null);
        Type localVarReturnType = new TypeToken<ContractSourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract source (asynchronously)
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * @param contractAddress Stacks address (required)
     * @param contractName Contract name (required)
     * @param proof Returns object without the proof field if set to 0 (optional)
     * @param tip The Stacks chain tip to query from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractSourceAsync(String contractAddress, String contractName, Integer proof, String tip, final ApiCallback<ContractSourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractSourceValidateBeforeCall(contractAddress, contractName, proof, tip, _callback);
        Type localVarReturnType = new TypeToken<ContractSourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractsByTrait
     * @param traitAbi JSON abi of the trait. (required)
     * @param limit max number of contracts fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contracts implement given trait </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsByTraitCall(String traitAbi, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/contract/by_trait";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (traitAbi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trait_abi", traitAbi));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractsByTraitValidateBeforeCall(String traitAbi, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'traitAbi' is set
        if (traitAbi == null) {
            throw new ApiException("Missing the required parameter 'traitAbi' when calling getContractsByTrait(Async)");
        }
        

        okhttp3.Call localVarCall = getContractsByTraitCall(traitAbi, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get contracts by trait
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * @param traitAbi JSON abi of the trait. (required)
     * @param limit max number of contracts fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @return ContractListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contracts implement given trait </td><td>  -  </td></tr>
     </table>
     */
    public ContractListResponse getContractsByTrait(String traitAbi, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ContractListResponse> localVarResp = getContractsByTraitWithHttpInfo(traitAbi, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get contracts by trait
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * @param traitAbi JSON abi of the trait. (required)
     * @param limit max number of contracts fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @return ApiResponse&lt;ContractListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contracts implement given trait </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractListResponse> getContractsByTraitWithHttpInfo(String traitAbi, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getContractsByTraitValidateBeforeCall(traitAbi, limit, offset, null);
        Type localVarReturnType = new TypeToken<ContractListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contracts by trait (asynchronously)
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     * @param traitAbi JSON abi of the trait. (required)
     * @param limit max number of contracts fetch (optional)
     * @param offset index of first contract event to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of contracts implement given trait </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsByTraitAsync(String traitAbi, Integer limit, Integer offset, final ApiCallback<ContractListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractsByTraitValidateBeforeCall(traitAbi, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ContractListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
