/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiCallback;
import so.hiro.stacks_blockchain_api_client.ApiClient;
import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.ApiResponse;
import so.hiro.stacks_blockchain_api_client.Configuration;
import so.hiro.stacks_blockchain_api_client.Pair;
import so.hiro.stacks_blockchain_api_client.ProgressRequestBody;
import so.hiro.stacks_blockchain_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import so.hiro.stacks_blockchain_api_client.model.BurnchainRewardListResponse;
import so.hiro.stacks_blockchain_api_client.model.BurnchainRewardSlotHolderListResponse;
import so.hiro.stacks_blockchain_api_client.model.BurnchainRewardsTotal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StackingRewardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StackingRewardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StackingRewardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBurnchainRewardList
     * @param limit max number of rewards to fetch (optional, default to 96)
     * @param offset index of first rewards to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/burnchain/rewards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBurnchainRewardListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBurnchainRewardListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get recent burnchain reward recipients
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * @param limit max number of rewards to fetch (optional, default to 96)
     * @param offset index of first rewards to fetch (optional)
     * @return BurnchainRewardListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public BurnchainRewardListResponse getBurnchainRewardList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<BurnchainRewardListResponse> localVarResp = getBurnchainRewardListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get recent burnchain reward recipients
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * @param limit max number of rewards to fetch (optional, default to 96)
     * @param offset index of first rewards to fetch (optional)
     * @return ApiResponse&lt;BurnchainRewardListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BurnchainRewardListResponse> getBurnchainRewardListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBurnchainRewardListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<BurnchainRewardListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent burnchain reward recipients (asynchronously)
     * Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * @param limit max number of rewards to fetch (optional, default to 96)
     * @param offset index of first rewards to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardListAsync(Integer limit, Integer offset, final ApiCallback<BurnchainRewardListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBurnchainRewardListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<BurnchainRewardListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBurnchainRewardListByAddress
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of rewards to fetch (optional)
     * @param offset index of first rewards to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardListByAddressCall(String address, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/burnchain/rewards/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBurnchainRewardListByAddressValidateBeforeCall(String address, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getBurnchainRewardListByAddress(Async)");
        }
        

        okhttp3.Call localVarCall = getBurnchainRewardListByAddressCall(address, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get recent burnchain reward for the given recipient
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of rewards to fetch (optional)
     * @param offset index of first rewards to fetch (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public Object getBurnchainRewardListByAddress(String address, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Object> localVarResp = getBurnchainRewardListByAddressWithHttpInfo(address, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get recent burnchain reward for the given recipient
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of rewards to fetch (optional)
     * @param offset index of first rewards to fetch (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getBurnchainRewardListByAddressWithHttpInfo(String address, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBurnchainRewardListByAddressValidateBeforeCall(address, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent burnchain reward for the given recipient (asynchronously)
     * Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of rewards to fetch (optional)
     * @param offset index of first rewards to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardListByAddressAsync(String address, Integer limit, Integer offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBurnchainRewardListByAddressValidateBeforeCall(address, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBurnchainRewardSlotHolders
     * @param limit max number of items to fetch (optional, default to 96)
     * @param offset index of the first items to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardSlotHoldersCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/burnchain/reward_slot_holders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBurnchainRewardSlotHoldersValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get recent reward slot holders
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * @param limit max number of items to fetch (optional, default to 96)
     * @param offset index of the first items to fetch (optional)
     * @return BurnchainRewardSlotHolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public BurnchainRewardSlotHolderListResponse getBurnchainRewardSlotHolders(Integer limit, Integer offset) throws ApiException {
        ApiResponse<BurnchainRewardSlotHolderListResponse> localVarResp = getBurnchainRewardSlotHoldersWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get recent reward slot holders
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * @param limit max number of items to fetch (optional, default to 96)
     * @param offset index of the first items to fetch (optional)
     * @return ApiResponse&lt;BurnchainRewardSlotHolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BurnchainRewardSlotHolderListResponse> getBurnchainRewardSlotHoldersWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<BurnchainRewardSlotHolderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent reward slot holders (asynchronously)
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     * @param limit max number of items to fetch (optional, default to 96)
     * @param offset index of the first items to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardSlotHoldersAsync(Integer limit, Integer offset, final ApiCallback<BurnchainRewardSlotHolderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<BurnchainRewardSlotHolderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBurnchainRewardSlotHoldersByAddress
     * @param address Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of items to fetch (optional)
     * @param offset index of the first items to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardSlotHoldersByAddressCall(String address, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/burnchain/reward_slot_holders/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBurnchainRewardSlotHoldersByAddressValidateBeforeCall(String address, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getBurnchainRewardSlotHoldersByAddress(Async)");
        }
        

        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersByAddressCall(address, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get recent reward slot holder entries for the given address
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * @param address Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of items to fetch (optional)
     * @param offset index of the first items to fetch (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public Object getBurnchainRewardSlotHoldersByAddress(String address, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Object> localVarResp = getBurnchainRewardSlotHoldersByAddressWithHttpInfo(address, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get recent reward slot holder entries for the given address
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * @param address Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of items to fetch (optional)
     * @param offset index of the first items to fetch (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getBurnchainRewardSlotHoldersByAddressWithHttpInfo(String address, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersByAddressValidateBeforeCall(address, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent reward slot holder entries for the given address (asynchronously)
     * Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     * @param address Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param limit max number of items to fetch (optional)
     * @param offset index of the first items to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardSlotHoldersByAddressAsync(String address, Integer limit, Integer offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBurnchainRewardSlotHoldersByAddressValidateBeforeCall(address, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBurnchainRewardsTotalByAddress
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardsTotalByAddressCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extended/v1/burnchain/rewards/{address}/total"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBurnchainRewardsTotalByAddressValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getBurnchainRewardsTotalByAddress(Async)");
        }
        

        okhttp3.Call localVarCall = getBurnchainRewardsTotalByAddressCall(address, _callback);
        return localVarCall;

    }

    /**
     * Get total burnchain rewards for the given recipient
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient &#x60;address&#x60;
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @return BurnchainRewardsTotal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public BurnchainRewardsTotal getBurnchainRewardsTotalByAddress(String address) throws ApiException {
        ApiResponse<BurnchainRewardsTotal> localVarResp = getBurnchainRewardsTotalByAddressWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Get total burnchain rewards for the given recipient
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient &#x60;address&#x60;
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @return ApiResponse&lt;BurnchainRewardsTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BurnchainRewardsTotal> getBurnchainRewardsTotalByAddressWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getBurnchainRewardsTotalByAddressValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<BurnchainRewardsTotal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total burnchain rewards for the given recipient (asynchronously)
     * Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient &#x60;address&#x60;
     * @param address Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of burnchain reward recipients and amounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBurnchainRewardsTotalByAddressAsync(String address, final ApiCallback<BurnchainRewardsTotal> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBurnchainRewardsTotalByAddressValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<BurnchainRewardsTotal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
