/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionWithTransfersFtTransfers;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionWithTransfersNftTransfers;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionWithTransfersStxTransfers;

/**
 * Transaction with STX transfers for a given address
 */
@ApiModel(description = "Transaction with STX transfers for a given address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class AddressTransactionWithTransfers {
  public static final String SERIALIZED_NAME_TX = "tx";
  @SerializedName(SERIALIZED_NAME_TX)
  private Object tx = null;

  public static final String SERIALIZED_NAME_STX_SENT = "stx_sent";
  @SerializedName(SERIALIZED_NAME_STX_SENT)
  private String stxSent;

  public static final String SERIALIZED_NAME_STX_RECEIVED = "stx_received";
  @SerializedName(SERIALIZED_NAME_STX_RECEIVED)
  private String stxReceived;

  public static final String SERIALIZED_NAME_STX_TRANSFERS = "stx_transfers";
  @SerializedName(SERIALIZED_NAME_STX_TRANSFERS)
  private List<AddressTransactionWithTransfersStxTransfers> stxTransfers = new ArrayList<AddressTransactionWithTransfersStxTransfers>();

  public static final String SERIALIZED_NAME_FT_TRANSFERS = "ft_transfers";
  @SerializedName(SERIALIZED_NAME_FT_TRANSFERS)
  private List<AddressTransactionWithTransfersFtTransfers> ftTransfers = null;

  public static final String SERIALIZED_NAME_NFT_TRANSFERS = "nft_transfers";
  @SerializedName(SERIALIZED_NAME_NFT_TRANSFERS)
  private List<AddressTransactionWithTransfersNftTransfers> nftTransfers = null;

  public AddressTransactionWithTransfers() { 
  }

  public AddressTransactionWithTransfers tx(Object tx) {
    
    this.tx = tx;
    return this;
  }

   /**
   * Get tx
   * @return tx
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Object getTx() {
    return tx;
  }


  public void setTx(Object tx) {
    this.tx = tx;
  }


  public AddressTransactionWithTransfers stxSent(String stxSent) {
    
    this.stxSent = stxSent;
    return this;
  }

   /**
   * Total sent from the given address, including the tx fee, in micro-STX as an integer string.
   * @return stxSent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Total sent from the given address, including the tx fee, in micro-STX as an integer string.")

  public String getStxSent() {
    return stxSent;
  }


  public void setStxSent(String stxSent) {
    this.stxSent = stxSent;
  }


  public AddressTransactionWithTransfers stxReceived(String stxReceived) {
    
    this.stxReceived = stxReceived;
    return this;
  }

   /**
   * Total received by the given address in micro-STX as an integer string.
   * @return stxReceived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Total received by the given address in micro-STX as an integer string.")

  public String getStxReceived() {
    return stxReceived;
  }


  public void setStxReceived(String stxReceived) {
    this.stxReceived = stxReceived;
  }


  public AddressTransactionWithTransfers stxTransfers(List<AddressTransactionWithTransfersStxTransfers> stxTransfers) {
    
    this.stxTransfers = stxTransfers;
    return this;
  }

  public AddressTransactionWithTransfers addStxTransfersItem(AddressTransactionWithTransfersStxTransfers stxTransfersItem) {
    this.stxTransfers.add(stxTransfersItem);
    return this;
  }

   /**
   * Get stxTransfers
   * @return stxTransfers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<AddressTransactionWithTransfersStxTransfers> getStxTransfers() {
    return stxTransfers;
  }


  public void setStxTransfers(List<AddressTransactionWithTransfersStxTransfers> stxTransfers) {
    this.stxTransfers = stxTransfers;
  }


  public AddressTransactionWithTransfers ftTransfers(List<AddressTransactionWithTransfersFtTransfers> ftTransfers) {
    
    this.ftTransfers = ftTransfers;
    return this;
  }

  public AddressTransactionWithTransfers addFtTransfersItem(AddressTransactionWithTransfersFtTransfers ftTransfersItem) {
    if (this.ftTransfers == null) {
      this.ftTransfers = new ArrayList<AddressTransactionWithTransfersFtTransfers>();
    }
    this.ftTransfers.add(ftTransfersItem);
    return this;
  }

   /**
   * Get ftTransfers
   * @return ftTransfers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AddressTransactionWithTransfersFtTransfers> getFtTransfers() {
    return ftTransfers;
  }


  public void setFtTransfers(List<AddressTransactionWithTransfersFtTransfers> ftTransfers) {
    this.ftTransfers = ftTransfers;
  }


  public AddressTransactionWithTransfers nftTransfers(List<AddressTransactionWithTransfersNftTransfers> nftTransfers) {
    
    this.nftTransfers = nftTransfers;
    return this;
  }

  public AddressTransactionWithTransfers addNftTransfersItem(AddressTransactionWithTransfersNftTransfers nftTransfersItem) {
    if (this.nftTransfers == null) {
      this.nftTransfers = new ArrayList<AddressTransactionWithTransfersNftTransfers>();
    }
    this.nftTransfers.add(nftTransfersItem);
    return this;
  }

   /**
   * Get nftTransfers
   * @return nftTransfers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AddressTransactionWithTransfersNftTransfers> getNftTransfers() {
    return nftTransfers;
  }


  public void setNftTransfers(List<AddressTransactionWithTransfersNftTransfers> nftTransfers) {
    this.nftTransfers = nftTransfers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressTransactionWithTransfers addressTransactionWithTransfers = (AddressTransactionWithTransfers) o;
    return Objects.equals(this.tx, addressTransactionWithTransfers.tx) &&
        Objects.equals(this.stxSent, addressTransactionWithTransfers.stxSent) &&
        Objects.equals(this.stxReceived, addressTransactionWithTransfers.stxReceived) &&
        Objects.equals(this.stxTransfers, addressTransactionWithTransfers.stxTransfers) &&
        Objects.equals(this.ftTransfers, addressTransactionWithTransfers.ftTransfers) &&
        Objects.equals(this.nftTransfers, addressTransactionWithTransfers.nftTransfers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tx, stxSent, stxReceived, stxTransfers, ftTransfers, nftTransfers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressTransactionWithTransfers {\n");
    sb.append("    tx: ").append(toIndentedString(tx)).append("\n");
    sb.append("    stxSent: ").append(toIndentedString(stxSent)).append("\n");
    sb.append("    stxReceived: ").append(toIndentedString(stxReceived)).append("\n");
    sb.append("    stxTransfers: ").append(toIndentedString(stxTransfers)).append("\n");
    sb.append("    ftTransfers: ").append(toIndentedString(ftTransfers)).append("\n");
    sb.append("    nftTransfers: ").append(toIndentedString(nftTransfers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

