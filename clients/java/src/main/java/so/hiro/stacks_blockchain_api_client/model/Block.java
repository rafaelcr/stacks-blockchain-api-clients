/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A block
 */
@ApiModel(description = "A block")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class Block {
  public static final String SERIALIZED_NAME_CANONICAL = "canonical";
  @SerializedName(SERIALIZED_NAME_CANONICAL)
  private Boolean canonical;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_PARENT_BLOCK_HASH = "parent_block_hash";
  @SerializedName(SERIALIZED_NAME_PARENT_BLOCK_HASH)
  private String parentBlockHash;

  public static final String SERIALIZED_NAME_BURN_BLOCK_TIME = "burn_block_time";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_TIME)
  private BigDecimal burnBlockTime;

  public static final String SERIALIZED_NAME_BURN_BLOCK_TIME_ISO = "burn_block_time_iso";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_TIME_ISO)
  private String burnBlockTimeIso;

  public static final String SERIALIZED_NAME_BURN_BLOCK_HASH = "burn_block_hash";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_HASH)
  private String burnBlockHash;

  public static final String SERIALIZED_NAME_BURN_BLOCK_HEIGHT = "burn_block_height";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_HEIGHT)
  private Integer burnBlockHeight;

  public static final String SERIALIZED_NAME_MINER_TXID = "miner_txid";
  @SerializedName(SERIALIZED_NAME_MINER_TXID)
  private String minerTxid;

  public static final String SERIALIZED_NAME_PARENT_MICROBLOCK_HASH = "parent_microblock_hash";
  @SerializedName(SERIALIZED_NAME_PARENT_MICROBLOCK_HASH)
  private String parentMicroblockHash;

  public static final String SERIALIZED_NAME_PARENT_MICROBLOCK_SEQUENCE = "parent_microblock_sequence";
  @SerializedName(SERIALIZED_NAME_PARENT_MICROBLOCK_SEQUENCE)
  private Integer parentMicroblockSequence;

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private List<String> txs = new ArrayList<String>();

  public static final String SERIALIZED_NAME_MICROBLOCKS_ACCEPTED = "microblocks_accepted";
  @SerializedName(SERIALIZED_NAME_MICROBLOCKS_ACCEPTED)
  private List<String> microblocksAccepted = new ArrayList<String>();

  public static final String SERIALIZED_NAME_MICROBLOCKS_STREAMED = "microblocks_streamed";
  @SerializedName(SERIALIZED_NAME_MICROBLOCKS_STREAMED)
  private List<String> microblocksStreamed = new ArrayList<String>();

  public static final String SERIALIZED_NAME_EXECUTION_COST_READ_COUNT = "execution_cost_read_count";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST_READ_COUNT)
  private Integer executionCostReadCount;

  public static final String SERIALIZED_NAME_EXECUTION_COST_READ_LENGTH = "execution_cost_read_length";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST_READ_LENGTH)
  private Integer executionCostReadLength;

  public static final String SERIALIZED_NAME_EXECUTION_COST_RUNTIME = "execution_cost_runtime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST_RUNTIME)
  private Integer executionCostRuntime;

  public static final String SERIALIZED_NAME_EXECUTION_COST_WRITE_COUNT = "execution_cost_write_count";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST_WRITE_COUNT)
  private Integer executionCostWriteCount;

  public static final String SERIALIZED_NAME_EXECUTION_COST_WRITE_LENGTH = "execution_cost_write_length";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST_WRITE_LENGTH)
  private Integer executionCostWriteLength;

  public Block() { 
  }

  public Block canonical(Boolean canonical) {
    
    this.canonical = canonical;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; if block corresponds to the canonical chain tip
   * @return canonical
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Set to `true` if block corresponds to the canonical chain tip")

  public Boolean getCanonical() {
    return canonical;
  }


  public void setCanonical(Boolean canonical) {
    this.canonical = canonical;
  }


  public Block height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * Height of the block
   * @return height
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Height of the block")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public Block hash(String hash) {
    
    this.hash = hash;
    return this;
  }

   /**
   * Hash representing the block
   * @return hash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hash representing the block")

  public String getHash() {
    return hash;
  }


  public void setHash(String hash) {
    this.hash = hash;
  }


  public Block parentBlockHash(String parentBlockHash) {
    
    this.parentBlockHash = parentBlockHash;
    return this;
  }

   /**
   * Hash of the parent block
   * @return parentBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hash of the parent block")

  public String getParentBlockHash() {
    return parentBlockHash;
  }


  public void setParentBlockHash(String parentBlockHash) {
    this.parentBlockHash = parentBlockHash;
  }


  public Block burnBlockTime(BigDecimal burnBlockTime) {
    
    this.burnBlockTime = burnBlockTime;
    return this;
  }

   /**
   * Unix timestamp (in seconds) indicating when this block was mined.
   * @return burnBlockTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unix timestamp (in seconds) indicating when this block was mined.")

  public BigDecimal getBurnBlockTime() {
    return burnBlockTime;
  }


  public void setBurnBlockTime(BigDecimal burnBlockTime) {
    this.burnBlockTime = burnBlockTime;
  }


  public Block burnBlockTimeIso(String burnBlockTimeIso) {
    
    this.burnBlockTimeIso = burnBlockTimeIso;
    return this;
  }

   /**
   * An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined.
   * @return burnBlockTimeIso
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined.")

  public String getBurnBlockTimeIso() {
    return burnBlockTimeIso;
  }


  public void setBurnBlockTimeIso(String burnBlockTimeIso) {
    this.burnBlockTimeIso = burnBlockTimeIso;
  }


  public Block burnBlockHash(String burnBlockHash) {
    
    this.burnBlockHash = burnBlockHash;
    return this;
  }

   /**
   * Hash of the anchor chain block
   * @return burnBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hash of the anchor chain block")

  public String getBurnBlockHash() {
    return burnBlockHash;
  }


  public void setBurnBlockHash(String burnBlockHash) {
    this.burnBlockHash = burnBlockHash;
  }


  public Block burnBlockHeight(Integer burnBlockHeight) {
    
    this.burnBlockHeight = burnBlockHeight;
    return this;
  }

   /**
   * Height of the anchor chain block
   * @return burnBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Height of the anchor chain block")

  public Integer getBurnBlockHeight() {
    return burnBlockHeight;
  }


  public void setBurnBlockHeight(Integer burnBlockHeight) {
    this.burnBlockHeight = burnBlockHeight;
  }


  public Block minerTxid(String minerTxid) {
    
    this.minerTxid = minerTxid;
    return this;
  }

   /**
   * Anchor chain transaction ID
   * @return minerTxid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Anchor chain transaction ID")

  public String getMinerTxid() {
    return minerTxid;
  }


  public void setMinerTxid(String minerTxid) {
    this.minerTxid = minerTxid;
  }


  public Block parentMicroblockHash(String parentMicroblockHash) {
    
    this.parentMicroblockHash = parentMicroblockHash;
    return this;
  }

   /**
   * The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
   * @return parentMicroblockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.")

  public String getParentMicroblockHash() {
    return parentMicroblockHash;
  }


  public void setParentMicroblockHash(String parentMicroblockHash) {
    this.parentMicroblockHash = parentMicroblockHash;
  }


  public Block parentMicroblockSequence(Integer parentMicroblockSequence) {
    
    this.parentMicroblockSequence = parentMicroblockSequence;
    return this;
  }

   /**
   * The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
   * @return parentMicroblockSequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.")

  public Integer getParentMicroblockSequence() {
    return parentMicroblockSequence;
  }


  public void setParentMicroblockSequence(Integer parentMicroblockSequence) {
    this.parentMicroblockSequence = parentMicroblockSequence;
  }


  public Block txs(List<String> txs) {
    
    this.txs = txs;
    return this;
  }

  public Block addTxsItem(String txsItem) {
    this.txs.add(txsItem);
    return this;
  }

   /**
   * List of transactions included in the block
   * @return txs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of transactions included in the block")

  public List<String> getTxs() {
    return txs;
  }


  public void setTxs(List<String> txs) {
    this.txs = txs;
  }


  public Block microblocksAccepted(List<String> microblocksAccepted) {
    
    this.microblocksAccepted = microblocksAccepted;
    return this;
  }

  public Block addMicroblocksAcceptedItem(String microblocksAcceptedItem) {
    this.microblocksAccepted.add(microblocksAcceptedItem);
    return this;
  }

   /**
   * List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.
   * @return microblocksAccepted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.")

  public List<String> getMicroblocksAccepted() {
    return microblocksAccepted;
  }


  public void setMicroblocksAccepted(List<String> microblocksAccepted) {
    this.microblocksAccepted = microblocksAccepted;
  }


  public Block microblocksStreamed(List<String> microblocksStreamed) {
    
    this.microblocksStreamed = microblocksStreamed;
    return this;
  }

  public Block addMicroblocksStreamedItem(String microblocksStreamedItem) {
    this.microblocksStreamed.add(microblocksStreamedItem);
    return this;
  }

   /**
   * List of microblocks that were streamed/produced by this anchor block&#39;s miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.
   * @return microblocksStreamed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.")

  public List<String> getMicroblocksStreamed() {
    return microblocksStreamed;
  }


  public void setMicroblocksStreamed(List<String> microblocksStreamed) {
    this.microblocksStreamed = microblocksStreamed;
  }


  public Block executionCostReadCount(Integer executionCostReadCount) {
    
    this.executionCostReadCount = executionCostReadCount;
    return this;
  }

   /**
   * Execution cost read count.
   * @return executionCostReadCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution cost read count.")

  public Integer getExecutionCostReadCount() {
    return executionCostReadCount;
  }


  public void setExecutionCostReadCount(Integer executionCostReadCount) {
    this.executionCostReadCount = executionCostReadCount;
  }


  public Block executionCostReadLength(Integer executionCostReadLength) {
    
    this.executionCostReadLength = executionCostReadLength;
    return this;
  }

   /**
   * Execution cost read length.
   * @return executionCostReadLength
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution cost read length.")

  public Integer getExecutionCostReadLength() {
    return executionCostReadLength;
  }


  public void setExecutionCostReadLength(Integer executionCostReadLength) {
    this.executionCostReadLength = executionCostReadLength;
  }


  public Block executionCostRuntime(Integer executionCostRuntime) {
    
    this.executionCostRuntime = executionCostRuntime;
    return this;
  }

   /**
   * Execution cost runtime.
   * @return executionCostRuntime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution cost runtime.")

  public Integer getExecutionCostRuntime() {
    return executionCostRuntime;
  }


  public void setExecutionCostRuntime(Integer executionCostRuntime) {
    this.executionCostRuntime = executionCostRuntime;
  }


  public Block executionCostWriteCount(Integer executionCostWriteCount) {
    
    this.executionCostWriteCount = executionCostWriteCount;
    return this;
  }

   /**
   * Execution cost write count.
   * @return executionCostWriteCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution cost write count.")

  public Integer getExecutionCostWriteCount() {
    return executionCostWriteCount;
  }


  public void setExecutionCostWriteCount(Integer executionCostWriteCount) {
    this.executionCostWriteCount = executionCostWriteCount;
  }


  public Block executionCostWriteLength(Integer executionCostWriteLength) {
    
    this.executionCostWriteLength = executionCostWriteLength;
    return this;
  }

   /**
   * Execution cost write length.
   * @return executionCostWriteLength
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution cost write length.")

  public Integer getExecutionCostWriteLength() {
    return executionCostWriteLength;
  }


  public void setExecutionCostWriteLength(Integer executionCostWriteLength) {
    this.executionCostWriteLength = executionCostWriteLength;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Block block = (Block) o;
    return Objects.equals(this.canonical, block.canonical) &&
        Objects.equals(this.height, block.height) &&
        Objects.equals(this.hash, block.hash) &&
        Objects.equals(this.parentBlockHash, block.parentBlockHash) &&
        Objects.equals(this.burnBlockTime, block.burnBlockTime) &&
        Objects.equals(this.burnBlockTimeIso, block.burnBlockTimeIso) &&
        Objects.equals(this.burnBlockHash, block.burnBlockHash) &&
        Objects.equals(this.burnBlockHeight, block.burnBlockHeight) &&
        Objects.equals(this.minerTxid, block.minerTxid) &&
        Objects.equals(this.parentMicroblockHash, block.parentMicroblockHash) &&
        Objects.equals(this.parentMicroblockSequence, block.parentMicroblockSequence) &&
        Objects.equals(this.txs, block.txs) &&
        Objects.equals(this.microblocksAccepted, block.microblocksAccepted) &&
        Objects.equals(this.microblocksStreamed, block.microblocksStreamed) &&
        Objects.equals(this.executionCostReadCount, block.executionCostReadCount) &&
        Objects.equals(this.executionCostReadLength, block.executionCostReadLength) &&
        Objects.equals(this.executionCostRuntime, block.executionCostRuntime) &&
        Objects.equals(this.executionCostWriteCount, block.executionCostWriteCount) &&
        Objects.equals(this.executionCostWriteLength, block.executionCostWriteLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonical, height, hash, parentBlockHash, burnBlockTime, burnBlockTimeIso, burnBlockHash, burnBlockHeight, minerTxid, parentMicroblockHash, parentMicroblockSequence, txs, microblocksAccepted, microblocksStreamed, executionCostReadCount, executionCostReadLength, executionCostRuntime, executionCostWriteCount, executionCostWriteLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Block {\n");
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    parentBlockHash: ").append(toIndentedString(parentBlockHash)).append("\n");
    sb.append("    burnBlockTime: ").append(toIndentedString(burnBlockTime)).append("\n");
    sb.append("    burnBlockTimeIso: ").append(toIndentedString(burnBlockTimeIso)).append("\n");
    sb.append("    burnBlockHash: ").append(toIndentedString(burnBlockHash)).append("\n");
    sb.append("    burnBlockHeight: ").append(toIndentedString(burnBlockHeight)).append("\n");
    sb.append("    minerTxid: ").append(toIndentedString(minerTxid)).append("\n");
    sb.append("    parentMicroblockHash: ").append(toIndentedString(parentMicroblockHash)).append("\n");
    sb.append("    parentMicroblockSequence: ").append(toIndentedString(parentMicroblockSequence)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("    microblocksAccepted: ").append(toIndentedString(microblocksAccepted)).append("\n");
    sb.append("    microblocksStreamed: ").append(toIndentedString(microblocksStreamed)).append("\n");
    sb.append("    executionCostReadCount: ").append(toIndentedString(executionCostReadCount)).append("\n");
    sb.append("    executionCostReadLength: ").append(toIndentedString(executionCostReadLength)).append("\n");
    sb.append("    executionCostRuntime: ").append(toIndentedString(executionCostRuntime)).append("\n");
    sb.append("    executionCostWriteCount: ").append(toIndentedString(executionCostWriteCount)).append("\n");
    sb.append("    executionCostWriteLength: ").append(toIndentedString(executionCostWriteLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

