/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * GET request that core node information
 */
@ApiModel(description = "GET request that core node information")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class CoreNodeInfoResponse {
  public static final String SERIALIZED_NAME_PEER_VERSION = "peer_version";
  @SerializedName(SERIALIZED_NAME_PEER_VERSION)
  private Integer peerVersion;

  public static final String SERIALIZED_NAME_POX_CONSENSUS = "pox_consensus";
  @SerializedName(SERIALIZED_NAME_POX_CONSENSUS)
  private String poxConsensus;

  public static final String SERIALIZED_NAME_BURN_BLOCK_HEIGHT = "burn_block_height";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_HEIGHT)
  private Integer burnBlockHeight;

  public static final String SERIALIZED_NAME_STABLE_POX_CONSENSUS = "stable_pox_consensus";
  @SerializedName(SERIALIZED_NAME_STABLE_POX_CONSENSUS)
  private String stablePoxConsensus;

  public static final String SERIALIZED_NAME_STABLE_BURN_BLOCK_HEIGHT = "stable_burn_block_height";
  @SerializedName(SERIALIZED_NAME_STABLE_BURN_BLOCK_HEIGHT)
  private Integer stableBurnBlockHeight;

  public static final String SERIALIZED_NAME_SERVER_VERSION = "server_version";
  @SerializedName(SERIALIZED_NAME_SERVER_VERSION)
  private String serverVersion;

  public static final String SERIALIZED_NAME_NETWORK_ID = "network_id";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private Integer networkId;

  public static final String SERIALIZED_NAME_PARENT_NETWORK_ID = "parent_network_id";
  @SerializedName(SERIALIZED_NAME_PARENT_NETWORK_ID)
  private Integer parentNetworkId;

  public static final String SERIALIZED_NAME_STACKS_TIP_HEIGHT = "stacks_tip_height";
  @SerializedName(SERIALIZED_NAME_STACKS_TIP_HEIGHT)
  private Integer stacksTipHeight;

  public static final String SERIALIZED_NAME_STACKS_TIP = "stacks_tip";
  @SerializedName(SERIALIZED_NAME_STACKS_TIP)
  private String stacksTip;

  public static final String SERIALIZED_NAME_STACKS_TIP_CONSENSUS_HASH = "stacks_tip_consensus_hash";
  @SerializedName(SERIALIZED_NAME_STACKS_TIP_CONSENSUS_HASH)
  private String stacksTipConsensusHash;

  public static final String SERIALIZED_NAME_UNANCHORED_TIP = "unanchored_tip";
  @SerializedName(SERIALIZED_NAME_UNANCHORED_TIP)
  private String unanchoredTip;

  public static final String SERIALIZED_NAME_EXIT_AT_BLOCK_HEIGHT = "exit_at_block_height";
  @SerializedName(SERIALIZED_NAME_EXIT_AT_BLOCK_HEIGHT)
  private Integer exitAtBlockHeight;

  public CoreNodeInfoResponse() { 
  }

  public CoreNodeInfoResponse peerVersion(Integer peerVersion) {
    
    this.peerVersion = peerVersion;
    return this;
  }

   /**
   * identifies the version number for the networking communication, this should not change while a node is running, and will only change if there&#39;s an upgrade
   * @return peerVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade")

  public Integer getPeerVersion() {
    return peerVersion;
  }


  public void setPeerVersion(Integer peerVersion) {
    this.peerVersion = peerVersion;
  }


  public CoreNodeInfoResponse poxConsensus(String poxConsensus) {
    
    this.poxConsensus = poxConsensus;
    return this;
  }

   /**
   * is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block
   * @return poxConsensus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block")

  public String getPoxConsensus() {
    return poxConsensus;
  }


  public void setPoxConsensus(String poxConsensus) {
    this.poxConsensus = poxConsensus;
  }


  public CoreNodeInfoResponse burnBlockHeight(Integer burnBlockHeight) {
    
    this.burnBlockHeight = burnBlockHeight;
    return this;
  }

   /**
   * latest bitcoin chain height
   * @return burnBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "latest bitcoin chain height")

  public Integer getBurnBlockHeight() {
    return burnBlockHeight;
  }


  public void setBurnBlockHeight(Integer burnBlockHeight) {
    this.burnBlockHeight = burnBlockHeight;
  }


  public CoreNodeInfoResponse stablePoxConsensus(String stablePoxConsensus) {
    
    this.stablePoxConsensus = stablePoxConsensus;
    return this;
  }

   /**
   * same as burn_consensus, but evaluated at stable_burn_block_height
   * @return stablePoxConsensus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "same as burn_consensus, but evaluated at stable_burn_block_height")

  public String getStablePoxConsensus() {
    return stablePoxConsensus;
  }


  public void setStablePoxConsensus(String stablePoxConsensus) {
    this.stablePoxConsensus = stablePoxConsensus;
  }


  public CoreNodeInfoResponse stableBurnBlockHeight(Integer stableBurnBlockHeight) {
    
    this.stableBurnBlockHeight = stableBurnBlockHeight;
    return this;
  }

   /**
   * leftover from stacks 1.0, basically always burn_block_height - 1
   * @return stableBurnBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "leftover from stacks 1.0, basically always burn_block_height - 1")

  public Integer getStableBurnBlockHeight() {
    return stableBurnBlockHeight;
  }


  public void setStableBurnBlockHeight(Integer stableBurnBlockHeight) {
    this.stableBurnBlockHeight = stableBurnBlockHeight;
  }


  public CoreNodeInfoResponse serverVersion(String serverVersion) {
    
    this.serverVersion = serverVersion;
    return this;
  }

   /**
   * is a version descriptor
   * @return serverVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "is a version descriptor")

  public String getServerVersion() {
    return serverVersion;
  }


  public void setServerVersion(String serverVersion) {
    this.serverVersion = serverVersion;
  }


  public CoreNodeInfoResponse networkId(Integer networkId) {
    
    this.networkId = networkId;
    return this;
  }

   /**
   * is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change
   * @return networkId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change")

  public Integer getNetworkId() {
    return networkId;
  }


  public void setNetworkId(Integer networkId) {
    this.networkId = networkId;
  }


  public CoreNodeInfoResponse parentNetworkId(Integer parentNetworkId) {
    
    this.parentNetworkId = parentNetworkId;
    return this;
  }

   /**
   * same as network_id, but for bitcoin
   * @return parentNetworkId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "same as network_id, but for bitcoin")

  public Integer getParentNetworkId() {
    return parentNetworkId;
  }


  public void setParentNetworkId(Integer parentNetworkId) {
    this.parentNetworkId = parentNetworkId;
  }


  public CoreNodeInfoResponse stacksTipHeight(Integer stacksTipHeight) {
    
    this.stacksTipHeight = stacksTipHeight;
    return this;
  }

   /**
   * the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn&#39;t increase 1-to-1 with the Bitcoin height
   * @return stacksTipHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height")

  public Integer getStacksTipHeight() {
    return stacksTipHeight;
  }


  public void setStacksTipHeight(Integer stacksTipHeight) {
    this.stacksTipHeight = stacksTipHeight;
  }


  public CoreNodeInfoResponse stacksTip(String stacksTip) {
    
    this.stacksTip = stacksTip;
    return this;
  }

   /**
   * the best known block hash for the Stack chain (not including any pending microblocks)
   * @return stacksTip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the best known block hash for the Stack chain (not including any pending microblocks)")

  public String getStacksTip() {
    return stacksTip;
  }


  public void setStacksTip(String stacksTip) {
    this.stacksTip = stacksTip;
  }


  public CoreNodeInfoResponse stacksTipConsensusHash(String stacksTipConsensusHash) {
    
    this.stacksTipConsensusHash = stacksTipConsensusHash;
    return this;
  }

   /**
   * the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined
   * @return stacksTipConsensusHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined")

  public String getStacksTipConsensusHash() {
    return stacksTipConsensusHash;
  }


  public void setStacksTipConsensusHash(String stacksTipConsensusHash) {
    this.stacksTipConsensusHash = stacksTipConsensusHash;
  }


  public CoreNodeInfoResponse unanchoredTip(String unanchoredTip) {
    
    this.unanchoredTip = unanchoredTip;
    return this;
  }

   /**
   * the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned
   * @return unanchoredTip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned")

  public String getUnanchoredTip() {
    return unanchoredTip;
  }


  public void setUnanchoredTip(String unanchoredTip) {
    this.unanchoredTip = unanchoredTip;
  }


  public CoreNodeInfoResponse exitAtBlockHeight(Integer exitAtBlockHeight) {
    
    this.exitAtBlockHeight = exitAtBlockHeight;
    return this;
  }

   /**
   * the block height at which the testnet network will be reset. not applicable for mainnet
   * @return exitAtBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the block height at which the testnet network will be reset. not applicable for mainnet")

  public Integer getExitAtBlockHeight() {
    return exitAtBlockHeight;
  }


  public void setExitAtBlockHeight(Integer exitAtBlockHeight) {
    this.exitAtBlockHeight = exitAtBlockHeight;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreNodeInfoResponse coreNodeInfoResponse = (CoreNodeInfoResponse) o;
    return Objects.equals(this.peerVersion, coreNodeInfoResponse.peerVersion) &&
        Objects.equals(this.poxConsensus, coreNodeInfoResponse.poxConsensus) &&
        Objects.equals(this.burnBlockHeight, coreNodeInfoResponse.burnBlockHeight) &&
        Objects.equals(this.stablePoxConsensus, coreNodeInfoResponse.stablePoxConsensus) &&
        Objects.equals(this.stableBurnBlockHeight, coreNodeInfoResponse.stableBurnBlockHeight) &&
        Objects.equals(this.serverVersion, coreNodeInfoResponse.serverVersion) &&
        Objects.equals(this.networkId, coreNodeInfoResponse.networkId) &&
        Objects.equals(this.parentNetworkId, coreNodeInfoResponse.parentNetworkId) &&
        Objects.equals(this.stacksTipHeight, coreNodeInfoResponse.stacksTipHeight) &&
        Objects.equals(this.stacksTip, coreNodeInfoResponse.stacksTip) &&
        Objects.equals(this.stacksTipConsensusHash, coreNodeInfoResponse.stacksTipConsensusHash) &&
        Objects.equals(this.unanchoredTip, coreNodeInfoResponse.unanchoredTip) &&
        Objects.equals(this.exitAtBlockHeight, coreNodeInfoResponse.exitAtBlockHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peerVersion, poxConsensus, burnBlockHeight, stablePoxConsensus, stableBurnBlockHeight, serverVersion, networkId, parentNetworkId, stacksTipHeight, stacksTip, stacksTipConsensusHash, unanchoredTip, exitAtBlockHeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreNodeInfoResponse {\n");
    sb.append("    peerVersion: ").append(toIndentedString(peerVersion)).append("\n");
    sb.append("    poxConsensus: ").append(toIndentedString(poxConsensus)).append("\n");
    sb.append("    burnBlockHeight: ").append(toIndentedString(burnBlockHeight)).append("\n");
    sb.append("    stablePoxConsensus: ").append(toIndentedString(stablePoxConsensus)).append("\n");
    sb.append("    stableBurnBlockHeight: ").append(toIndentedString(stableBurnBlockHeight)).append("\n");
    sb.append("    serverVersion: ").append(toIndentedString(serverVersion)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    parentNetworkId: ").append(toIndentedString(parentNetworkId)).append("\n");
    sb.append("    stacksTipHeight: ").append(toIndentedString(stacksTipHeight)).append("\n");
    sb.append("    stacksTip: ").append(toIndentedString(stacksTip)).append("\n");
    sb.append("    stacksTipConsensusHash: ").append(toIndentedString(stacksTipConsensusHash)).append("\n");
    sb.append("    unanchoredTip: ").append(toIndentedString(unanchoredTip)).append("\n");
    sb.append("    exitAtBlockHeight: ").append(toIndentedString(exitAtBlockHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

