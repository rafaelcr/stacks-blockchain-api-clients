/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A microblock
 */
@ApiModel(description = "A microblock")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class Microblock {
  public static final String SERIALIZED_NAME_CANONICAL = "canonical";
  @SerializedName(SERIALIZED_NAME_CANONICAL)
  private Boolean canonical;

  public static final String SERIALIZED_NAME_MICROBLOCK_CANONICAL = "microblock_canonical";
  @SerializedName(SERIALIZED_NAME_MICROBLOCK_CANONICAL)
  private Boolean microblockCanonical;

  public static final String SERIALIZED_NAME_MICROBLOCK_HASH = "microblock_hash";
  @SerializedName(SERIALIZED_NAME_MICROBLOCK_HASH)
  private String microblockHash;

  public static final String SERIALIZED_NAME_MICROBLOCK_SEQUENCE = "microblock_sequence";
  @SerializedName(SERIALIZED_NAME_MICROBLOCK_SEQUENCE)
  private Integer microblockSequence;

  public static final String SERIALIZED_NAME_MICROBLOCK_PARENT_HASH = "microblock_parent_hash";
  @SerializedName(SERIALIZED_NAME_MICROBLOCK_PARENT_HASH)
  private String microblockParentHash;

  public static final String SERIALIZED_NAME_BLOCK_HEIGHT = "block_height";
  @SerializedName(SERIALIZED_NAME_BLOCK_HEIGHT)
  private Integer blockHeight;

  public static final String SERIALIZED_NAME_PARENT_BLOCK_HEIGHT = "parent_block_height";
  @SerializedName(SERIALIZED_NAME_PARENT_BLOCK_HEIGHT)
  private Integer parentBlockHeight;

  public static final String SERIALIZED_NAME_PARENT_BLOCK_HASH = "parent_block_hash";
  @SerializedName(SERIALIZED_NAME_PARENT_BLOCK_HASH)
  private String parentBlockHash;

  public static final String SERIALIZED_NAME_PARENT_BURN_BLOCK_HASH = "parent_burn_block_hash";
  @SerializedName(SERIALIZED_NAME_PARENT_BURN_BLOCK_HASH)
  private String parentBurnBlockHash;

  public static final String SERIALIZED_NAME_PARENT_BURN_BLOCK_TIME = "parent_burn_block_time";
  @SerializedName(SERIALIZED_NAME_PARENT_BURN_BLOCK_TIME)
  private Integer parentBurnBlockTime;

  public static final String SERIALIZED_NAME_PARENT_BURN_BLOCK_TIME_ISO = "parent_burn_block_time_iso";
  @SerializedName(SERIALIZED_NAME_PARENT_BURN_BLOCK_TIME_ISO)
  private String parentBurnBlockTimeIso;

  public static final String SERIALIZED_NAME_PARENT_BURN_BLOCK_HEIGHT = "parent_burn_block_height";
  @SerializedName(SERIALIZED_NAME_PARENT_BURN_BLOCK_HEIGHT)
  private Integer parentBurnBlockHeight;

  public static final String SERIALIZED_NAME_BLOCK_HASH = "block_hash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private List<String> txs = new ArrayList<String>();

  public Microblock() { 
  }

  public Microblock canonical(Boolean canonical) {
    
    this.canonical = canonical;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; if the microblock corresponds to the canonical chain tip.
   * @return canonical
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Set to `true` if the microblock corresponds to the canonical chain tip.")

  public Boolean getCanonical() {
    return canonical;
  }


  public void setCanonical(Boolean canonical) {
    this.canonical = canonical;
  }


  public Microblock microblockCanonical(Boolean microblockCanonical) {
    
    this.microblockCanonical = microblockCanonical;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; if the microblock was not orphaned in a following anchor block. Defaults to &#x60;true&#x60; if the following anchor block has not yet been created.
   * @return microblockCanonical
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created.")

  public Boolean getMicroblockCanonical() {
    return microblockCanonical;
  }


  public void setMicroblockCanonical(Boolean microblockCanonical) {
    this.microblockCanonical = microblockCanonical;
  }


  public Microblock microblockHash(String microblockHash) {
    
    this.microblockHash = microblockHash;
    return this;
  }

   /**
   * The SHA512/256 hash of this microblock.
   * @return microblockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The SHA512/256 hash of this microblock.")

  public String getMicroblockHash() {
    return microblockHash;
  }


  public void setMicroblockHash(String microblockHash) {
    this.microblockHash = microblockHash;
  }


  public Microblock microblockSequence(Integer microblockSequence) {
    
    this.microblockSequence = microblockSequence;
    return this;
  }

   /**
   * A hint to describe how to order a set of microblocks. Starts at 0.
   * @return microblockSequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A hint to describe how to order a set of microblocks. Starts at 0.")

  public Integer getMicroblockSequence() {
    return microblockSequence;
  }


  public void setMicroblockSequence(Integer microblockSequence) {
    this.microblockSequence = microblockSequence;
  }


  public Microblock microblockParentHash(String microblockParentHash) {
    
    this.microblockParentHash = microblockParentHash;
    return this;
  }

   /**
   * The SHA512/256 hash of the previous signed microblock in this stream.
   * @return microblockParentHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The SHA512/256 hash of the previous signed microblock in this stream.")

  public String getMicroblockParentHash() {
    return microblockParentHash;
  }


  public void setMicroblockParentHash(String microblockParentHash) {
    this.microblockParentHash = microblockParentHash;
  }


  public Microblock blockHeight(Integer blockHeight) {
    
    this.blockHeight = blockHeight;
    return this;
  }

   /**
   * The anchor block height that confirmed this microblock.
   * @return blockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The anchor block height that confirmed this microblock.")

  public Integer getBlockHeight() {
    return blockHeight;
  }


  public void setBlockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
  }


  public Microblock parentBlockHeight(Integer parentBlockHeight) {
    
    this.parentBlockHeight = parentBlockHeight;
    return this;
  }

   /**
   * The height of the anchor block that preceded this microblock.
   * @return parentBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The height of the anchor block that preceded this microblock.")

  public Integer getParentBlockHeight() {
    return parentBlockHeight;
  }


  public void setParentBlockHeight(Integer parentBlockHeight) {
    this.parentBlockHeight = parentBlockHeight;
  }


  public Microblock parentBlockHash(String parentBlockHash) {
    
    this.parentBlockHash = parentBlockHash;
    return this;
  }

   /**
   * The hash of the anchor block that preceded this microblock.
   * @return parentBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hash of the anchor block that preceded this microblock.")

  public String getParentBlockHash() {
    return parentBlockHash;
  }


  public void setParentBlockHash(String parentBlockHash) {
    this.parentBlockHash = parentBlockHash;
  }


  public Microblock parentBurnBlockHash(String parentBurnBlockHash) {
    
    this.parentBurnBlockHash = parentBurnBlockHash;
    return this;
  }

   /**
   * The hash of the Bitcoin block that preceded this microblock.
   * @return parentBurnBlockHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hash of the Bitcoin block that preceded this microblock.")

  public String getParentBurnBlockHash() {
    return parentBurnBlockHash;
  }


  public void setParentBurnBlockHash(String parentBurnBlockHash) {
    this.parentBurnBlockHash = parentBurnBlockHash;
  }


  public Microblock parentBurnBlockTime(Integer parentBurnBlockTime) {
    
    this.parentBurnBlockTime = parentBurnBlockTime;
    return this;
  }

   /**
   * The block timestamp of the Bitcoin block that preceded this microblock.
   * @return parentBurnBlockTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The block timestamp of the Bitcoin block that preceded this microblock.")

  public Integer getParentBurnBlockTime() {
    return parentBurnBlockTime;
  }


  public void setParentBurnBlockTime(Integer parentBurnBlockTime) {
    this.parentBurnBlockTime = parentBurnBlockTime;
  }


  public Microblock parentBurnBlockTimeIso(String parentBurnBlockTimeIso) {
    
    this.parentBurnBlockTimeIso = parentBurnBlockTimeIso;
    return this;
  }

   /**
   * The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.
   * @return parentBurnBlockTimeIso
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.")

  public String getParentBurnBlockTimeIso() {
    return parentBurnBlockTimeIso;
  }


  public void setParentBurnBlockTimeIso(String parentBurnBlockTimeIso) {
    this.parentBurnBlockTimeIso = parentBurnBlockTimeIso;
  }


  public Microblock parentBurnBlockHeight(Integer parentBurnBlockHeight) {
    
    this.parentBurnBlockHeight = parentBurnBlockHeight;
    return this;
  }

   /**
   * The height of the Bitcoin block that preceded this microblock.
   * @return parentBurnBlockHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The height of the Bitcoin block that preceded this microblock.")

  public Integer getParentBurnBlockHeight() {
    return parentBurnBlockHeight;
  }


  public void setParentBurnBlockHeight(Integer parentBurnBlockHeight) {
    this.parentBurnBlockHeight = parentBurnBlockHeight;
  }


  public Microblock blockHash(String blockHash) {
    
    this.blockHash = blockHash;
    return this;
  }

   /**
   * The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks
   * @return blockHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks")

  public String getBlockHash() {
    return blockHash;
  }


  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public Microblock txs(List<String> txs) {
    
    this.txs = txs;
    return this;
  }

  public Microblock addTxsItem(String txsItem) {
    this.txs.add(txsItem);
    return this;
  }

   /**
   * List of transactions included in the microblock
   * @return txs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of transactions included in the microblock")

  public List<String> getTxs() {
    return txs;
  }


  public void setTxs(List<String> txs) {
    this.txs = txs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Microblock microblock = (Microblock) o;
    return Objects.equals(this.canonical, microblock.canonical) &&
        Objects.equals(this.microblockCanonical, microblock.microblockCanonical) &&
        Objects.equals(this.microblockHash, microblock.microblockHash) &&
        Objects.equals(this.microblockSequence, microblock.microblockSequence) &&
        Objects.equals(this.microblockParentHash, microblock.microblockParentHash) &&
        Objects.equals(this.blockHeight, microblock.blockHeight) &&
        Objects.equals(this.parentBlockHeight, microblock.parentBlockHeight) &&
        Objects.equals(this.parentBlockHash, microblock.parentBlockHash) &&
        Objects.equals(this.parentBurnBlockHash, microblock.parentBurnBlockHash) &&
        Objects.equals(this.parentBurnBlockTime, microblock.parentBurnBlockTime) &&
        Objects.equals(this.parentBurnBlockTimeIso, microblock.parentBurnBlockTimeIso) &&
        Objects.equals(this.parentBurnBlockHeight, microblock.parentBurnBlockHeight) &&
        Objects.equals(this.blockHash, microblock.blockHash) &&
        Objects.equals(this.txs, microblock.txs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonical, microblockCanonical, microblockHash, microblockSequence, microblockParentHash, blockHeight, parentBlockHeight, parentBlockHash, parentBurnBlockHash, parentBurnBlockTime, parentBurnBlockTimeIso, parentBurnBlockHeight, blockHash, txs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Microblock {\n");
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    microblockCanonical: ").append(toIndentedString(microblockCanonical)).append("\n");
    sb.append("    microblockHash: ").append(toIndentedString(microblockHash)).append("\n");
    sb.append("    microblockSequence: ").append(toIndentedString(microblockSequence)).append("\n");
    sb.append("    microblockParentHash: ").append(toIndentedString(microblockParentHash)).append("\n");
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    parentBlockHeight: ").append(toIndentedString(parentBlockHeight)).append("\n");
    sb.append("    parentBlockHash: ").append(toIndentedString(parentBlockHash)).append("\n");
    sb.append("    parentBurnBlockHash: ").append(toIndentedString(parentBurnBlockHash)).append("\n");
    sb.append("    parentBurnBlockTime: ").append(toIndentedString(parentBurnBlockTime)).append("\n");
    sb.append("    parentBurnBlockTimeIso: ").append(toIndentedString(parentBurnBlockTimeIso)).append("\n");
    sb.append("    parentBurnBlockHeight: ").append(toIndentedString(parentBurnBlockHeight)).append("\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

