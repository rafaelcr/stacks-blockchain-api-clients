/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import so.hiro.stacks_blockchain_api_client.model.RosettaAccountBalanceResponseCoinIdentifier;

/**
 * CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&#39;t populate this model).
 */
@ApiModel(description = "CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don't populate this model).")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class RosettaCoinChange {
  public static final String SERIALIZED_NAME_COIN_IDENTIFIER = "coin_identifier";
  @SerializedName(SERIALIZED_NAME_COIN_IDENTIFIER)
  private RosettaAccountBalanceResponseCoinIdentifier coinIdentifier;

  /**
   * CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once.
   */
  @JsonAdapter(CoinActionEnum.Adapter.class)
  public enum CoinActionEnum {
    CREATED("coin_created"),
    
    SPENT("coin_spent");

    private String value;

    CoinActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CoinActionEnum fromValue(String value) {
      for (CoinActionEnum b : CoinActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CoinActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CoinActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CoinActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CoinActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COIN_ACTION = "coin_action";
  @SerializedName(SERIALIZED_NAME_COIN_ACTION)
  private CoinActionEnum coinAction;

  public RosettaCoinChange() { 
  }

  public RosettaCoinChange coinIdentifier(RosettaAccountBalanceResponseCoinIdentifier coinIdentifier) {
    
    this.coinIdentifier = coinIdentifier;
    return this;
  }

   /**
   * Get coinIdentifier
   * @return coinIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RosettaAccountBalanceResponseCoinIdentifier getCoinIdentifier() {
    return coinIdentifier;
  }


  public void setCoinIdentifier(RosettaAccountBalanceResponseCoinIdentifier coinIdentifier) {
    this.coinIdentifier = coinIdentifier;
  }


  public RosettaCoinChange coinAction(CoinActionEnum coinAction) {
    
    this.coinAction = coinAction;
    return this;
  }

   /**
   * CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once.
   * @return coinAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once.")

  public CoinActionEnum getCoinAction() {
    return coinAction;
  }


  public void setCoinAction(CoinActionEnum coinAction) {
    this.coinAction = coinAction;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RosettaCoinChange rosettaCoinChange = (RosettaCoinChange) o;
    return Objects.equals(this.coinIdentifier, rosettaCoinChange.coinIdentifier) &&
        Objects.equals(this.coinAction, rosettaCoinChange.coinAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coinIdentifier, coinAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RosettaCoinChange {\n");
    sb.append("    coinIdentifier: ").append(toIndentedString(coinIdentifier)).append("\n");
    sb.append("    coinAction: ").append(toIndentedString(coinAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

