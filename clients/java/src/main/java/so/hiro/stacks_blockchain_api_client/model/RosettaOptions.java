/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * The options that will be sent directly to /construction/metadata by the caller.
 */
@ApiModel(description = "The options that will be sent directly to /construction/metadata by the caller.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class RosettaOptions {
  public static final String SERIALIZED_NAME_SENDER_ADDRESS = "sender_address";
  @SerializedName(SERIALIZED_NAME_SENDER_ADDRESS)
  private String senderAddress;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = null;

  public static final String SERIALIZED_NAME_TOKEN_TRANSFER_RECIPIENT_ADDRESS = "token_transfer_recipient_address";
  @SerializedName(SERIALIZED_NAME_TOKEN_TRANSFER_RECIPIENT_ADDRESS)
  private String tokenTransferRecipientAddress;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private Integer decimals;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gas_limit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private BigDecimal gasLimit;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gas_price";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private BigDecimal gasPrice;

  public static final String SERIALIZED_NAME_SUGGESTED_FEE_MULTIPLIER = "suggested_fee_multiplier";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_FEE_MULTIPLIER)
  private BigDecimal suggestedFeeMultiplier;

  public static final String SERIALIZED_NAME_MAX_FEE = "max_fee";
  @SerializedName(SERIALIZED_NAME_MAX_FEE)
  private String maxFee;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private String fee;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NUMBER_OF_CYCLES = "number_of_cycles";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CYCLES)
  private Integer numberOfCycles;

  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contract_address";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  private String contractAddress;

  public static final String SERIALIZED_NAME_CONTRACT_NAME = "contract_name";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NAME)
  private String contractName;

  public static final String SERIALIZED_NAME_BURN_BLOCK_HEIGHT = "burn_block_height";
  @SerializedName(SERIALIZED_NAME_BURN_BLOCK_HEIGHT)
  private Integer burnBlockHeight;

  public static final String SERIALIZED_NAME_DELEGATE_TO = "delegate_to";
  @SerializedName(SERIALIZED_NAME_DELEGATE_TO)
  private String delegateTo;

  public static final String SERIALIZED_NAME_POX_ADDR = "pox_addr";
  @SerializedName(SERIALIZED_NAME_POX_ADDR)
  private String poxAddr;

  public RosettaOptions() { 
  }

  public RosettaOptions senderAddress(String senderAddress) {
    
    this.senderAddress = senderAddress;
    return this;
  }

   /**
   * sender&#39;s address 
   * @return senderAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sender's address ")

  public String getSenderAddress() {
    return senderAddress;
  }


  public void setSenderAddress(String senderAddress) {
    this.senderAddress = senderAddress;
  }


  public RosettaOptions type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of operation e.g transfer
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of operation e.g transfer")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public RosettaOptions status(Object status) {
    
    this.status = status;
    return this;
  }

   /**
   * This value indicates the state of the operations
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value indicates the state of the operations")

  public Object getStatus() {
    return status;
  }


  public void setStatus(Object status) {
    this.status = status;
  }


  public RosettaOptions tokenTransferRecipientAddress(String tokenTransferRecipientAddress) {
    
    this.tokenTransferRecipientAddress = tokenTransferRecipientAddress;
    return this;
  }

   /**
   * Recipient&#39;s address
   * @return tokenTransferRecipientAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Recipient's address")

  public String getTokenTransferRecipientAddress() {
    return tokenTransferRecipientAddress;
  }


  public void setTokenTransferRecipientAddress(String tokenTransferRecipientAddress) {
    this.tokenTransferRecipientAddress = tokenTransferRecipientAddress;
  }


  public RosettaOptions amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount to be transfered.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount to be transfered.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public RosettaOptions symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Currency symbol e.g STX
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency symbol e.g STX")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public RosettaOptions decimals(Integer decimals) {
    
    this.decimals = decimals;
    return this;
  }

   /**
   * Number of decimal places
   * @return decimals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of decimal places")

  public Integer getDecimals() {
    return decimals;
  }


  public void setDecimals(Integer decimals) {
    this.decimals = decimals;
  }


  public RosettaOptions gasLimit(BigDecimal gasLimit) {
    
    this.gasLimit = gasLimit;
    return this;
  }

   /**
   * Maximum price a user is willing to pay.
   * @return gasLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum price a user is willing to pay.")

  public BigDecimal getGasLimit() {
    return gasLimit;
  }


  public void setGasLimit(BigDecimal gasLimit) {
    this.gasLimit = gasLimit;
  }


  public RosettaOptions gasPrice(BigDecimal gasPrice) {
    
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * Cost necessary to perform a transaction on the network
   * @return gasPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost necessary to perform a transaction on the network")

  public BigDecimal getGasPrice() {
    return gasPrice;
  }


  public void setGasPrice(BigDecimal gasPrice) {
    this.gasPrice = gasPrice;
  }


  public RosettaOptions suggestedFeeMultiplier(BigDecimal suggestedFeeMultiplier) {
    
    this.suggestedFeeMultiplier = suggestedFeeMultiplier;
    return this;
  }

   /**
   *  A suggested fee multiplier to indicate that the suggested fee should be scaled. This may be used to set higher fees for urgent transactions or to pay lower fees when there is less urgency.
   * @return suggestedFeeMultiplier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " A suggested fee multiplier to indicate that the suggested fee should be scaled. This may be used to set higher fees for urgent transactions or to pay lower fees when there is less urgency.")

  public BigDecimal getSuggestedFeeMultiplier() {
    return suggestedFeeMultiplier;
  }


  public void setSuggestedFeeMultiplier(BigDecimal suggestedFeeMultiplier) {
    this.suggestedFeeMultiplier = suggestedFeeMultiplier;
  }


  public RosettaOptions maxFee(String maxFee) {
    
    this.maxFee = maxFee;
    return this;
  }

   /**
   * Maximum fee user is willing to pay
   * @return maxFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum fee user is willing to pay")

  public String getMaxFee() {
    return maxFee;
  }


  public void setMaxFee(String maxFee) {
    this.maxFee = maxFee;
  }


  public RosettaOptions fee(String fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Fee for this transaction
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fee for this transaction")

  public String getFee() {
    return fee;
  }


  public void setFee(String fee) {
    this.fee = fee;
  }


  public RosettaOptions size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Transaction approximative size (used to calculate total fee).
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction approximative size (used to calculate total fee).")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public RosettaOptions memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * STX token transfer memo.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "STX token transfer memo.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public RosettaOptions numberOfCycles(Integer numberOfCycles) {
    
    this.numberOfCycles = numberOfCycles;
    return this;
  }

   /**
   * Number of cycles when stacking.
   * @return numberOfCycles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of cycles when stacking.")

  public Integer getNumberOfCycles() {
    return numberOfCycles;
  }


  public void setNumberOfCycles(Integer numberOfCycles) {
    this.numberOfCycles = numberOfCycles;
  }


  public RosettaOptions contractAddress(String contractAddress) {
    
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * Address of the contract to call.
   * @return contractAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Address of the contract to call.")

  public String getContractAddress() {
    return contractAddress;
  }


  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public RosettaOptions contractName(String contractName) {
    
    this.contractName = contractName;
    return this;
  }

   /**
   * Name of the contract to call.
   * @return contractName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the contract to call.")

  public String getContractName() {
    return contractName;
  }


  public void setContractName(String contractName) {
    this.contractName = contractName;
  }


  public RosettaOptions burnBlockHeight(Integer burnBlockHeight) {
    
    this.burnBlockHeight = burnBlockHeight;
    return this;
  }

   /**
   * Set the burnchain (BTC) block for stacking lock to start.
   * @return burnBlockHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set the burnchain (BTC) block for stacking lock to start.")

  public Integer getBurnBlockHeight() {
    return burnBlockHeight;
  }


  public void setBurnBlockHeight(Integer burnBlockHeight) {
    this.burnBlockHeight = burnBlockHeight;
  }


  public RosettaOptions delegateTo(String delegateTo) {
    
    this.delegateTo = delegateTo;
    return this;
  }

   /**
   * Delegator address for when calling &#x60;delegate-stacking&#x60;.
   * @return delegateTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Delegator address for when calling `delegate-stacking`.")

  public String getDelegateTo() {
    return delegateTo;
  }


  public void setDelegateTo(String delegateTo) {
    this.delegateTo = delegateTo;
  }


  public RosettaOptions poxAddr(String poxAddr) {
    
    this.poxAddr = poxAddr;
    return this;
  }

   /**
   * The reward address for stacking transaction. It should be a valid Bitcoin address
   * @return poxAddr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reward address for stacking transaction. It should be a valid Bitcoin address")

  public String getPoxAddr() {
    return poxAddr;
  }


  public void setPoxAddr(String poxAddr) {
    this.poxAddr = poxAddr;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RosettaOptions rosettaOptions = (RosettaOptions) o;
    return Objects.equals(this.senderAddress, rosettaOptions.senderAddress) &&
        Objects.equals(this.type, rosettaOptions.type) &&
        Objects.equals(this.status, rosettaOptions.status) &&
        Objects.equals(this.tokenTransferRecipientAddress, rosettaOptions.tokenTransferRecipientAddress) &&
        Objects.equals(this.amount, rosettaOptions.amount) &&
        Objects.equals(this.symbol, rosettaOptions.symbol) &&
        Objects.equals(this.decimals, rosettaOptions.decimals) &&
        Objects.equals(this.gasLimit, rosettaOptions.gasLimit) &&
        Objects.equals(this.gasPrice, rosettaOptions.gasPrice) &&
        Objects.equals(this.suggestedFeeMultiplier, rosettaOptions.suggestedFeeMultiplier) &&
        Objects.equals(this.maxFee, rosettaOptions.maxFee) &&
        Objects.equals(this.fee, rosettaOptions.fee) &&
        Objects.equals(this.size, rosettaOptions.size) &&
        Objects.equals(this.memo, rosettaOptions.memo) &&
        Objects.equals(this.numberOfCycles, rosettaOptions.numberOfCycles) &&
        Objects.equals(this.contractAddress, rosettaOptions.contractAddress) &&
        Objects.equals(this.contractName, rosettaOptions.contractName) &&
        Objects.equals(this.burnBlockHeight, rosettaOptions.burnBlockHeight) &&
        Objects.equals(this.delegateTo, rosettaOptions.delegateTo) &&
        Objects.equals(this.poxAddr, rosettaOptions.poxAddr);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(senderAddress, type, status, tokenTransferRecipientAddress, amount, symbol, decimals, gasLimit, gasPrice, suggestedFeeMultiplier, maxFee, fee, size, memo, numberOfCycles, contractAddress, contractName, burnBlockHeight, delegateTo, poxAddr);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RosettaOptions {\n");
    sb.append("    senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tokenTransferRecipientAddress: ").append(toIndentedString(tokenTransferRecipientAddress)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    suggestedFeeMultiplier: ").append(toIndentedString(suggestedFeeMultiplier)).append("\n");
    sb.append("    maxFee: ").append(toIndentedString(maxFee)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    numberOfCycles: ").append(toIndentedString(numberOfCycles)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    contractName: ").append(toIndentedString(contractName)).append("\n");
    sb.append("    burnBlockHeight: ").append(toIndentedString(burnBlockHeight)).append("\n");
    sb.append("    delegateTo: ").append(toIndentedString(delegateTo)).append("\n");
    sb.append("    poxAddr: ").append(toIndentedString(poxAddr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

