/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.
 */
@ApiModel(description = "PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class RosettaPublicKey {
  public static final String SERIALIZED_NAME_HEX_BYTES = "hex_bytes";
  @SerializedName(SERIALIZED_NAME_HEX_BYTES)
  private String hexBytes;

  /**
   * CurveType is the type of cryptographic curve associated with a PublicKey.
   */
  @JsonAdapter(CurveTypeEnum.Adapter.class)
  public enum CurveTypeEnum {
    SECP256K1("secp256k1"),
    
    EDWARDS25519("edwards25519");

    private String value;

    CurveTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurveTypeEnum fromValue(String value) {
      for (CurveTypeEnum b : CurveTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurveTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurveTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurveTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurveTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURVE_TYPE = "curve_type";
  @SerializedName(SERIALIZED_NAME_CURVE_TYPE)
  private CurveTypeEnum curveType;

  public RosettaPublicKey() { 
  }

  public RosettaPublicKey hexBytes(String hexBytes) {
    
    this.hexBytes = hexBytes;
    return this;
  }

   /**
   * Hex-encoded public key bytes in the format specified by the CurveType.
   * @return hexBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hex-encoded public key bytes in the format specified by the CurveType.")

  public String getHexBytes() {
    return hexBytes;
  }


  public void setHexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
  }


  public RosettaPublicKey curveType(CurveTypeEnum curveType) {
    
    this.curveType = curveType;
    return this;
  }

   /**
   * CurveType is the type of cryptographic curve associated with a PublicKey.
   * @return curveType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "CurveType is the type of cryptographic curve associated with a PublicKey.")

  public CurveTypeEnum getCurveType() {
    return curveType;
  }


  public void setCurveType(CurveTypeEnum curveType) {
    this.curveType = curveType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RosettaPublicKey rosettaPublicKey = (RosettaPublicKey) o;
    return Objects.equals(this.hexBytes, rosettaPublicKey.hexBytes) &&
        Objects.equals(this.curveType, rosettaPublicKey.curveType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hexBytes, curveType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RosettaPublicKey {\n");
    sb.append("    hexBytes: ").append(toIndentedString(hexBytes)).append("\n");
    sb.append("    curveType: ").append(toIndentedString(curveType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

