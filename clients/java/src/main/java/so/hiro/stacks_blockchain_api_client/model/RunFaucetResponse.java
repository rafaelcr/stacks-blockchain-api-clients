/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * POST request that initiates a transfer of tokens to a specified testnet address
 */
@ApiModel(description = "POST request that initiates a transfer of tokens to a specified testnet address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class RunFaucetResponse {
  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TX_ID = "txId";
  @SerializedName(SERIALIZED_NAME_TX_ID)
  private String txId;

  public static final String SERIALIZED_NAME_TX_RAW = "txRaw";
  @SerializedName(SERIALIZED_NAME_TX_RAW)
  private String txRaw;

  public RunFaucetResponse() { 
  }

  public RunFaucetResponse success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Indicates if the faucet call was successful
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates if the faucet call was successful")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public RunFaucetResponse txId(String txId) {
    
    this.txId = txId;
    return this;
  }

   /**
   * The transaction ID for the faucet call
   * @return txId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The transaction ID for the faucet call")

  public String getTxId() {
    return txId;
  }


  public void setTxId(String txId) {
    this.txId = txId;
  }


  public RunFaucetResponse txRaw(String txRaw) {
    
    this.txRaw = txRaw;
    return this;
  }

   /**
   * Raw transaction in hex string representation
   * @return txRaw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Raw transaction in hex string representation")

  public String getTxRaw() {
    return txRaw;
  }


  public void setTxRaw(String txRaw) {
    this.txRaw = txRaw;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunFaucetResponse runFaucetResponse = (RunFaucetResponse) o;
    return Objects.equals(this.success, runFaucetResponse.success) &&
        Objects.equals(this.txId, runFaucetResponse.txId) &&
        Objects.equals(this.txRaw, runFaucetResponse.txRaw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, txId, txRaw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunFaucetResponse {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    txId: ").append(toIndentedString(txId)).append("\n");
    sb.append("    txRaw: ").append(toIndentedString(txRaw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

