/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SigningPayload is signed by the client with the keypair associated with an address using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
 */
@ApiModel(description = "SigningPayload is signed by the client with the keypair associated with an address using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-14T17:31:43.521-05:00[America/Monterrey]")
public class SigningPayload {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ACCOUNT_IDENTIFIER = "account_identifier";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDENTIFIER)
  private Object accountIdentifier = null;

  public static final String SERIALIZED_NAME_HEX_BYTES = "hex_bytes";
  @SerializedName(SERIALIZED_NAME_HEX_BYTES)
  private String hexBytes;

  /**
   * SignatureType is the type of a cryptographic signature.
   */
  @JsonAdapter(SignatureTypeEnum.Adapter.class)
  public enum SignatureTypeEnum {
    ECDSA("ecdsa"),
    
    ECDSA_RECOVERY("ecdsa_recovery"),
    
    ED25519("ed25519"),
    
    SCHNORR_1("schnorr_1"),
    
    SCHNORR_POSEIDON("schnorr_poseidon");

    private String value;

    SignatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureTypeEnum fromValue(String value) {
      for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_TYPE = "signature_type";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_TYPE)
  private SignatureTypeEnum signatureType;

  public SigningPayload() { 
  }

  public SigningPayload address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * [DEPRECATED by account_identifier in v1.4.4] The network-specific address of the account that should sign the payload.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[DEPRECATED by account_identifier in v1.4.4] The network-specific address of the account that should sign the payload.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public SigningPayload accountIdentifier(Object accountIdentifier) {
    
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Get accountIdentifier
   * @return accountIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAccountIdentifier() {
    return accountIdentifier;
  }


  public void setAccountIdentifier(Object accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }


  public SigningPayload hexBytes(String hexBytes) {
    
    this.hexBytes = hexBytes;
    return this;
  }

   /**
   * Get hexBytes
   * @return hexBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getHexBytes() {
    return hexBytes;
  }


  public void setHexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
  }


  public SigningPayload signatureType(SignatureTypeEnum signatureType) {
    
    this.signatureType = signatureType;
    return this;
  }

   /**
   * SignatureType is the type of a cryptographic signature.
   * @return signatureType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SignatureType is the type of a cryptographic signature.")

  public SignatureTypeEnum getSignatureType() {
    return signatureType;
  }


  public void setSignatureType(SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningPayload signingPayload = (SigningPayload) o;
    return Objects.equals(this.address, signingPayload.address) &&
        Objects.equals(this.accountIdentifier, signingPayload.accountIdentifier) &&
        Objects.equals(this.hexBytes, signingPayload.hexBytes) &&
        Objects.equals(this.signatureType, signingPayload.signatureType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, accountIdentifier, hexBytes, signatureType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningPayload {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    hexBytes: ").append(toIndentedString(hexBytes)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

