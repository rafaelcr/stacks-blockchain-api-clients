/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.AccountDataResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressAssetsListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressBalanceResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressNftListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressNonces;
import so.hiro.stacks_blockchain_api_client.model.AddressStxInboundListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionWithTransfers;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionsListResponse;
import so.hiro.stacks_blockchain_api_client.model.AddressTransactionsWithTransfersListResponse;
import java.math.BigDecimal;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Get account assets
     *
     * Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAssetsTest() throws ApiException {
        String principal = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressAssetsListResponse response = api.getAccountAssets(principal, limit, offset, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get account balances
     *
     * Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountBalanceTest() throws ApiException {
        String principal = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressBalanceResponse response = api.getAccountBalance(principal, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get inbound STX transfers
     *
     * Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the &#x60;send-many-memo&#x60; bulk sending contract. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountInboundTest() throws ApiException {
        String principal = null;
        Integer limit = null;
        Integer offset = null;
        BigDecimal height = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressStxInboundListResponse response = api.getAccountInbound(principal, limit, offset, height, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get account info
     *
     * Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountInfoTest() throws ApiException {
        String principal = null;
        Integer proof = null;
        String tip = null;
                AccountDataResponse response = api.getAccountInfo(principal, proof, tip);
        // TODO: test validations
    }
    
    /**
     * Get nft events
     *
     * **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountNftTest() throws ApiException {
        String principal = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressNftListResponse response = api.getAccountNft(principal, limit, offset, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get the latest nonce used by an account
     *
     * Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountNoncesTest() throws ApiException {
        String principal = null;
        BigDecimal blockHeight = null;
        String blockHash = null;
                AddressNonces response = api.getAccountNonces(principal, blockHeight, blockHash);
        // TODO: test validations
    }
    
    /**
     * Get account STX balance
     *
     * Retrieves STX token balance for a given Address or Contract Identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStxBalanceTest() throws ApiException {
        String principal = null;
        Boolean unanchored = null;
        String untilBlock = null;
                Object response = api.getAccountStxBalance(principal, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get account transactions
     *
     * Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTransactionsTest() throws ApiException {
        String principal = null;
        Integer limit = null;
        Integer offset = null;
        BigDecimal height = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressTransactionsListResponse response = api.getAccountTransactions(principal, limit, offset, height, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get account transactions including STX transfers for each transaction.
     *
     * Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTransactionsWithTransfersTest() throws ApiException {
        String principal = null;
        Integer limit = null;
        Integer offset = null;
        BigDecimal height = null;
        Boolean unanchored = null;
        String untilBlock = null;
                AddressTransactionsWithTransfersListResponse response = api.getAccountTransactionsWithTransfers(principal, limit, offset, height, unanchored, untilBlock);
        // TODO: test validations
    }
    
    /**
     * Get account transaction information for specific transaction
     *
     * Retrieves transaction details for a given Transcation Id &#x60;tx_id&#x60;, for a given account or contract Identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleTransactionWithTransfersTest() throws ApiException {
        String principal = null;
        String txId = null;
                AddressTransactionWithTransfers response = api.getSingleTransactionWithTransfers(principal, txId);
        // TODO: test validations
    }
    
}
