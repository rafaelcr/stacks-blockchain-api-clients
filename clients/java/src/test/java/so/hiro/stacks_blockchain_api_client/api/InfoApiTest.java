/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import java.math.BigDecimal;
import so.hiro.stacks_blockchain_api_client.model.CoreNodeInfoResponse;
import so.hiro.stacks_blockchain_api_client.model.CoreNodePoxResponse;
import so.hiro.stacks_blockchain_api_client.model.GetStxSupplyLegacyFormatResponse;
import so.hiro.stacks_blockchain_api_client.model.GetStxSupplyResponse;
import so.hiro.stacks_blockchain_api_client.model.NetworkBlockTimesResponse;
import so.hiro.stacks_blockchain_api_client.model.ServerStatusResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InfoApi
 */
@Ignore
public class InfoApiTest {

    private final InfoApi api = new InfoApi();

    
    /**
     * Get Core API info
     *
     * Retrieves information about the Core API including the server version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCoreApiInfoTest() throws ApiException {
                CoreNodeInfoResponse response = api.getCoreApiInfo();
        // TODO: test validations
    }
    
    /**
     * Get a given network&#39;s target block time
     *
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkBlockTimeByNetworkTest() throws ApiException {
        String network = null;
                Object response = api.getNetworkBlockTimeByNetwork(network);
        // TODO: test validations
    }
    
    /**
     * Get the network target block time
     *
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNetworkBlockTimesTest() throws ApiException {
                NetworkBlockTimesResponse response = api.getNetworkBlockTimes();
        // TODO: test validations
    }
    
    /**
     * Get Proof-of-Transfer details
     *
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoxInfoTest() throws ApiException {
                CoreNodePoxResponse response = api.getPoxInfo();
        // TODO: test validations
    }
    
    /**
     * API status
     *
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
                ServerStatusResponse response = api.getStatus();
        // TODO: test validations
    }
    
    /**
     * Get total and unlocked STX supply
     *
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStxSupplyTest() throws ApiException {
        BigDecimal height = null;
                GetStxSupplyResponse response = api.getStxSupply(height);
        // TODO: test validations
    }
    
    /**
     * Get circulating STX supply in plain text format
     *
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStxSupplyCirculatingPlainTest() throws ApiException {
                String response = api.getStxSupplyCirculatingPlain();
        // TODO: test validations
    }
    
    /**
     * Get total STX supply in plain text format
     *
     * Retrieves the total supply for STX tokens as plain text.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStxSupplyTotalSupplyPlainTest() throws ApiException {
                String response = api.getStxSupplyTotalSupplyPlain();
        // TODO: test validations
    }
    
    /**
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     *
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTotalStxSupplyLegacyFormatTest() throws ApiException {
        BigDecimal height = null;
                GetStxSupplyLegacyFormatResponse response = api.getTotalStxSupplyLegacyFormat(height);
        // TODO: test validations
    }
    
}
