/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobject;
import so.hiro.stacks_blockchain_api_client.model.BnsError;
import so.hiro.stacks_blockchain_api_client.model.BnsGetAllNamespacesResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNameInfoResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNamePriceResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsGetNamespacePriceResponse;
import so.hiro.stacks_blockchain_api_client.model.BnsNamesOwnByAddressResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamesApi
 */
@Ignore
public class NamesApiTest {

    private final NamesApi api = new NamesApi();

    
    /**
     * Get Zone File
     *
     * Retrieves a userâ€™s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchZoneFileTest() throws ApiException {
        String name = null;
                AnyOfobjectobject response = api.fetchZoneFile(name);
        // TODO: test validations
    }
    
    /**
     * Get All Names
     *
     * Retrieves a list of all names known to the node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllNamesTest() throws ApiException {
        Integer page = null;
                List<String> response = api.getAllNames(page);
        // TODO: test validations
    }
    
    /**
     * Get All Namespaces
     *
     * Retrieves a list of all namespaces known to the node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllNamespacesTest() throws ApiException {
                BnsGetAllNamespacesResponse response = api.getAllNamespaces();
        // TODO: test validations
    }
    
    /**
     * Get Historical Zone File
     *
     * Retrieves the historical zonefile specified by the username and zone hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricalZoneFileTest() throws ApiException {
        String name = null;
        String zoneFileHash = null;
                AnyOfobjectobject response = api.getHistoricalZoneFile(name, zoneFileHash);
        // TODO: test validations
    }
    
    /**
     * Get Name History
     *
     * Retrieves a history of all blockchain records of a registered name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNameHistoryTest() throws ApiException {
        String name = null;
        Integer page = null;
                Object response = api.getNameHistory(name, page);
        // TODO: test validations
    }
    
    /**
     * Get Name Details
     *
     * Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNameInfoTest() throws ApiException {
        String name = null;
                BnsGetNameInfoResponse response = api.getNameInfo(name);
        // TODO: test validations
    }
    
    /**
     * Get Name Price
     *
     * Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNamePriceTest() throws ApiException {
        String name = null;
                BnsGetNamePriceResponse response = api.getNamePrice(name);
        // TODO: test validations
    }
    
    /**
     * Get Names Owned by Address
     *
     * Retrieves a list of names owned by the address provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNamesOwnedByAddressTest() throws ApiException {
        String blockchain = null;
        String address = null;
                BnsNamesOwnByAddressResponse response = api.getNamesOwnedByAddress(blockchain, address);
        // TODO: test validations
    }
    
    /**
     * Get Namespace Names
     *
     * Retrieves a list of names within a given namespace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNamespaceNamesTest() throws ApiException {
        String tld = null;
        Integer page = null;
                List<String> response = api.getNamespaceNames(tld, page);
        // TODO: test validations
    }
    
    /**
     * Get Namespace Price
     *
     * Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNamespacePriceTest() throws ApiException {
        String tld = null;
                BnsGetNamespacePriceResponse response = api.getNamespacePrice(tld);
        // TODO: test validations
    }
    
}
