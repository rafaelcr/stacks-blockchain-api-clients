/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.NonFungibleTokenHistoryEventList;
import so.hiro.stacks_blockchain_api_client.model.NonFungibleTokenHoldingsList;
import so.hiro.stacks_blockchain_api_client.model.NonFungibleTokenMetadata;
import so.hiro.stacks_blockchain_api_client.model.NonFungibleTokenMintList;
import so.hiro.stacks_blockchain_api_client.model.NonFungibleTokensMetadataList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NonFungibleTokensApi
 */
@Ignore
public class NonFungibleTokensApiTest {

    private final NonFungibleTokensApi api = new NonFungibleTokensApi();

    
    /**
     * Non fungible tokens metadata for contract id
     *
     * Retrieves metadata for non fungible tokens for a given contract id. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractNftMetadataTest() throws ApiException {
        String contractId = null;
                NonFungibleTokenMetadata response = api.getContractNftMetadata(contractId);
        // TODO: test validations
    }
    
    /**
     * Non-Fungible Token history
     *
     * Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNftHistoryTest() throws ApiException {
        String assetIdentifier = null;
        String value = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
        Boolean txMetadata = null;
                NonFungibleTokenHistoryEventList response = api.getNftHistory(assetIdentifier, value, limit, offset, unanchored, txMetadata);
        // TODO: test validations
    }
    
    /**
     * Non-Fungible Token holdings
     *
     * Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID). Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNftHoldingsTest() throws ApiException {
        String principal = null;
        List<String> assetIdentifiers = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
        Boolean txMetadata = null;
                NonFungibleTokenHoldingsList response = api.getNftHoldings(principal, assetIdentifiers, limit, offset, unanchored, txMetadata);
        // TODO: test validations
    }
    
    /**
     * Non fungible tokens metadata list
     *
     * Retrieves a list of non fungible tokens with their metadata. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNftMetadataListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
                NonFungibleTokensMetadataList response = api.getNftMetadataList(limit, offset);
        // TODO: test validations
    }
    
    /**
     * Non-Fungible Token mints
     *
     * Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNftMintsTest() throws ApiException {
        String assetIdentifier = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
        Boolean txMetadata = null;
                NonFungibleTokenMintList response = api.getNftMints(assetIdentifier, limit, offset, unanchored, txMetadata);
        // TODO: test validations
    }
    
}
