/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.RosettaAccountBalanceRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaAccountBalanceResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockTransactionRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaBlockTransactionResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionCombineRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionCombineResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionDeriveRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionDeriveResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionHashRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionHashResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionMetadataRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionMetadataResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionParseRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionParseResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPayloadResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPayloadsRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPreprocessRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionPreprocessResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionSubmitRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaConstructionSubmitResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaError;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolTransactionRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaMempoolTransactionResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaNetworkListResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaNetworkOptionsResponse;
import so.hiro.stacks_blockchain_api_client.model.RosettaOptionsRequest;
import so.hiro.stacks_blockchain_api_client.model.RosettaStatusRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RosettaApi
 */
@Ignore
public class RosettaApiTest {

    private final RosettaApi api = new RosettaApi();

    
    /**
     * Get an Account Balance
     *
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaAccountBalanceTest() throws ApiException {
        RosettaAccountBalanceRequest rosettaAccountBalanceRequest = null;
                RosettaAccountBalanceResponse response = api.rosettaAccountBalance(rosettaAccountBalanceRequest);
        // TODO: test validations
    }
    
    /**
     * Get a Block
     *
     * Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaBlockTest() throws ApiException {
        RosettaBlockRequest rosettaBlockRequest = null;
                RosettaBlockResponse response = api.rosettaBlock(rosettaBlockRequest);
        // TODO: test validations
    }
    
    /**
     * Get a Block Transaction
     *
     * Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaBlockTransactionTest() throws ApiException {
        RosettaBlockTransactionRequest rosettaBlockTransactionRequest = null;
                RosettaBlockTransactionResponse response = api.rosettaBlockTransaction(rosettaBlockTransactionRequest);
        // TODO: test validations
    }
    
    /**
     * Create Network Transaction from Signatures
     *
     * Take unsigned transaction and signature, combine both and return signed transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionCombineTest() throws ApiException {
        RosettaConstructionCombineRequest rosettaConstructionCombineRequest = null;
                RosettaConstructionCombineResponse response = api.rosettaConstructionCombine(rosettaConstructionCombineRequest);
        // TODO: test validations
    }
    
    /**
     * Derive an AccountIdentifier from a PublicKey
     *
     * Retrieves the Account Identifier information based on a Public Key for a given network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionDeriveTest() throws ApiException {
        RosettaConstructionDeriveRequest rosettaConstructionDeriveRequest = null;
                RosettaConstructionDeriveResponse response = api.rosettaConstructionDerive(rosettaConstructionDeriveRequest);
        // TODO: test validations
    }
    
    /**
     * Get the Hash of a Signed Transaction
     *
     * Retrieves the network-specific transaction hash for a signed transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionHashTest() throws ApiException {
        RosettaConstructionHashRequest rosettaConstructionHashRequest = null;
                RosettaConstructionHashResponse response = api.rosettaConstructionHash(rosettaConstructionHashRequest);
        // TODO: test validations
    }
    
    /**
     * Get Metadata for Transaction Construction
     *
     * To Do
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionMetadataTest() throws ApiException {
        RosettaConstructionMetadataRequest rosettaConstructionMetadataRequest = null;
                RosettaConstructionMetadataResponse response = api.rosettaConstructionMetadata(rosettaConstructionMetadataRequest);
        // TODO: test validations
    }
    
    /**
     * Parse a Transaction
     *
     * TODO
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionParseTest() throws ApiException {
        RosettaConstructionParseRequest rosettaConstructionParseRequest = null;
                RosettaConstructionParseResponse response = api.rosettaConstructionParse(rosettaConstructionParseRequest);
        // TODO: test validations
    }
    
    /**
     * Generate an Unsigned Transaction and Signing Payloads
     *
     * Generate and unsigned transaction from operations and metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionPayloadsTest() throws ApiException {
        RosettaConstructionPayloadsRequest rosettaConstructionPayloadsRequest = null;
                RosettaConstructionPayloadResponse response = api.rosettaConstructionPayloads(rosettaConstructionPayloadsRequest);
        // TODO: test validations
    }
    
    /**
     * Create a Request to Fetch Metadata
     *
     * TODO
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionPreprocessTest() throws ApiException {
        RosettaConstructionPreprocessRequest rosettaConstructionPreprocessRequest = null;
                RosettaConstructionPreprocessResponse response = api.rosettaConstructionPreprocess(rosettaConstructionPreprocessRequest);
        // TODO: test validations
    }
    
    /**
     * Submit a Signed Transaction
     *
     * Submit a pre-signed transaction to the node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaConstructionSubmitTest() throws ApiException {
        RosettaConstructionSubmitRequest rosettaConstructionSubmitRequest = null;
                RosettaConstructionSubmitResponse response = api.rosettaConstructionSubmit(rosettaConstructionSubmitRequest);
        // TODO: test validations
    }
    
    /**
     * Get All Mempool Transactions
     *
     * Retrieves a list of transcations currently in the mempool for a given network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaMempoolTest() throws ApiException {
        RosettaMempoolRequest rosettaMempoolRequest = null;
                RosettaMempoolResponse response = api.rosettaMempool(rosettaMempoolRequest);
        // TODO: test validations
    }
    
    /**
     * Get a Mempool Transaction
     *
     * Retrieves transaction details from the mempool for a given transaction id from a given network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaMempoolTransactionTest() throws ApiException {
        RosettaMempoolTransactionRequest rosettaMempoolTransactionRequest = null;
                RosettaMempoolTransactionResponse response = api.rosettaMempoolTransaction(rosettaMempoolTransactionRequest);
        // TODO: test validations
    }
    
    /**
     * Get List of Available Networks
     *
     * Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaNetworkListTest() throws ApiException {
                RosettaNetworkListResponse response = api.rosettaNetworkList();
        // TODO: test validations
    }
    
    /**
     * Get Network Options
     *
     * Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaNetworkOptionsTest() throws ApiException {
        RosettaOptionsRequest rosettaOptionsRequest = null;
                RosettaNetworkOptionsResponse response = api.rosettaNetworkOptions(rosettaOptionsRequest);
        // TODO: test validations
    }
    
    /**
     * Get Network Status
     *
     * Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rosettaNetworkStatusTest() throws ApiException {
        RosettaStatusRequest rosettaStatusRequest = null;
                Map<String, Object> response = api.rosettaNetworkStatus(rosettaStatusRequest);
        // TODO: test validations
    }
    
}
