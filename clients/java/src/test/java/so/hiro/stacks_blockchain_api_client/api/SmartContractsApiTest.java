/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobjectobjectobjectobject;
import so.hiro.stacks_blockchain_api_client.model.ContractInterfaceResponse;
import so.hiro.stacks_blockchain_api_client.model.ContractListResponse;
import so.hiro.stacks_blockchain_api_client.model.ContractSourceResponse;
import so.hiro.stacks_blockchain_api_client.model.MapEntryResponse;
import so.hiro.stacks_blockchain_api_client.model.ReadOnlyFunctionArgs;
import so.hiro.stacks_blockchain_api_client.model.ReadOnlyFunctionSuccessResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmartContractsApi
 */
@Ignore
public class SmartContractsApiTest {

    private final SmartContractsApi api = new SmartContractsApi();

    
    /**
     * Call read-only function
     *
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callReadOnlyFunctionTest() throws ApiException {
        String contractAddress = null;
        String contractName = null;
        String functionName = null;
        ReadOnlyFunctionArgs readOnlyFunctionArgs = null;
        String tip = null;
                ReadOnlyFunctionSuccessResponse response = api.callReadOnlyFunction(contractAddress, contractName, functionName, readOnlyFunctionArgs, tip);
        // TODO: test validations
    }
    
    /**
     * Get contract info
     *
     * Retrieves details of a contract with a given &#x60;contract_id&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractByIdTest() throws ApiException {
        String contractId = null;
        Boolean unanchored = null;
                Object response = api.getContractById(contractId, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get specific data-map inside a contract
     *
     * Attempt to fetch data from a contract data map. The contract is identified with Stacks Address &#x60;contract_address&#x60; and Contract Name &#x60;contract_address&#x60; in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, &#x60;data&#x60; is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractDataMapEntryTest() throws ApiException {
        String contractAddress = null;
        String contractName = null;
        String mapName = null;
        String key = null;
        Integer proof = null;
        String tip = null;
                MapEntryResponse response = api.getContractDataMapEntry(contractAddress, contractName, mapName, key, proof, tip);
        // TODO: test validations
    }
    
    /**
     * Get contract events
     *
     * Retrieves a list of events that have been triggered by a given &#x60;contract_id&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractEventsByIdTest() throws ApiException {
        String contractId = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
                AnyOfobjectobjectobjectobjectobject response = api.getContractEventsById(contractId, limit, offset, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get contract interface
     *
     * Retrieves a contract interface with a given &#x60;contract_address&#x60; and &#x60;contract name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractInterfaceTest() throws ApiException {
        String contractAddress = null;
        String contractName = null;
        String tip = null;
                ContractInterfaceResponse response = api.getContractInterface(contractAddress, contractName, tip);
        // TODO: test validations
    }
    
    /**
     * Get contract source
     *
     * Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractSourceTest() throws ApiException {
        String contractAddress = null;
        String contractName = null;
        Integer proof = null;
        String tip = null;
                ContractSourceResponse response = api.getContractSource(contractAddress, contractName, proof, tip);
        // TODO: test validations
    }
    
    /**
     * Get contracts by trait
     *
     * Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractsByTraitTest() throws ApiException {
        String traitAbi = null;
        Integer limit = null;
        Integer offset = null;
                ContractListResponse response = api.getContractsByTrait(traitAbi, limit, offset);
        // TODO: test validations
    }
    
}
