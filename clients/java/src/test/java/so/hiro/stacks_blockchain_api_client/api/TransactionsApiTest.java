/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.api;

import so.hiro.stacks_blockchain_api_client.ApiException;
import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobject;
import so.hiro.stacks_blockchain_api_client.model.AnyOfobjectobjectobjectobjectobject;
import java.io.File;
import so.hiro.stacks_blockchain_api_client.model.GetRawTransactionResult;
import so.hiro.stacks_blockchain_api_client.model.MempoolTransactionListResponse;
import so.hiro.stacks_blockchain_api_client.model.PostCoreNodeTransactionsError;
import so.hiro.stacks_blockchain_api_client.model.TransactionResults;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Transactions for address
     *
     * Retrieves all transactions for a given address that are currently in mempool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAddressMempoolTransactionsTest() throws ApiException {
        String address = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
                Object response = api.getAddressMempoolTransactions(address, limit, offset, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get dropped mempool transactions
     *
     * Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDroppedMempoolTransactionListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
                Object response = api.getDroppedMempoolTransactionList(limit, offset);
        // TODO: test validations
    }
    
    /**
     * Get mempool transactions
     *
     * Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMempoolTransactionListTest() throws ApiException {
        String senderAddress = null;
        String recipientAddress = null;
        String address = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
                MempoolTransactionListResponse response = api.getMempoolTransactionList(senderAddress, recipientAddress, address, limit, offset, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get Raw Transaction
     *
     * Retrieves a hex encoded serialized transaction for a given ID 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawTransactionByIdTest() throws ApiException {
        String txId = null;
                GetRawTransactionResult response = api.getRawTransactionById(txId);
        // TODO: test validations
    }
    
    /**
     * Get transaction
     *
     * Retrieves transaction details for a given transaction ID  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionByIdTest() throws ApiException {
        String txId = null;
        Integer eventOffset = null;
        Integer eventLimit = null;
        Boolean unanchored = null;
                AnyOfobjectobjectobjectobjectobject response = api.getTransactionById(txId, eventOffset, eventLimit, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get recent transactions
     *
     * Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  &#x60;import type { TransactionResults } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> type = null;
        Boolean unanchored = null;
                TransactionResults response = api.getTransactionList(limit, offset, type, unanchored);
        // TODO: test validations
    }
    
    /**
     * Transactions by block hash
     *
     * Retrieves a list of all transactions within a block for a given block hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByBlockHashTest() throws ApiException {
        String blockHash = null;
        Integer limit = null;
        Integer offset = null;
                Object response = api.getTransactionsByBlockHash(blockHash, limit, offset);
        // TODO: test validations
    }
    
    /**
     * Transactions by block height
     *
     * Retrieves all transactions within a block at a given height
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByBlockHeightTest() throws ApiException {
        Integer height = null;
        Integer limit = null;
        Integer offset = null;
        Boolean unanchored = null;
                Object response = api.getTransactionsByBlockHeight(height, limit, offset, unanchored);
        // TODO: test validations
    }
    
    /**
     * Get list of details for transactions
     *
     * Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTxListDetailsTest() throws ApiException {
        List<String> txId = null;
        Integer eventOffset = null;
        Integer eventLimit = null;
        Boolean unanchored = null;
                Map<String, AnyOfobjectobject> response = api.getTxListDetails(txId, eventOffset, eventLimit, unanchored);
        // TODO: test validations
    }
    
    /**
     * Broadcast raw transaction
     *
     * Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCoreNodeTransactionsTest() throws ApiException {
        File body = null;
                String response = api.postCoreNodeTransactions(body);
        // TODO: test validations
    }
    
}
