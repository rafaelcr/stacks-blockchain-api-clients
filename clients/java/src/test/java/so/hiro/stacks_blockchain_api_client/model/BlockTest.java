/*
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 
 *
 * The version of the OpenAPI document: v3.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package so.hiro.stacks_blockchain_api_client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Block
 */
public class BlockTest {
    private final Block model = new Block();

    /**
     * Model tests for Block
     */
    @Test
    public void testBlock() {
        // TODO: test Block
    }

    /**
     * Test the property 'canonical'
     */
    @Test
    public void canonicalTest() {
        // TODO: test canonical
    }

    /**
     * Test the property 'height'
     */
    @Test
    public void heightTest() {
        // TODO: test height
    }

    /**
     * Test the property 'hash'
     */
    @Test
    public void hashTest() {
        // TODO: test hash
    }

    /**
     * Test the property 'parentBlockHash'
     */
    @Test
    public void parentBlockHashTest() {
        // TODO: test parentBlockHash
    }

    /**
     * Test the property 'burnBlockTime'
     */
    @Test
    public void burnBlockTimeTest() {
        // TODO: test burnBlockTime
    }

    /**
     * Test the property 'burnBlockTimeIso'
     */
    @Test
    public void burnBlockTimeIsoTest() {
        // TODO: test burnBlockTimeIso
    }

    /**
     * Test the property 'burnBlockHash'
     */
    @Test
    public void burnBlockHashTest() {
        // TODO: test burnBlockHash
    }

    /**
     * Test the property 'burnBlockHeight'
     */
    @Test
    public void burnBlockHeightTest() {
        // TODO: test burnBlockHeight
    }

    /**
     * Test the property 'minerTxid'
     */
    @Test
    public void minerTxidTest() {
        // TODO: test minerTxid
    }

    /**
     * Test the property 'parentMicroblockHash'
     */
    @Test
    public void parentMicroblockHashTest() {
        // TODO: test parentMicroblockHash
    }

    /**
     * Test the property 'parentMicroblockSequence'
     */
    @Test
    public void parentMicroblockSequenceTest() {
        // TODO: test parentMicroblockSequence
    }

    /**
     * Test the property 'txs'
     */
    @Test
    public void txsTest() {
        // TODO: test txs
    }

    /**
     * Test the property 'microblocksAccepted'
     */
    @Test
    public void microblocksAcceptedTest() {
        // TODO: test microblocksAccepted
    }

    /**
     * Test the property 'microblocksStreamed'
     */
    @Test
    public void microblocksStreamedTest() {
        // TODO: test microblocksStreamed
    }

    /**
     * Test the property 'executionCostReadCount'
     */
    @Test
    public void executionCostReadCountTest() {
        // TODO: test executionCostReadCount
    }

    /**
     * Test the property 'executionCostReadLength'
     */
    @Test
    public void executionCostReadLengthTest() {
        // TODO: test executionCostReadLength
    }

    /**
     * Test the property 'executionCostRuntime'
     */
    @Test
    public void executionCostRuntimeTest() {
        // TODO: test executionCostRuntime
    }

    /**
     * Test the property 'executionCostWriteCount'
     */
    @Test
    public void executionCostWriteCountTest() {
        // TODO: test executionCostWriteCount
    }

    /**
     * Test the property 'executionCostWriteLength'
     */
    @Test
    public void executionCostWriteLengthTest() {
        // TODO: test executionCostWriteLength
    }

}
