<?php
/**
 * AccountsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StacksBlockchainApi\ApiException;
use StacksBlockchainApi\Configuration;
use StacksBlockchainApi\HeaderSelector;
use StacksBlockchainApi\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAccountAssets
     *
     * Get account assets
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account assets to fetch (optional)
     * @param  int $offset index of first account assets to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state at that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressAssetsListResponse
     */
    public function getAccountAssets($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountAssetsWithHttpInfo($principal, $limit, $offset, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountAssetsWithHttpInfo
     *
     * Get account assets
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account assets to fetch (optional)
     * @param  int $offset index of first account assets to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state at that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressAssetsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountAssetsWithHttpInfo($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountAssetsRequest($principal, $limit, $offset, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressAssetsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressAssetsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressAssetsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressAssetsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAssetsAsync
     *
     * Get account assets
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account assets to fetch (optional)
     * @param  int $offset index of first account assets to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state at that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAssetsAsync($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        return $this->getAccountAssetsAsyncWithHttpInfo($principal, $limit, $offset, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAssetsAsyncWithHttpInfo
     *
     * Get account assets
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account assets to fetch (optional)
     * @param  int $offset index of first account assets to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state at that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAssetsAsyncWithHttpInfo($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressAssetsListResponse';
        $request = $this->getAccountAssetsRequest($principal, $limit, $offset, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountAssets'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account assets to fetch (optional)
     * @param  int $offset index of first account assets to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state at that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountAssetsRequest($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountAssets'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountBalance
     *
     * Get account balances
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressBalanceResponse
     */
    public function getAccountBalance($principal, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountBalanceWithHttpInfo($principal, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountBalanceWithHttpInfo
     *
     * Get account balances
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressBalanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBalanceWithHttpInfo($principal, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountBalanceRequest($principal, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressBalanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressBalanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressBalanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountBalanceAsync
     *
     * Get account balances
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBalanceAsync($principal, $unanchored = false, $until_block = null)
    {
        return $this->getAccountBalanceAsyncWithHttpInfo($principal, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountBalanceAsyncWithHttpInfo
     *
     * Get account balances
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBalanceAsyncWithHttpInfo($principal, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressBalanceResponse';
        $request = $this->getAccountBalanceRequest($principal, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountBalance'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountBalanceRequest($principal, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountBalance'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountInbound
     *
     * Get inbound STX transfers
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  float $height Filter for transfers only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressStxInboundListResponse
     */
    public function getAccountInbound($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountInboundWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountInboundWithHttpInfo
     *
     * Get inbound STX transfers
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  float $height Filter for transfers only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressStxInboundListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountInboundWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountInboundRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressStxInboundListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressStxInboundListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressStxInboundListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressStxInboundListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountInboundAsync
     *
     * Get inbound STX transfers
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  float $height Filter for transfers only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountInboundAsync($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        return $this->getAccountInboundAsyncWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountInboundAsyncWithHttpInfo
     *
     * Get inbound STX transfers
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  float $height Filter for transfers only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountInboundAsyncWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressStxInboundListResponse';
        $request = $this->getAccountInboundRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountInbound'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  float $height Filter for transfers only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountInboundRequest($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountInbound'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/stx_inbound';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($height !== null) {
            if('form' === 'form' && is_array($height)) {
                foreach($height as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['height'] = $height;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountInfo
     *
     * Get account info
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AccountDataResponse
     */
    public function getAccountInfo($principal, $proof = null, $tip = null)
    {
        list($response) = $this->getAccountInfoWithHttpInfo($principal, $proof, $tip);
        return $response;
    }

    /**
     * Operation getAccountInfoWithHttpInfo
     *
     * Get account info
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AccountDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountInfoWithHttpInfo($principal, $proof = null, $tip = null)
    {
        $request = $this->getAccountInfoRequest($principal, $proof, $tip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AccountDataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AccountDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AccountDataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AccountDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountInfoAsync
     *
     * Get account info
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountInfoAsync($principal, $proof = null, $tip = null)
    {
        return $this->getAccountInfoAsyncWithHttpInfo($principal, $proof, $tip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountInfoAsyncWithHttpInfo
     *
     * Get account info
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountInfoAsyncWithHttpInfo($principal, $proof = null, $tip = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AccountDataResponse';
        $request = $this->getAccountInfoRequest($principal, $proof, $tip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountInfo'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountInfoRequest($principal, $proof = null, $tip = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountInfo'
            );
        }

        $resourcePath = '/v2/accounts/{principal}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($proof !== null) {
            if('form' === 'form' && is_array($proof)) {
                foreach($proof as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proof'] = $proof;
            }
        }
        // query params
        if ($tip !== null) {
            if('form' === 'form' && is_array($tip)) {
                foreach($tip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tip'] = $tip;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountNft
     *
     * Get nft events
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressNftListResponse
     * @deprecated
     */
    public function getAccountNft($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountNftWithHttpInfo($principal, $limit, $offset, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountNftWithHttpInfo
     *
     * Get nft events
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressNftListResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getAccountNftWithHttpInfo($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountNftRequest($principal, $limit, $offset, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressNftListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressNftListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressNftListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressNftListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountNftAsync
     *
     * Get nft events
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccountNftAsync($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        return $this->getAccountNftAsyncWithHttpInfo($principal, $limit, $offset, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountNftAsyncWithHttpInfo
     *
     * Get nft events
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccountNftAsyncWithHttpInfo($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressNftListResponse';
        $request = $this->getAccountNftRequest($principal, $limit, $offset, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountNft'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit number of items to return (optional)
     * @param  int $offset number of items to skip (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getAccountNftRequest($principal, $limit = null, $offset = null, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountNft'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/nft_events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountNonces
     *
     * Get the latest nonce used by an account
     *
     * @param  string $principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param  float $block_height Optionally get the nonce at a given block height (optional)
     * @param  string $block_hash Optionally get the nonce at a given block hash (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressNonces
     */
    public function getAccountNonces($principal, $block_height = null, $block_hash = null)
    {
        list($response) = $this->getAccountNoncesWithHttpInfo($principal, $block_height, $block_hash);
        return $response;
    }

    /**
     * Operation getAccountNoncesWithHttpInfo
     *
     * Get the latest nonce used by an account
     *
     * @param  string $principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param  float $block_height Optionally get the nonce at a given block height (optional)
     * @param  string $block_hash Optionally get the nonce at a given block hash (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressNonces, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountNoncesWithHttpInfo($principal, $block_height = null, $block_hash = null)
    {
        $request = $this->getAccountNoncesRequest($principal, $block_height, $block_hash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressNonces' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressNonces', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressNonces';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressNonces',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountNoncesAsync
     *
     * Get the latest nonce used by an account
     *
     * @param  string $principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param  float $block_height Optionally get the nonce at a given block height (optional)
     * @param  string $block_hash Optionally get the nonce at a given block hash (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountNoncesAsync($principal, $block_height = null, $block_hash = null)
    {
        return $this->getAccountNoncesAsyncWithHttpInfo($principal, $block_height, $block_hash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountNoncesAsyncWithHttpInfo
     *
     * Get the latest nonce used by an account
     *
     * @param  string $principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param  float $block_height Optionally get the nonce at a given block height (optional)
     * @param  string $block_hash Optionally get the nonce at a given block hash (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountNoncesAsyncWithHttpInfo($principal, $block_height = null, $block_hash = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressNonces';
        $request = $this->getAccountNoncesRequest($principal, $block_height, $block_hash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountNonces'
     *
     * @param  string $principal Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) (required)
     * @param  float $block_height Optionally get the nonce at a given block height (optional)
     * @param  string $block_hash Optionally get the nonce at a given block hash (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountNoncesRequest($principal, $block_height = null, $block_hash = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountNonces'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/nonces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($block_height !== null) {
            if('form' === 'form' && is_array($block_height)) {
                foreach($block_height as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['block_height'] = $block_height;
            }
        }
        // query params
        if ($block_hash !== null) {
            if('form' === 'form' && is_array($block_hash)) {
                foreach($block_hash as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['block_hash'] = $block_hash;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountStxBalance
     *
     * Get account STX balance
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAccountStxBalance($principal, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountStxBalanceWithHttpInfo($principal, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountStxBalanceWithHttpInfo
     *
     * Get account STX balance
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountStxBalanceWithHttpInfo($principal, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountStxBalanceRequest($principal, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountStxBalanceAsync
     *
     * Get account STX balance
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountStxBalanceAsync($principal, $unanchored = false, $until_block = null)
    {
        return $this->getAccountStxBalanceAsyncWithHttpInfo($principal, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountStxBalanceAsyncWithHttpInfo
     *
     * Get account STX balance
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountStxBalanceAsyncWithHttpInfo($principal, $unanchored = false, $until_block = null)
    {
        $returnType = 'object';
        $request = $this->getAccountStxBalanceRequest($principal, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountStxBalance'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountStxBalanceRequest($principal, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountStxBalance'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/stx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountTransactions
     *
     * Get account transactions
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressTransactionsListResponse
     */
    public function getAccountTransactions($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountTransactionsWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountTransactionsWithHttpInfo
     *
     * Get account transactions
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressTransactionsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountTransactionsWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountTransactionsRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressTransactionsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressTransactionsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressTransactionsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressTransactionsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountTransactionsAsync
     *
     * Get account transactions
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTransactionsAsync($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        return $this->getAccountTransactionsAsyncWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountTransactionsAsyncWithHttpInfo
     *
     * Get account transactions
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTransactionsAsyncWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressTransactionsListResponse';
        $request = $this->getAccountTransactionsRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountTransactions'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountTransactionsRequest($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountTransactions'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($height !== null) {
            if('form' === 'form' && is_array($height)) {
                foreach($height as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['height'] = $height;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountTransactionsWithTransfers
     *
     * Get account transactions including STX transfers for each transaction.
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse
     */
    public function getAccountTransactionsWithTransfers($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        list($response) = $this->getAccountTransactionsWithTransfersWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block);
        return $response;
    }

    /**
     * Operation getAccountTransactionsWithTransfersWithHttpInfo
     *
     * Get account transactions including STX transfers for each transaction.
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountTransactionsWithTransfersWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $request = $this->getAccountTransactionsWithTransfersRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountTransactionsWithTransfersAsync
     *
     * Get account transactions including STX transfers for each transaction.
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTransactionsWithTransfersAsync($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        return $this->getAccountTransactionsWithTransfersAsyncWithHttpInfo($principal, $limit, $offset, $height, $unanchored, $until_block)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountTransactionsWithTransfersAsyncWithHttpInfo
     *
     * Get account transactions including STX transfers for each transaction.
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTransactionsWithTransfersAsyncWithHttpInfo($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressTransactionsWithTransfersListResponse';
        $request = $this->getAccountTransactionsWithTransfersRequest($principal, $limit, $offset, $height, $unanchored, $until_block);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountTransactionsWithTransfers'
     *
     * @param  string $principal Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) (required)
     * @param  int $limit max number of account transactions to fetch (optional)
     * @param  int $offset index of first account transaction to fetch (optional)
     * @param  float $height Filter for transactions only at this given block height (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     * @param  string $until_block returned data representing the state up until that point in time, rather than the current block. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountTransactionsWithTransfersRequest($principal, $limit = null, $offset = null, $height = null, $unanchored = false, $until_block = null)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getAccountTransactionsWithTransfers'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/transactions_with_transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($height !== null) {
            if('form' === 'form' && is_array($height)) {
                foreach($height as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['height'] = $height;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($until_block !== null) {
            if('form' === 'form' && is_array($until_block)) {
                foreach($until_block as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until_block'] = $until_block;
            }
        }


        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSingleTransactionWithTransfers
     *
     * Get account transaction information for specific transaction
     *
     * @param  string $principal Stacks address or a contract identifier (required)
     * @param  string $tx_id Transaction id (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\AddressTransactionWithTransfers
     */
    public function getSingleTransactionWithTransfers($principal, $tx_id)
    {
        list($response) = $this->getSingleTransactionWithTransfersWithHttpInfo($principal, $tx_id);
        return $response;
    }

    /**
     * Operation getSingleTransactionWithTransfersWithHttpInfo
     *
     * Get account transaction information for specific transaction
     *
     * @param  string $principal Stacks address or a contract identifier (required)
     * @param  string $tx_id Transaction id (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\AddressTransactionWithTransfers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSingleTransactionWithTransfersWithHttpInfo($principal, $tx_id)
    {
        $request = $this->getSingleTransactionWithTransfersRequest($principal, $tx_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\AddressTransactionWithTransfers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\AddressTransactionWithTransfers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\AddressTransactionWithTransfers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\AddressTransactionWithTransfers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSingleTransactionWithTransfersAsync
     *
     * Get account transaction information for specific transaction
     *
     * @param  string $principal Stacks address or a contract identifier (required)
     * @param  string $tx_id Transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleTransactionWithTransfersAsync($principal, $tx_id)
    {
        return $this->getSingleTransactionWithTransfersAsyncWithHttpInfo($principal, $tx_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSingleTransactionWithTransfersAsyncWithHttpInfo
     *
     * Get account transaction information for specific transaction
     *
     * @param  string $principal Stacks address or a contract identifier (required)
     * @param  string $tx_id Transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleTransactionWithTransfersAsyncWithHttpInfo($principal, $tx_id)
    {
        $returnType = '\StacksBlockchainApi\Model\AddressTransactionWithTransfers';
        $request = $this->getSingleTransactionWithTransfersRequest($principal, $tx_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSingleTransactionWithTransfers'
     *
     * @param  string $principal Stacks address or a contract identifier (required)
     * @param  string $tx_id Transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSingleTransactionWithTransfersRequest($principal, $tx_id)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getSingleTransactionWithTransfers'
            );
        }
        // verify the required parameter 'tx_id' is set
        if ($tx_id === null || (is_array($tx_id) && count($tx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tx_id when calling getSingleTransactionWithTransfers'
            );
        }

        $resourcePath = '/extended/v1/address/{principal}/{tx_id}/with_transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($principal !== null) {
            $resourcePath = str_replace(
                '{' . 'principal' . '}',
                ObjectSerializer::toPathValue($principal),
                $resourcePath
            );
        }
        // path params
        if ($tx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tx_id' . '}',
                ObjectSerializer::toPathValue($tx_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
