<?php
/**
 * NonFungibleTokensApi
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StacksBlockchainApi\ApiException;
use StacksBlockchainApi\Configuration;
use StacksBlockchainApi\HeaderSelector;
use StacksBlockchainApi\ObjectSerializer;

/**
 * NonFungibleTokensApi Class Doc Comment
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NonFungibleTokensApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getContractNftMetadata
     *
     * Non fungible tokens metadata for contract id
     *
     * @param  string $contract_id token&#39;s contract id (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\NonFungibleTokenMetadata
     */
    public function getContractNftMetadata($contract_id)
    {
        list($response) = $this->getContractNftMetadataWithHttpInfo($contract_id);
        return $response;
    }

    /**
     * Operation getContractNftMetadataWithHttpInfo
     *
     * Non fungible tokens metadata for contract id
     *
     * @param  string $contract_id token&#39;s contract id (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\NonFungibleTokenMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractNftMetadataWithHttpInfo($contract_id)
    {
        $request = $this->getContractNftMetadataRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\NonFungibleTokenMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\NonFungibleTokenMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\NonFungibleTokenMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractNftMetadataAsync
     *
     * Non fungible tokens metadata for contract id
     *
     * @param  string $contract_id token&#39;s contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractNftMetadataAsync($contract_id)
    {
        return $this->getContractNftMetadataAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractNftMetadataAsyncWithHttpInfo
     *
     * Non fungible tokens metadata for contract id
     *
     * @param  string $contract_id token&#39;s contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractNftMetadataAsyncWithHttpInfo($contract_id)
    {
        $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenMetadata';
        $request = $this->getContractNftMetadataRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractNftMetadata'
     *
     * @param  string $contract_id token&#39;s contract id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractNftMetadataRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getContractNftMetadata'
            );
        }

        $resourcePath = '/extended/v1/tokens/{contractId}/nft/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNftHistory
     *
     * Non-Fungible Token history
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  string $value hex representation of the token&#39;s unique value (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList
     */
    public function getNftHistory($asset_identifier, $value, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        list($response) = $this->getNftHistoryWithHttpInfo($asset_identifier, $value, $limit, $offset, $unanchored, $tx_metadata);
        return $response;
    }

    /**
     * Operation getNftHistoryWithHttpInfo
     *
     * Non-Fungible Token history
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  string $value hex representation of the token&#39;s unique value (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNftHistoryWithHttpInfo($asset_identifier, $value, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $request = $this->getNftHistoryRequest($asset_identifier, $value, $limit, $offset, $unanchored, $tx_metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNftHistoryAsync
     *
     * Non-Fungible Token history
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  string $value hex representation of the token&#39;s unique value (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftHistoryAsync($asset_identifier, $value, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        return $this->getNftHistoryAsyncWithHttpInfo($asset_identifier, $value, $limit, $offset, $unanchored, $tx_metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNftHistoryAsyncWithHttpInfo
     *
     * Non-Fungible Token history
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  string $value hex representation of the token&#39;s unique value (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftHistoryAsyncWithHttpInfo($asset_identifier, $value, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenHistoryEventList';
        $request = $this->getNftHistoryRequest($asset_identifier, $value, $limit, $offset, $unanchored, $tx_metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNftHistory'
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  string $value hex representation of the token&#39;s unique value (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNftHistoryRequest($asset_identifier, $value, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        // verify the required parameter 'asset_identifier' is set
        if ($asset_identifier === null || (is_array($asset_identifier) && count($asset_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_identifier when calling getNftHistory'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling getNftHistory'
            );
        }

        $resourcePath = '/extended/v1/tokens/nft/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($asset_identifier !== null) {
            if('form' === 'form' && is_array($asset_identifier)) {
                foreach($asset_identifier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asset_identifier'] = $asset_identifier;
            }
        }
        // query params
        if ($value !== null) {
            if('form' === 'form' && is_array($value)) {
                foreach($value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['value'] = $value;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($tx_metadata !== null) {
            if('form' === 'form' && is_array($tx_metadata)) {
                foreach($tx_metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tx_metadata'] = $tx_metadata;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNftHoldings
     *
     * Non-Fungible Token holdings
     *
     * @param  string $principal token owner&#39;s STX address or Smart Contract ID (required)
     * @param  string[] $asset_identifiers identifiers of the token asset classes to filter for (optional)
     * @param  int $limit max number of tokens to fetch (optional, default to 50)
     * @param  int $offset index of first tokens to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include tokens from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\NonFungibleTokenHoldingsList
     */
    public function getNftHoldings($principal, $asset_identifiers = null, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        list($response) = $this->getNftHoldingsWithHttpInfo($principal, $asset_identifiers, $limit, $offset, $unanchored, $tx_metadata);
        return $response;
    }

    /**
     * Operation getNftHoldingsWithHttpInfo
     *
     * Non-Fungible Token holdings
     *
     * @param  string $principal token owner&#39;s STX address or Smart Contract ID (required)
     * @param  string[] $asset_identifiers identifiers of the token asset classes to filter for (optional)
     * @param  int $limit max number of tokens to fetch (optional, default to 50)
     * @param  int $offset index of first tokens to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include tokens from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\NonFungibleTokenHoldingsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNftHoldingsWithHttpInfo($principal, $asset_identifiers = null, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $request = $this->getNftHoldingsRequest($principal, $asset_identifiers, $limit, $offset, $unanchored, $tx_metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\NonFungibleTokenHoldingsList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\NonFungibleTokenHoldingsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenHoldingsList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\NonFungibleTokenHoldingsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNftHoldingsAsync
     *
     * Non-Fungible Token holdings
     *
     * @param  string $principal token owner&#39;s STX address or Smart Contract ID (required)
     * @param  string[] $asset_identifiers identifiers of the token asset classes to filter for (optional)
     * @param  int $limit max number of tokens to fetch (optional, default to 50)
     * @param  int $offset index of first tokens to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include tokens from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftHoldingsAsync($principal, $asset_identifiers = null, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        return $this->getNftHoldingsAsyncWithHttpInfo($principal, $asset_identifiers, $limit, $offset, $unanchored, $tx_metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNftHoldingsAsyncWithHttpInfo
     *
     * Non-Fungible Token holdings
     *
     * @param  string $principal token owner&#39;s STX address or Smart Contract ID (required)
     * @param  string[] $asset_identifiers identifiers of the token asset classes to filter for (optional)
     * @param  int $limit max number of tokens to fetch (optional, default to 50)
     * @param  int $offset index of first tokens to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include tokens from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftHoldingsAsyncWithHttpInfo($principal, $asset_identifiers = null, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenHoldingsList';
        $request = $this->getNftHoldingsRequest($principal, $asset_identifiers, $limit, $offset, $unanchored, $tx_metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNftHoldings'
     *
     * @param  string $principal token owner&#39;s STX address or Smart Contract ID (required)
     * @param  string[] $asset_identifiers identifiers of the token asset classes to filter for (optional)
     * @param  int $limit max number of tokens to fetch (optional, default to 50)
     * @param  int $offset index of first tokens to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include tokens from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNftHoldingsRequest($principal, $asset_identifiers = null, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        // verify the required parameter 'principal' is set
        if ($principal === null || (is_array($principal) && count($principal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principal when calling getNftHoldings'
            );
        }

        $resourcePath = '/extended/v1/tokens/nft/holdings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($principal !== null) {
            if('form' === 'form' && is_array($principal)) {
                foreach($principal as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['principal'] = $principal;
            }
        }
        // query params
        if ($asset_identifiers !== null) {
            if('form' === 'form' && is_array($asset_identifiers)) {
                foreach($asset_identifiers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asset_identifiers'] = $asset_identifiers;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($tx_metadata !== null) {
            if('form' === 'form' && is_array($tx_metadata)) {
                foreach($tx_metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tx_metadata'] = $tx_metadata;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNftMetadataList
     *
     * Non fungible tokens metadata list
     *
     * @param  int $limit max number of tokens to fetch (optional)
     * @param  int $offset index of first tokens to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\NonFungibleTokensMetadataList
     */
    public function getNftMetadataList($limit = null, $offset = null)
    {
        list($response) = $this->getNftMetadataListWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation getNftMetadataListWithHttpInfo
     *
     * Non fungible tokens metadata list
     *
     * @param  int $limit max number of tokens to fetch (optional)
     * @param  int $offset index of first tokens to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\NonFungibleTokensMetadataList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNftMetadataListWithHttpInfo($limit = null, $offset = null)
    {
        $request = $this->getNftMetadataListRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\NonFungibleTokensMetadataList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\NonFungibleTokensMetadataList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\NonFungibleTokensMetadataList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\NonFungibleTokensMetadataList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNftMetadataListAsync
     *
     * Non fungible tokens metadata list
     *
     * @param  int $limit max number of tokens to fetch (optional)
     * @param  int $offset index of first tokens to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftMetadataListAsync($limit = null, $offset = null)
    {
        return $this->getNftMetadataListAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNftMetadataListAsyncWithHttpInfo
     *
     * Non fungible tokens metadata list
     *
     * @param  int $limit max number of tokens to fetch (optional)
     * @param  int $offset index of first tokens to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftMetadataListAsyncWithHttpInfo($limit = null, $offset = null)
    {
        $returnType = '\StacksBlockchainApi\Model\NonFungibleTokensMetadataList';
        $request = $this->getNftMetadataListRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNftMetadataList'
     *
     * @param  int $limit max number of tokens to fetch (optional)
     * @param  int $offset index of first tokens to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNftMetadataListRequest($limit = null, $offset = null)
    {

        $resourcePath = '/extended/v1/tokens/nft/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNftMints
     *
     * Non-Fungible Token mints
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\NonFungibleTokenMintList
     */
    public function getNftMints($asset_identifier, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        list($response) = $this->getNftMintsWithHttpInfo($asset_identifier, $limit, $offset, $unanchored, $tx_metadata);
        return $response;
    }

    /**
     * Operation getNftMintsWithHttpInfo
     *
     * Non-Fungible Token mints
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\NonFungibleTokenMintList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNftMintsWithHttpInfo($asset_identifier, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $request = $this->getNftMintsRequest($asset_identifier, $limit, $offset, $unanchored, $tx_metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\NonFungibleTokenMintList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\NonFungibleTokenMintList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenMintList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\NonFungibleTokenMintList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNftMintsAsync
     *
     * Non-Fungible Token mints
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftMintsAsync($asset_identifier, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        return $this->getNftMintsAsyncWithHttpInfo($asset_identifier, $limit, $offset, $unanchored, $tx_metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNftMintsAsyncWithHttpInfo
     *
     * Non-Fungible Token mints
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNftMintsAsyncWithHttpInfo($asset_identifier, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        $returnType = '\StacksBlockchainApi\Model\NonFungibleTokenMintList';
        $request = $this->getNftMintsRequest($asset_identifier, $limit, $offset, $unanchored, $tx_metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNftMints'
     *
     * @param  string $asset_identifier token asset class identifier (required)
     * @param  int $limit max number of events to fetch (optional, default to 50)
     * @param  int $offset index of first event to fetch (optional, default to 0)
     * @param  bool $unanchored whether or not to include events from unconfirmed transactions (optional, default to false)
     * @param  bool $tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNftMintsRequest($asset_identifier, $limit = 50, $offset = 0, $unanchored = false, $tx_metadata = false)
    {
        // verify the required parameter 'asset_identifier' is set
        if ($asset_identifier === null || (is_array($asset_identifier) && count($asset_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_identifier when calling getNftMints'
            );
        }

        $resourcePath = '/extended/v1/tokens/nft/mints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($asset_identifier !== null) {
            if('form' === 'form' && is_array($asset_identifier)) {
                foreach($asset_identifier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asset_identifier'] = $asset_identifier;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }
        // query params
        if ($tx_metadata !== null) {
            if('form' === 'form' && is_array($tx_metadata)) {
                foreach($tx_metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tx_metadata'] = $tx_metadata;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
