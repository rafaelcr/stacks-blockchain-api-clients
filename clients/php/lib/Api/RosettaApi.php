<?php
/**
 * RosettaApi
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StacksBlockchainApi\ApiException;
use StacksBlockchainApi\Configuration;
use StacksBlockchainApi\HeaderSelector;
use StacksBlockchainApi\ObjectSerializer;

/**
 * RosettaApi Class Doc Comment
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RosettaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation rosettaAccountBalance
     *
     * Get an Account Balance
     *
     * @param  \StacksBlockchainApi\Model\RosettaAccountBalanceRequest $rosetta_account_balance_request rosetta_account_balance_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaAccountBalanceResponse|object
     */
    public function rosettaAccountBalance($rosetta_account_balance_request)
    {
        list($response) = $this->rosettaAccountBalanceWithHttpInfo($rosetta_account_balance_request);
        return $response;
    }

    /**
     * Operation rosettaAccountBalanceWithHttpInfo
     *
     * Get an Account Balance
     *
     * @param  \StacksBlockchainApi\Model\RosettaAccountBalanceRequest $rosetta_account_balance_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaAccountBalanceResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaAccountBalanceWithHttpInfo($rosetta_account_balance_request)
    {
        $request = $this->rosettaAccountBalanceRequest($rosetta_account_balance_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaAccountBalanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaAccountBalanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaAccountBalanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaAccountBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaAccountBalanceAsync
     *
     * Get an Account Balance
     *
     * @param  \StacksBlockchainApi\Model\RosettaAccountBalanceRequest $rosetta_account_balance_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaAccountBalanceAsync($rosetta_account_balance_request)
    {
        return $this->rosettaAccountBalanceAsyncWithHttpInfo($rosetta_account_balance_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaAccountBalanceAsyncWithHttpInfo
     *
     * Get an Account Balance
     *
     * @param  \StacksBlockchainApi\Model\RosettaAccountBalanceRequest $rosetta_account_balance_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaAccountBalanceAsyncWithHttpInfo($rosetta_account_balance_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaAccountBalanceResponse';
        $request = $this->rosettaAccountBalanceRequest($rosetta_account_balance_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaAccountBalance'
     *
     * @param  \StacksBlockchainApi\Model\RosettaAccountBalanceRequest $rosetta_account_balance_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaAccountBalanceRequest($rosetta_account_balance_request)
    {
        // verify the required parameter 'rosetta_account_balance_request' is set
        if ($rosetta_account_balance_request === null || (is_array($rosetta_account_balance_request) && count($rosetta_account_balance_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_account_balance_request when calling rosettaAccountBalance'
            );
        }

        $resourcePath = '/rosetta/v1/account/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_account_balance_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_account_balance_request));
            } else {
                $httpBody = $rosetta_account_balance_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaBlock
     *
     * Get a Block
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockRequest $rosetta_block_request rosetta_block_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaBlockResponse|object
     */
    public function rosettaBlock($rosetta_block_request)
    {
        list($response) = $this->rosettaBlockWithHttpInfo($rosetta_block_request);
        return $response;
    }

    /**
     * Operation rosettaBlockWithHttpInfo
     *
     * Get a Block
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockRequest $rosetta_block_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaBlockResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaBlockWithHttpInfo($rosetta_block_request)
    {
        $request = $this->rosettaBlockRequest($rosetta_block_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaBlockResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaBlockResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaBlockResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaBlockResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaBlockAsync
     *
     * Get a Block
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockRequest $rosetta_block_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaBlockAsync($rosetta_block_request)
    {
        return $this->rosettaBlockAsyncWithHttpInfo($rosetta_block_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaBlockAsyncWithHttpInfo
     *
     * Get a Block
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockRequest $rosetta_block_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaBlockAsyncWithHttpInfo($rosetta_block_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaBlockResponse';
        $request = $this->rosettaBlockRequest($rosetta_block_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaBlock'
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockRequest $rosetta_block_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaBlockRequest($rosetta_block_request)
    {
        // verify the required parameter 'rosetta_block_request' is set
        if ($rosetta_block_request === null || (is_array($rosetta_block_request) && count($rosetta_block_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_block_request when calling rosettaBlock'
            );
        }

        $resourcePath = '/rosetta/v1/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_block_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_block_request));
            } else {
                $httpBody = $rosetta_block_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaBlockTransaction
     *
     * Get a Block Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockTransactionRequest $rosetta_block_transaction_request rosetta_block_transaction_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaBlockTransactionResponse|object
     */
    public function rosettaBlockTransaction($rosetta_block_transaction_request)
    {
        list($response) = $this->rosettaBlockTransactionWithHttpInfo($rosetta_block_transaction_request);
        return $response;
    }

    /**
     * Operation rosettaBlockTransactionWithHttpInfo
     *
     * Get a Block Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockTransactionRequest $rosetta_block_transaction_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaBlockTransactionResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaBlockTransactionWithHttpInfo($rosetta_block_transaction_request)
    {
        $request = $this->rosettaBlockTransactionRequest($rosetta_block_transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaBlockTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaBlockTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaBlockTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaBlockTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaBlockTransactionAsync
     *
     * Get a Block Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockTransactionRequest $rosetta_block_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaBlockTransactionAsync($rosetta_block_transaction_request)
    {
        return $this->rosettaBlockTransactionAsyncWithHttpInfo($rosetta_block_transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaBlockTransactionAsyncWithHttpInfo
     *
     * Get a Block Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockTransactionRequest $rosetta_block_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaBlockTransactionAsyncWithHttpInfo($rosetta_block_transaction_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaBlockTransactionResponse';
        $request = $this->rosettaBlockTransactionRequest($rosetta_block_transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaBlockTransaction'
     *
     * @param  \StacksBlockchainApi\Model\RosettaBlockTransactionRequest $rosetta_block_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaBlockTransactionRequest($rosetta_block_transaction_request)
    {
        // verify the required parameter 'rosetta_block_transaction_request' is set
        if ($rosetta_block_transaction_request === null || (is_array($rosetta_block_transaction_request) && count($rosetta_block_transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_block_transaction_request when calling rosettaBlockTransaction'
            );
        }

        $resourcePath = '/rosetta/v1/block/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_block_transaction_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_block_transaction_request));
            } else {
                $httpBody = $rosetta_block_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionCombine
     *
     * Create Network Transaction from Signatures
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionCombineRequest $rosetta_construction_combine_request rosetta_construction_combine_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionCombineResponse|object
     */
    public function rosettaConstructionCombine($rosetta_construction_combine_request)
    {
        list($response) = $this->rosettaConstructionCombineWithHttpInfo($rosetta_construction_combine_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionCombineWithHttpInfo
     *
     * Create Network Transaction from Signatures
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionCombineRequest $rosetta_construction_combine_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionCombineResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionCombineWithHttpInfo($rosetta_construction_combine_request)
    {
        $request = $this->rosettaConstructionCombineRequest($rosetta_construction_combine_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionCombineResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionCombineResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionCombineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionCombineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionCombineAsync
     *
     * Create Network Transaction from Signatures
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionCombineRequest $rosetta_construction_combine_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionCombineAsync($rosetta_construction_combine_request)
    {
        return $this->rosettaConstructionCombineAsyncWithHttpInfo($rosetta_construction_combine_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionCombineAsyncWithHttpInfo
     *
     * Create Network Transaction from Signatures
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionCombineRequest $rosetta_construction_combine_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionCombineAsyncWithHttpInfo($rosetta_construction_combine_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionCombineResponse';
        $request = $this->rosettaConstructionCombineRequest($rosetta_construction_combine_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionCombine'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionCombineRequest $rosetta_construction_combine_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionCombineRequest($rosetta_construction_combine_request)
    {
        // verify the required parameter 'rosetta_construction_combine_request' is set
        if ($rosetta_construction_combine_request === null || (is_array($rosetta_construction_combine_request) && count($rosetta_construction_combine_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_combine_request when calling rosettaConstructionCombine'
            );
        }

        $resourcePath = '/rosetta/v1/construction/combine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_combine_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_combine_request));
            } else {
                $httpBody = $rosetta_construction_combine_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionDerive
     *
     * Derive an AccountIdentifier from a PublicKey
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionDeriveRequest $rosetta_construction_derive_request rosetta_construction_derive_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionDeriveResponse|object
     */
    public function rosettaConstructionDerive($rosetta_construction_derive_request)
    {
        list($response) = $this->rosettaConstructionDeriveWithHttpInfo($rosetta_construction_derive_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionDeriveWithHttpInfo
     *
     * Derive an AccountIdentifier from a PublicKey
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionDeriveRequest $rosetta_construction_derive_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionDeriveResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionDeriveWithHttpInfo($rosetta_construction_derive_request)
    {
        $request = $this->rosettaConstructionDeriveRequest($rosetta_construction_derive_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionDeriveResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionDeriveResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionDeriveResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionDeriveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionDeriveAsync
     *
     * Derive an AccountIdentifier from a PublicKey
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionDeriveRequest $rosetta_construction_derive_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionDeriveAsync($rosetta_construction_derive_request)
    {
        return $this->rosettaConstructionDeriveAsyncWithHttpInfo($rosetta_construction_derive_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionDeriveAsyncWithHttpInfo
     *
     * Derive an AccountIdentifier from a PublicKey
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionDeriveRequest $rosetta_construction_derive_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionDeriveAsyncWithHttpInfo($rosetta_construction_derive_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionDeriveResponse';
        $request = $this->rosettaConstructionDeriveRequest($rosetta_construction_derive_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionDerive'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionDeriveRequest $rosetta_construction_derive_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionDeriveRequest($rosetta_construction_derive_request)
    {
        // verify the required parameter 'rosetta_construction_derive_request' is set
        if ($rosetta_construction_derive_request === null || (is_array($rosetta_construction_derive_request) && count($rosetta_construction_derive_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_derive_request when calling rosettaConstructionDerive'
            );
        }

        $resourcePath = '/rosetta/v1/construction/derive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_derive_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_derive_request));
            } else {
                $httpBody = $rosetta_construction_derive_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionHash
     *
     * Get the Hash of a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionHashRequest $rosetta_construction_hash_request rosetta_construction_hash_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionHashResponse|object
     */
    public function rosettaConstructionHash($rosetta_construction_hash_request)
    {
        list($response) = $this->rosettaConstructionHashWithHttpInfo($rosetta_construction_hash_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionHashWithHttpInfo
     *
     * Get the Hash of a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionHashRequest $rosetta_construction_hash_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionHashResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionHashWithHttpInfo($rosetta_construction_hash_request)
    {
        $request = $this->rosettaConstructionHashRequest($rosetta_construction_hash_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionHashResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionHashResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionHashResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionHashResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionHashAsync
     *
     * Get the Hash of a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionHashRequest $rosetta_construction_hash_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionHashAsync($rosetta_construction_hash_request)
    {
        return $this->rosettaConstructionHashAsyncWithHttpInfo($rosetta_construction_hash_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionHashAsyncWithHttpInfo
     *
     * Get the Hash of a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionHashRequest $rosetta_construction_hash_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionHashAsyncWithHttpInfo($rosetta_construction_hash_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionHashResponse';
        $request = $this->rosettaConstructionHashRequest($rosetta_construction_hash_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionHash'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionHashRequest $rosetta_construction_hash_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionHashRequest($rosetta_construction_hash_request)
    {
        // verify the required parameter 'rosetta_construction_hash_request' is set
        if ($rosetta_construction_hash_request === null || (is_array($rosetta_construction_hash_request) && count($rosetta_construction_hash_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_hash_request when calling rosettaConstructionHash'
            );
        }

        $resourcePath = '/rosetta/v1/construction/hash';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_hash_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_hash_request));
            } else {
                $httpBody = $rosetta_construction_hash_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionMetadata
     *
     * Get Metadata for Transaction Construction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionMetadataRequest $rosetta_construction_metadata_request rosetta_construction_metadata_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionMetadataResponse|object
     */
    public function rosettaConstructionMetadata($rosetta_construction_metadata_request)
    {
        list($response) = $this->rosettaConstructionMetadataWithHttpInfo($rosetta_construction_metadata_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionMetadataWithHttpInfo
     *
     * Get Metadata for Transaction Construction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionMetadataRequest $rosetta_construction_metadata_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionMetadataResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionMetadataWithHttpInfo($rosetta_construction_metadata_request)
    {
        $request = $this->rosettaConstructionMetadataRequest($rosetta_construction_metadata_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionMetadataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionMetadataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionMetadataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionMetadataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionMetadataAsync
     *
     * Get Metadata for Transaction Construction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionMetadataRequest $rosetta_construction_metadata_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionMetadataAsync($rosetta_construction_metadata_request)
    {
        return $this->rosettaConstructionMetadataAsyncWithHttpInfo($rosetta_construction_metadata_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionMetadataAsyncWithHttpInfo
     *
     * Get Metadata for Transaction Construction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionMetadataRequest $rosetta_construction_metadata_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionMetadataAsyncWithHttpInfo($rosetta_construction_metadata_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionMetadataResponse';
        $request = $this->rosettaConstructionMetadataRequest($rosetta_construction_metadata_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionMetadata'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionMetadataRequest $rosetta_construction_metadata_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionMetadataRequest($rosetta_construction_metadata_request)
    {
        // verify the required parameter 'rosetta_construction_metadata_request' is set
        if ($rosetta_construction_metadata_request === null || (is_array($rosetta_construction_metadata_request) && count($rosetta_construction_metadata_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_metadata_request when calling rosettaConstructionMetadata'
            );
        }

        $resourcePath = '/rosetta/v1/construction/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_metadata_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_metadata_request));
            } else {
                $httpBody = $rosetta_construction_metadata_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionParse
     *
     * Parse a Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionParseRequest $rosetta_construction_parse_request rosetta_construction_parse_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionParseResponse|object
     */
    public function rosettaConstructionParse($rosetta_construction_parse_request)
    {
        list($response) = $this->rosettaConstructionParseWithHttpInfo($rosetta_construction_parse_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionParseWithHttpInfo
     *
     * Parse a Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionParseRequest $rosetta_construction_parse_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionParseResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionParseWithHttpInfo($rosetta_construction_parse_request)
    {
        $request = $this->rosettaConstructionParseRequest($rosetta_construction_parse_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionParseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionParseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionParseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionParseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionParseAsync
     *
     * Parse a Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionParseRequest $rosetta_construction_parse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionParseAsync($rosetta_construction_parse_request)
    {
        return $this->rosettaConstructionParseAsyncWithHttpInfo($rosetta_construction_parse_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionParseAsyncWithHttpInfo
     *
     * Parse a Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionParseRequest $rosetta_construction_parse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionParseAsyncWithHttpInfo($rosetta_construction_parse_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionParseResponse';
        $request = $this->rosettaConstructionParseRequest($rosetta_construction_parse_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionParse'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionParseRequest $rosetta_construction_parse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionParseRequest($rosetta_construction_parse_request)
    {
        // verify the required parameter 'rosetta_construction_parse_request' is set
        if ($rosetta_construction_parse_request === null || (is_array($rosetta_construction_parse_request) && count($rosetta_construction_parse_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_parse_request when calling rosettaConstructionParse'
            );
        }

        $resourcePath = '/rosetta/v1/construction/parse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_parse_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_parse_request));
            } else {
                $httpBody = $rosetta_construction_parse_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionPayloads
     *
     * Generate an Unsigned Transaction and Signing Payloads
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPayloadsRequest $rosetta_construction_payloads_request rosetta_construction_payloads_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionPayloadResponse|object
     */
    public function rosettaConstructionPayloads($rosetta_construction_payloads_request)
    {
        list($response) = $this->rosettaConstructionPayloadsWithHttpInfo($rosetta_construction_payloads_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionPayloadsWithHttpInfo
     *
     * Generate an Unsigned Transaction and Signing Payloads
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPayloadsRequest $rosetta_construction_payloads_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionPayloadResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionPayloadsWithHttpInfo($rosetta_construction_payloads_request)
    {
        $request = $this->rosettaConstructionPayloadsRequest($rosetta_construction_payloads_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionPayloadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionPayloadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionPayloadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionPayloadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionPayloadsAsync
     *
     * Generate an Unsigned Transaction and Signing Payloads
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPayloadsRequest $rosetta_construction_payloads_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionPayloadsAsync($rosetta_construction_payloads_request)
    {
        return $this->rosettaConstructionPayloadsAsyncWithHttpInfo($rosetta_construction_payloads_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionPayloadsAsyncWithHttpInfo
     *
     * Generate an Unsigned Transaction and Signing Payloads
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPayloadsRequest $rosetta_construction_payloads_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionPayloadsAsyncWithHttpInfo($rosetta_construction_payloads_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionPayloadResponse';
        $request = $this->rosettaConstructionPayloadsRequest($rosetta_construction_payloads_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionPayloads'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPayloadsRequest $rosetta_construction_payloads_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionPayloadsRequest($rosetta_construction_payloads_request)
    {
        // verify the required parameter 'rosetta_construction_payloads_request' is set
        if ($rosetta_construction_payloads_request === null || (is_array($rosetta_construction_payloads_request) && count($rosetta_construction_payloads_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_payloads_request when calling rosettaConstructionPayloads'
            );
        }

        $resourcePath = '/rosetta/v1/construction/payloads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_payloads_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_payloads_request));
            } else {
                $httpBody = $rosetta_construction_payloads_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionPreprocess
     *
     * Create a Request to Fetch Metadata
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPreprocessRequest $rosetta_construction_preprocess_request rosetta_construction_preprocess_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse|object
     */
    public function rosettaConstructionPreprocess($rosetta_construction_preprocess_request)
    {
        list($response) = $this->rosettaConstructionPreprocessWithHttpInfo($rosetta_construction_preprocess_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionPreprocessWithHttpInfo
     *
     * Create a Request to Fetch Metadata
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPreprocessRequest $rosetta_construction_preprocess_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionPreprocessWithHttpInfo($rosetta_construction_preprocess_request)
    {
        $request = $this->rosettaConstructionPreprocessRequest($rosetta_construction_preprocess_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionPreprocessAsync
     *
     * Create a Request to Fetch Metadata
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPreprocessRequest $rosetta_construction_preprocess_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionPreprocessAsync($rosetta_construction_preprocess_request)
    {
        return $this->rosettaConstructionPreprocessAsyncWithHttpInfo($rosetta_construction_preprocess_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionPreprocessAsyncWithHttpInfo
     *
     * Create a Request to Fetch Metadata
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPreprocessRequest $rosetta_construction_preprocess_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionPreprocessAsyncWithHttpInfo($rosetta_construction_preprocess_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionPreprocessResponse';
        $request = $this->rosettaConstructionPreprocessRequest($rosetta_construction_preprocess_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionPreprocess'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionPreprocessRequest $rosetta_construction_preprocess_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionPreprocessRequest($rosetta_construction_preprocess_request)
    {
        // verify the required parameter 'rosetta_construction_preprocess_request' is set
        if ($rosetta_construction_preprocess_request === null || (is_array($rosetta_construction_preprocess_request) && count($rosetta_construction_preprocess_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_preprocess_request when calling rosettaConstructionPreprocess'
            );
        }

        $resourcePath = '/rosetta/v1/construction/preprocess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_preprocess_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_preprocess_request));
            } else {
                $httpBody = $rosetta_construction_preprocess_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaConstructionSubmit
     *
     * Submit a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionSubmitRequest $rosetta_construction_submit_request rosetta_construction_submit_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaConstructionSubmitResponse|object
     */
    public function rosettaConstructionSubmit($rosetta_construction_submit_request)
    {
        list($response) = $this->rosettaConstructionSubmitWithHttpInfo($rosetta_construction_submit_request);
        return $response;
    }

    /**
     * Operation rosettaConstructionSubmitWithHttpInfo
     *
     * Submit a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionSubmitRequest $rosetta_construction_submit_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaConstructionSubmitResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaConstructionSubmitWithHttpInfo($rosetta_construction_submit_request)
    {
        $request = $this->rosettaConstructionSubmitRequest($rosetta_construction_submit_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaConstructionSubmitResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaConstructionSubmitResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaConstructionSubmitResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaConstructionSubmitResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaConstructionSubmitAsync
     *
     * Submit a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionSubmitRequest $rosetta_construction_submit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionSubmitAsync($rosetta_construction_submit_request)
    {
        return $this->rosettaConstructionSubmitAsyncWithHttpInfo($rosetta_construction_submit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaConstructionSubmitAsyncWithHttpInfo
     *
     * Submit a Signed Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionSubmitRequest $rosetta_construction_submit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaConstructionSubmitAsyncWithHttpInfo($rosetta_construction_submit_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaConstructionSubmitResponse';
        $request = $this->rosettaConstructionSubmitRequest($rosetta_construction_submit_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaConstructionSubmit'
     *
     * @param  \StacksBlockchainApi\Model\RosettaConstructionSubmitRequest $rosetta_construction_submit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaConstructionSubmitRequest($rosetta_construction_submit_request)
    {
        // verify the required parameter 'rosetta_construction_submit_request' is set
        if ($rosetta_construction_submit_request === null || (is_array($rosetta_construction_submit_request) && count($rosetta_construction_submit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_construction_submit_request when calling rosettaConstructionSubmit'
            );
        }

        $resourcePath = '/rosetta/v1/construction/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_construction_submit_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_construction_submit_request));
            } else {
                $httpBody = $rosetta_construction_submit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaMempool
     *
     * Get All Mempool Transactions
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolRequest $rosetta_mempool_request rosetta_mempool_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaMempoolResponse|object
     */
    public function rosettaMempool($rosetta_mempool_request)
    {
        list($response) = $this->rosettaMempoolWithHttpInfo($rosetta_mempool_request);
        return $response;
    }

    /**
     * Operation rosettaMempoolWithHttpInfo
     *
     * Get All Mempool Transactions
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolRequest $rosetta_mempool_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaMempoolResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaMempoolWithHttpInfo($rosetta_mempool_request)
    {
        $request = $this->rosettaMempoolRequest($rosetta_mempool_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaMempoolResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaMempoolResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaMempoolResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaMempoolResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaMempoolAsync
     *
     * Get All Mempool Transactions
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolRequest $rosetta_mempool_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaMempoolAsync($rosetta_mempool_request)
    {
        return $this->rosettaMempoolAsyncWithHttpInfo($rosetta_mempool_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaMempoolAsyncWithHttpInfo
     *
     * Get All Mempool Transactions
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolRequest $rosetta_mempool_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaMempoolAsyncWithHttpInfo($rosetta_mempool_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaMempoolResponse';
        $request = $this->rosettaMempoolRequest($rosetta_mempool_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaMempool'
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolRequest $rosetta_mempool_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaMempoolRequest($rosetta_mempool_request)
    {
        // verify the required parameter 'rosetta_mempool_request' is set
        if ($rosetta_mempool_request === null || (is_array($rosetta_mempool_request) && count($rosetta_mempool_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_mempool_request when calling rosettaMempool'
            );
        }

        $resourcePath = '/rosetta/v1/mempool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_mempool_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_mempool_request));
            } else {
                $httpBody = $rosetta_mempool_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaMempoolTransaction
     *
     * Get a Mempool Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolTransactionRequest $rosetta_mempool_transaction_request rosetta_mempool_transaction_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaMempoolTransactionResponse|object
     */
    public function rosettaMempoolTransaction($rosetta_mempool_transaction_request)
    {
        list($response) = $this->rosettaMempoolTransactionWithHttpInfo($rosetta_mempool_transaction_request);
        return $response;
    }

    /**
     * Operation rosettaMempoolTransactionWithHttpInfo
     *
     * Get a Mempool Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolTransactionRequest $rosetta_mempool_transaction_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaMempoolTransactionResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaMempoolTransactionWithHttpInfo($rosetta_mempool_transaction_request)
    {
        $request = $this->rosettaMempoolTransactionRequest($rosetta_mempool_transaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaMempoolTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaMempoolTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaMempoolTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaMempoolTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaMempoolTransactionAsync
     *
     * Get a Mempool Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolTransactionRequest $rosetta_mempool_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaMempoolTransactionAsync($rosetta_mempool_transaction_request)
    {
        return $this->rosettaMempoolTransactionAsyncWithHttpInfo($rosetta_mempool_transaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaMempoolTransactionAsyncWithHttpInfo
     *
     * Get a Mempool Transaction
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolTransactionRequest $rosetta_mempool_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaMempoolTransactionAsyncWithHttpInfo($rosetta_mempool_transaction_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaMempoolTransactionResponse';
        $request = $this->rosettaMempoolTransactionRequest($rosetta_mempool_transaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaMempoolTransaction'
     *
     * @param  \StacksBlockchainApi\Model\RosettaMempoolTransactionRequest $rosetta_mempool_transaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaMempoolTransactionRequest($rosetta_mempool_transaction_request)
    {
        // verify the required parameter 'rosetta_mempool_transaction_request' is set
        if ($rosetta_mempool_transaction_request === null || (is_array($rosetta_mempool_transaction_request) && count($rosetta_mempool_transaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_mempool_transaction_request when calling rosettaMempoolTransaction'
            );
        }

        $resourcePath = '/rosetta/v1/mempool/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_mempool_transaction_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_mempool_transaction_request));
            } else {
                $httpBody = $rosetta_mempool_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaNetworkList
     *
     * Get List of Available Networks
     *
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaNetworkListResponse|\StacksBlockchainApi\Model\RosettaError
     */
    public function rosettaNetworkList()
    {
        list($response) = $this->rosettaNetworkListWithHttpInfo();
        return $response;
    }

    /**
     * Operation rosettaNetworkListWithHttpInfo
     *
     * Get List of Available Networks
     *
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaNetworkListResponse|\StacksBlockchainApi\Model\RosettaError, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaNetworkListWithHttpInfo()
    {
        $request = $this->rosettaNetworkListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaNetworkListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaNetworkListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StacksBlockchainApi\Model\RosettaError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaNetworkListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaNetworkListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaNetworkListAsync
     *
     * Get List of Available Networks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkListAsync()
    {
        return $this->rosettaNetworkListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaNetworkListAsyncWithHttpInfo
     *
     * Get List of Available Networks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkListAsyncWithHttpInfo()
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaNetworkListResponse';
        $request = $this->rosettaNetworkListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaNetworkList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaNetworkListRequest()
    {

        $resourcePath = '/rosetta/v1/network/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaNetworkOptions
     *
     * Get Network Options
     *
     * @param  \StacksBlockchainApi\Model\RosettaOptionsRequest $rosetta_options_request rosetta_options_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\RosettaNetworkOptionsResponse|object
     */
    public function rosettaNetworkOptions($rosetta_options_request)
    {
        list($response) = $this->rosettaNetworkOptionsWithHttpInfo($rosetta_options_request);
        return $response;
    }

    /**
     * Operation rosettaNetworkOptionsWithHttpInfo
     *
     * Get Network Options
     *
     * @param  \StacksBlockchainApi\Model\RosettaOptionsRequest $rosetta_options_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\RosettaNetworkOptionsResponse|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaNetworkOptionsWithHttpInfo($rosetta_options_request)
    {
        $request = $this->rosettaNetworkOptionsRequest($rosetta_options_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\RosettaNetworkOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\RosettaNetworkOptionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\RosettaNetworkOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\RosettaNetworkOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaNetworkOptionsAsync
     *
     * Get Network Options
     *
     * @param  \StacksBlockchainApi\Model\RosettaOptionsRequest $rosetta_options_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkOptionsAsync($rosetta_options_request)
    {
        return $this->rosettaNetworkOptionsAsyncWithHttpInfo($rosetta_options_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaNetworkOptionsAsyncWithHttpInfo
     *
     * Get Network Options
     *
     * @param  \StacksBlockchainApi\Model\RosettaOptionsRequest $rosetta_options_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkOptionsAsyncWithHttpInfo($rosetta_options_request)
    {
        $returnType = '\StacksBlockchainApi\Model\RosettaNetworkOptionsResponse';
        $request = $this->rosettaNetworkOptionsRequest($rosetta_options_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaNetworkOptions'
     *
     * @param  \StacksBlockchainApi\Model\RosettaOptionsRequest $rosetta_options_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaNetworkOptionsRequest($rosetta_options_request)
    {
        // verify the required parameter 'rosetta_options_request' is set
        if ($rosetta_options_request === null || (is_array($rosetta_options_request) && count($rosetta_options_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_options_request when calling rosettaNetworkOptions'
            );
        }

        $resourcePath = '/rosetta/v1/network/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_options_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_options_request));
            } else {
                $httpBody = $rosetta_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rosettaNetworkStatus
     *
     * Get Network Status
     *
     * @param  \StacksBlockchainApi\Model\RosettaStatusRequest $rosetta_status_request rosetta_status_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,object>|object
     */
    public function rosettaNetworkStatus($rosetta_status_request)
    {
        list($response) = $this->rosettaNetworkStatusWithHttpInfo($rosetta_status_request);
        return $response;
    }

    /**
     * Operation rosettaNetworkStatusWithHttpInfo
     *
     * Get Network Status
     *
     * @param  \StacksBlockchainApi\Model\RosettaStatusRequest $rosetta_status_request (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,object>|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function rosettaNetworkStatusWithHttpInfo($rosetta_status_request)
    {
        $request = $this->rosettaNetworkStatusRequest($rosetta_status_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,object>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rosettaNetworkStatusAsync
     *
     * Get Network Status
     *
     * @param  \StacksBlockchainApi\Model\RosettaStatusRequest $rosetta_status_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkStatusAsync($rosetta_status_request)
    {
        return $this->rosettaNetworkStatusAsyncWithHttpInfo($rosetta_status_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rosettaNetworkStatusAsyncWithHttpInfo
     *
     * Get Network Status
     *
     * @param  \StacksBlockchainApi\Model\RosettaStatusRequest $rosetta_status_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rosettaNetworkStatusAsyncWithHttpInfo($rosetta_status_request)
    {
        $returnType = 'array<string,object>';
        $request = $this->rosettaNetworkStatusRequest($rosetta_status_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rosettaNetworkStatus'
     *
     * @param  \StacksBlockchainApi\Model\RosettaStatusRequest $rosetta_status_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rosettaNetworkStatusRequest($rosetta_status_request)
    {
        // verify the required parameter 'rosetta_status_request' is set
        if ($rosetta_status_request === null || (is_array($rosetta_status_request) && count($rosetta_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rosetta_status_request when calling rosettaNetworkStatus'
            );
        }

        $resourcePath = '/rosetta/v1/network/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rosetta_status_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rosetta_status_request));
            } else {
                $httpBody = $rosetta_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
