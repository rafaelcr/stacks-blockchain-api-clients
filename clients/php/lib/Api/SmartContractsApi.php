<?php
/**
 * SmartContractsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StacksBlockchainApi\ApiException;
use StacksBlockchainApi\Configuration;
use StacksBlockchainApi\HeaderSelector;
use StacksBlockchainApi\ObjectSerializer;

/**
 * SmartContractsApi Class Doc Comment
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SmartContractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation callReadOnlyFunction
     *
     * Call read-only function
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $function_name Function name (required)
     * @param  \StacksBlockchainApi\Model\ReadOnlyFunctionArgs $read_only_function_args read_only_function_args (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse
     */
    public function callReadOnlyFunction($contract_address, $contract_name, $function_name, $read_only_function_args, $tip = null)
    {
        list($response) = $this->callReadOnlyFunctionWithHttpInfo($contract_address, $contract_name, $function_name, $read_only_function_args, $tip);
        return $response;
    }

    /**
     * Operation callReadOnlyFunctionWithHttpInfo
     *
     * Call read-only function
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $function_name Function name (required)
     * @param  \StacksBlockchainApi\Model\ReadOnlyFunctionArgs $read_only_function_args (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function callReadOnlyFunctionWithHttpInfo($contract_address, $contract_name, $function_name, $read_only_function_args, $tip = null)
    {
        $request = $this->callReadOnlyFunctionRequest($contract_address, $contract_name, $function_name, $read_only_function_args, $tip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callReadOnlyFunctionAsync
     *
     * Call read-only function
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $function_name Function name (required)
     * @param  \StacksBlockchainApi\Model\ReadOnlyFunctionArgs $read_only_function_args (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callReadOnlyFunctionAsync($contract_address, $contract_name, $function_name, $read_only_function_args, $tip = null)
    {
        return $this->callReadOnlyFunctionAsyncWithHttpInfo($contract_address, $contract_name, $function_name, $read_only_function_args, $tip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callReadOnlyFunctionAsyncWithHttpInfo
     *
     * Call read-only function
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $function_name Function name (required)
     * @param  \StacksBlockchainApi\Model\ReadOnlyFunctionArgs $read_only_function_args (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callReadOnlyFunctionAsyncWithHttpInfo($contract_address, $contract_name, $function_name, $read_only_function_args, $tip = null)
    {
        $returnType = '\StacksBlockchainApi\Model\ReadOnlyFunctionSuccessResponse';
        $request = $this->callReadOnlyFunctionRequest($contract_address, $contract_name, $function_name, $read_only_function_args, $tip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callReadOnlyFunction'
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $function_name Function name (required)
     * @param  \StacksBlockchainApi\Model\ReadOnlyFunctionArgs $read_only_function_args (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function callReadOnlyFunctionRequest($contract_address, $contract_name, $function_name, $read_only_function_args, $tip = null)
    {
        // verify the required parameter 'contract_address' is set
        if ($contract_address === null || (is_array($contract_address) && count($contract_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_address when calling callReadOnlyFunction'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling callReadOnlyFunction'
            );
        }
        // verify the required parameter 'function_name' is set
        if ($function_name === null || (is_array($function_name) && count($function_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $function_name when calling callReadOnlyFunction'
            );
        }
        // verify the required parameter 'read_only_function_args' is set
        if ($read_only_function_args === null || (is_array($read_only_function_args) && count($read_only_function_args) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $read_only_function_args when calling callReadOnlyFunction'
            );
        }

        $resourcePath = '/v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tip !== null) {
            if('form' === 'form' && is_array($tip)) {
                foreach($tip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tip'] = $tip;
            }
        }


        // path params
        if ($contract_address !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_address' . '}',
                ObjectSerializer::toPathValue($contract_address),
                $resourcePath
            );
        }
        // path params
        if ($contract_name !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_name' . '}',
                ObjectSerializer::toPathValue($contract_name),
                $resourcePath
            );
        }
        // path params
        if ($function_name !== null) {
            $resourcePath = str_replace(
                '{' . 'function_name' . '}',
                ObjectSerializer::toPathValue($function_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($read_only_function_args)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($read_only_function_args));
            } else {
                $httpBody = $read_only_function_args;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractById
     *
     * Get contract info
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getContractById($contract_id, $unanchored = false)
    {
        list($response) = $this->getContractByIdWithHttpInfo($contract_id, $unanchored);
        return $response;
    }

    /**
     * Operation getContractByIdWithHttpInfo
     *
     * Get contract info
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractByIdWithHttpInfo($contract_id, $unanchored = false)
    {
        $request = $this->getContractByIdRequest($contract_id, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractByIdAsync
     *
     * Get contract info
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractByIdAsync($contract_id, $unanchored = false)
    {
        return $this->getContractByIdAsyncWithHttpInfo($contract_id, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractByIdAsyncWithHttpInfo
     *
     * Get contract info
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractByIdAsyncWithHttpInfo($contract_id, $unanchored = false)
    {
        $returnType = 'object';
        $request = $this->getContractByIdRequest($contract_id, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractById'
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractByIdRequest($contract_id, $unanchored = false)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getContractById'
            );
        }

        $resourcePath = '/extended/v1/contract/{contract_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractDataMapEntry
     *
     * Get specific data-map inside a contract
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $map_name Map name (required)
     * @param  string $key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param  int $proof Returns object without the proof field when set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\MapEntryResponse
     */
    public function getContractDataMapEntry($contract_address, $contract_name, $map_name, $key, $proof = null, $tip = null)
    {
        list($response) = $this->getContractDataMapEntryWithHttpInfo($contract_address, $contract_name, $map_name, $key, $proof, $tip);
        return $response;
    }

    /**
     * Operation getContractDataMapEntryWithHttpInfo
     *
     * Get specific data-map inside a contract
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $map_name Map name (required)
     * @param  string $key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param  int $proof Returns object without the proof field when set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\MapEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractDataMapEntryWithHttpInfo($contract_address, $contract_name, $map_name, $key, $proof = null, $tip = null)
    {
        $request = $this->getContractDataMapEntryRequest($contract_address, $contract_name, $map_name, $key, $proof, $tip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\MapEntryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\MapEntryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\MapEntryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\MapEntryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractDataMapEntryAsync
     *
     * Get specific data-map inside a contract
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $map_name Map name (required)
     * @param  string $key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param  int $proof Returns object without the proof field when set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractDataMapEntryAsync($contract_address, $contract_name, $map_name, $key, $proof = null, $tip = null)
    {
        return $this->getContractDataMapEntryAsyncWithHttpInfo($contract_address, $contract_name, $map_name, $key, $proof, $tip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractDataMapEntryAsyncWithHttpInfo
     *
     * Get specific data-map inside a contract
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $map_name Map name (required)
     * @param  string $key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param  int $proof Returns object without the proof field when set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractDataMapEntryAsyncWithHttpInfo($contract_address, $contract_name, $map_name, $key, $proof = null, $tip = null)
    {
        $returnType = '\StacksBlockchainApi\Model\MapEntryResponse';
        $request = $this->getContractDataMapEntryRequest($contract_address, $contract_name, $map_name, $key, $proof, $tip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractDataMapEntry'
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $map_name Map name (required)
     * @param  string $key Hex string serialization of the lookup key (which should be a Clarity value) (required)
     * @param  int $proof Returns object without the proof field when set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractDataMapEntryRequest($contract_address, $contract_name, $map_name, $key, $proof = null, $tip = null)
    {
        // verify the required parameter 'contract_address' is set
        if ($contract_address === null || (is_array($contract_address) && count($contract_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_address when calling getContractDataMapEntry'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling getContractDataMapEntry'
            );
        }
        // verify the required parameter 'map_name' is set
        if ($map_name === null || (is_array($map_name) && count($map_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $map_name when calling getContractDataMapEntry'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getContractDataMapEntry'
            );
        }

        $resourcePath = '/v2/map_entry/{contract_address}/{contract_name}/{map_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($proof !== null) {
            if('form' === 'form' && is_array($proof)) {
                foreach($proof as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proof'] = $proof;
            }
        }
        // query params
        if ($tip !== null) {
            if('form' === 'form' && is_array($tip)) {
                foreach($tip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tip'] = $tip;
            }
        }


        // path params
        if ($contract_address !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_address' . '}',
                ObjectSerializer::toPathValue($contract_address),
                $resourcePath
            );
        }
        // path params
        if ($contract_name !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_name' . '}',
                ObjectSerializer::toPathValue($contract_name),
                $resourcePath
            );
        }
        // path params
        if ($map_name !== null) {
            $resourcePath = str_replace(
                '{' . 'map_name' . '}',
                ObjectSerializer::toPathValue($map_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($key)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($key));
            } else {
                $httpBody = $key;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractEventsById
     *
     * Get contract events
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  int $limit max number of contract events to fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return AnyOfObjectObjectObjectObjectObject
     */
    public function getContractEventsById($contract_id, $limit = null, $offset = null, $unanchored = false)
    {
        list($response) = $this->getContractEventsByIdWithHttpInfo($contract_id, $limit, $offset, $unanchored);
        return $response;
    }

    /**
     * Operation getContractEventsByIdWithHttpInfo
     *
     * Get contract events
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  int $limit max number of contract events to fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of AnyOfObjectObjectObjectObjectObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractEventsByIdWithHttpInfo($contract_id, $limit = null, $offset = null, $unanchored = false)
    {
        $request = $this->getContractEventsByIdRequest($contract_id, $limit, $offset, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('AnyOfObjectObjectObjectObjectObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'AnyOfObjectObjectObjectObjectObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'AnyOfObjectObjectObjectObjectObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'AnyOfObjectObjectObjectObjectObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractEventsByIdAsync
     *
     * Get contract events
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  int $limit max number of contract events to fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractEventsByIdAsync($contract_id, $limit = null, $offset = null, $unanchored = false)
    {
        return $this->getContractEventsByIdAsyncWithHttpInfo($contract_id, $limit, $offset, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractEventsByIdAsyncWithHttpInfo
     *
     * Get contract events
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  int $limit max number of contract events to fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractEventsByIdAsyncWithHttpInfo($contract_id, $limit = null, $offset = null, $unanchored = false)
    {
        $returnType = 'AnyOfObjectObjectObjectObjectObject';
        $request = $this->getContractEventsByIdRequest($contract_id, $limit, $offset, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractEventsById'
     *
     * @param  string $contract_id Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60; (required)
     * @param  int $limit max number of contract events to fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractEventsByIdRequest($contract_id, $limit = null, $offset = null, $unanchored = false)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getContractEventsById'
            );
        }

        $resourcePath = '/extended/v1/contract/{contract_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractInterface
     *
     * Get contract interface
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\ContractInterfaceResponse
     */
    public function getContractInterface($contract_address, $contract_name, $tip = null)
    {
        list($response) = $this->getContractInterfaceWithHttpInfo($contract_address, $contract_name, $tip);
        return $response;
    }

    /**
     * Operation getContractInterfaceWithHttpInfo
     *
     * Get contract interface
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\ContractInterfaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractInterfaceWithHttpInfo($contract_address, $contract_name, $tip = null)
    {
        $request = $this->getContractInterfaceRequest($contract_address, $contract_name, $tip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\ContractInterfaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\ContractInterfaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\ContractInterfaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\ContractInterfaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractInterfaceAsync
     *
     * Get contract interface
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractInterfaceAsync($contract_address, $contract_name, $tip = null)
    {
        return $this->getContractInterfaceAsyncWithHttpInfo($contract_address, $contract_name, $tip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractInterfaceAsyncWithHttpInfo
     *
     * Get contract interface
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractInterfaceAsyncWithHttpInfo($contract_address, $contract_name, $tip = null)
    {
        $returnType = '\StacksBlockchainApi\Model\ContractInterfaceResponse';
        $request = $this->getContractInterfaceRequest($contract_address, $contract_name, $tip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractInterface'
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractInterfaceRequest($contract_address, $contract_name, $tip = null)
    {
        // verify the required parameter 'contract_address' is set
        if ($contract_address === null || (is_array($contract_address) && count($contract_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_address when calling getContractInterface'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling getContractInterface'
            );
        }

        $resourcePath = '/v2/contracts/interface/{contract_address}/{contract_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tip !== null) {
            if('form' === 'form' && is_array($tip)) {
                foreach($tip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tip'] = $tip;
            }
        }


        // path params
        if ($contract_address !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_address' . '}',
                ObjectSerializer::toPathValue($contract_address),
                $resourcePath
            );
        }
        // path params
        if ($contract_name !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_name' . '}',
                ObjectSerializer::toPathValue($contract_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractSource
     *
     * Get contract source
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\ContractSourceResponse
     */
    public function getContractSource($contract_address, $contract_name, $proof = null, $tip = null)
    {
        list($response) = $this->getContractSourceWithHttpInfo($contract_address, $contract_name, $proof, $tip);
        return $response;
    }

    /**
     * Operation getContractSourceWithHttpInfo
     *
     * Get contract source
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\ContractSourceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractSourceWithHttpInfo($contract_address, $contract_name, $proof = null, $tip = null)
    {
        $request = $this->getContractSourceRequest($contract_address, $contract_name, $proof, $tip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\ContractSourceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\ContractSourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\ContractSourceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\ContractSourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractSourceAsync
     *
     * Get contract source
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractSourceAsync($contract_address, $contract_name, $proof = null, $tip = null)
    {
        return $this->getContractSourceAsyncWithHttpInfo($contract_address, $contract_name, $proof, $tip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractSourceAsyncWithHttpInfo
     *
     * Get contract source
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractSourceAsyncWithHttpInfo($contract_address, $contract_name, $proof = null, $tip = null)
    {
        $returnType = '\StacksBlockchainApi\Model\ContractSourceResponse';
        $request = $this->getContractSourceRequest($contract_address, $contract_name, $proof, $tip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractSource'
     *
     * @param  string $contract_address Stacks address (required)
     * @param  string $contract_name Contract name (required)
     * @param  int $proof Returns object without the proof field if set to 0 (optional)
     * @param  string $tip The Stacks chain tip to query from (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractSourceRequest($contract_address, $contract_name, $proof = null, $tip = null)
    {
        // verify the required parameter 'contract_address' is set
        if ($contract_address === null || (is_array($contract_address) && count($contract_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_address when calling getContractSource'
            );
        }
        // verify the required parameter 'contract_name' is set
        if ($contract_name === null || (is_array($contract_name) && count($contract_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_name when calling getContractSource'
            );
        }

        $resourcePath = '/v2/contracts/source/{contract_address}/{contract_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($proof !== null) {
            if('form' === 'form' && is_array($proof)) {
                foreach($proof as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['proof'] = $proof;
            }
        }
        // query params
        if ($tip !== null) {
            if('form' === 'form' && is_array($tip)) {
                foreach($tip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tip'] = $tip;
            }
        }


        // path params
        if ($contract_address !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_address' . '}',
                ObjectSerializer::toPathValue($contract_address),
                $resourcePath
            );
        }
        // path params
        if ($contract_name !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_name' . '}',
                ObjectSerializer::toPathValue($contract_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContractsByTrait
     *
     * Get contracts by trait
     *
     * @param  string $trait_abi JSON abi of the trait. (required)
     * @param  int $limit max number of contracts fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\ContractListResponse
     */
    public function getContractsByTrait($trait_abi, $limit = null, $offset = null)
    {
        list($response) = $this->getContractsByTraitWithHttpInfo($trait_abi, $limit, $offset);
        return $response;
    }

    /**
     * Operation getContractsByTraitWithHttpInfo
     *
     * Get contracts by trait
     *
     * @param  string $trait_abi JSON abi of the trait. (required)
     * @param  int $limit max number of contracts fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\ContractListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractsByTraitWithHttpInfo($trait_abi, $limit = null, $offset = null)
    {
        $request = $this->getContractsByTraitRequest($trait_abi, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\ContractListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\ContractListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\ContractListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\ContractListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractsByTraitAsync
     *
     * Get contracts by trait
     *
     * @param  string $trait_abi JSON abi of the trait. (required)
     * @param  int $limit max number of contracts fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsByTraitAsync($trait_abi, $limit = null, $offset = null)
    {
        return $this->getContractsByTraitAsyncWithHttpInfo($trait_abi, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractsByTraitAsyncWithHttpInfo
     *
     * Get contracts by trait
     *
     * @param  string $trait_abi JSON abi of the trait. (required)
     * @param  int $limit max number of contracts fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsByTraitAsyncWithHttpInfo($trait_abi, $limit = null, $offset = null)
    {
        $returnType = '\StacksBlockchainApi\Model\ContractListResponse';
        $request = $this->getContractsByTraitRequest($trait_abi, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContractsByTrait'
     *
     * @param  string $trait_abi JSON abi of the trait. (required)
     * @param  int $limit max number of contracts fetch (optional)
     * @param  int $offset index of first contract event to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractsByTraitRequest($trait_abi, $limit = null, $offset = null)
    {
        // verify the required parameter 'trait_abi' is set
        if ($trait_abi === null || (is_array($trait_abi) && count($trait_abi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trait_abi when calling getContractsByTrait'
            );
        }

        $resourcePath = '/extended/v1/contract/by_trait';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($trait_abi !== null) {
            if('form' === 'form' && is_array($trait_abi)) {
                foreach($trait_abi as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['trait_abi'] = $trait_abi;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
