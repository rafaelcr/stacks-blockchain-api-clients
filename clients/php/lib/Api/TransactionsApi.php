<?php
/**
 * TransactionsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StacksBlockchainApi\ApiException;
use StacksBlockchainApi\Configuration;
use StacksBlockchainApi\HeaderSelector;
use StacksBlockchainApi\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAddressMempoolTransactions
     *
     * Transactions for address
     *
     * @param  string $address Transactions for the address (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAddressMempoolTransactions($address, $limit = null, $offset = null, $unanchored = false)
    {
        list($response) = $this->getAddressMempoolTransactionsWithHttpInfo($address, $limit, $offset, $unanchored);
        return $response;
    }

    /**
     * Operation getAddressMempoolTransactionsWithHttpInfo
     *
     * Transactions for address
     *
     * @param  string $address Transactions for the address (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddressMempoolTransactionsWithHttpInfo($address, $limit = null, $offset = null, $unanchored = false)
    {
        $request = $this->getAddressMempoolTransactionsRequest($address, $limit, $offset, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddressMempoolTransactionsAsync
     *
     * Transactions for address
     *
     * @param  string $address Transactions for the address (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressMempoolTransactionsAsync($address, $limit = null, $offset = null, $unanchored = false)
    {
        return $this->getAddressMempoolTransactionsAsyncWithHttpInfo($address, $limit, $offset, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddressMempoolTransactionsAsyncWithHttpInfo
     *
     * Transactions for address
     *
     * @param  string $address Transactions for the address (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressMempoolTransactionsAsyncWithHttpInfo($address, $limit = null, $offset = null, $unanchored = false)
    {
        $returnType = 'object';
        $request = $this->getAddressMempoolTransactionsRequest($address, $limit, $offset, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddressMempoolTransactions'
     *
     * @param  string $address Transactions for the address (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAddressMempoolTransactionsRequest($address, $limit = null, $offset = null, $unanchored = false)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling getAddressMempoolTransactions'
            );
        }

        $resourcePath = '/extended/v1/address/{address}/mempool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDroppedMempoolTransactionList
     *
     * Get dropped mempool transactions
     *
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getDroppedMempoolTransactionList($limit = 96, $offset = null)
    {
        list($response) = $this->getDroppedMempoolTransactionListWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation getDroppedMempoolTransactionListWithHttpInfo
     *
     * Get dropped mempool transactions
     *
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDroppedMempoolTransactionListWithHttpInfo($limit = 96, $offset = null)
    {
        $request = $this->getDroppedMempoolTransactionListRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDroppedMempoolTransactionListAsync
     *
     * Get dropped mempool transactions
     *
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDroppedMempoolTransactionListAsync($limit = 96, $offset = null)
    {
        return $this->getDroppedMempoolTransactionListAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDroppedMempoolTransactionListAsyncWithHttpInfo
     *
     * Get dropped mempool transactions
     *
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDroppedMempoolTransactionListAsyncWithHttpInfo($limit = 96, $offset = null)
    {
        $returnType = 'object';
        $request = $this->getDroppedMempoolTransactionListRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDroppedMempoolTransactionList'
     *
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDroppedMempoolTransactionListRequest($limit = 96, $offset = null)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransactionsApi.getDroppedMempoolTransactionList, must be smaller than or equal to 200.');
        }


        $resourcePath = '/extended/v1/tx/mempool/dropped';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMempoolTransactionList
     *
     * Get mempool transactions
     *
     * @param  string $sender_address Filter to only return transactions with this sender address. (optional)
     * @param  string $recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     * @param  string $address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\MempoolTransactionListResponse
     */
    public function getMempoolTransactionList($sender_address = null, $recipient_address = null, $address = null, $limit = 96, $offset = null, $unanchored = false)
    {
        list($response) = $this->getMempoolTransactionListWithHttpInfo($sender_address, $recipient_address, $address, $limit, $offset, $unanchored);
        return $response;
    }

    /**
     * Operation getMempoolTransactionListWithHttpInfo
     *
     * Get mempool transactions
     *
     * @param  string $sender_address Filter to only return transactions with this sender address. (optional)
     * @param  string $recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     * @param  string $address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\MempoolTransactionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMempoolTransactionListWithHttpInfo($sender_address = null, $recipient_address = null, $address = null, $limit = 96, $offset = null, $unanchored = false)
    {
        $request = $this->getMempoolTransactionListRequest($sender_address, $recipient_address, $address, $limit, $offset, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\MempoolTransactionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\MempoolTransactionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\MempoolTransactionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\MempoolTransactionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMempoolTransactionListAsync
     *
     * Get mempool transactions
     *
     * @param  string $sender_address Filter to only return transactions with this sender address. (optional)
     * @param  string $recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     * @param  string $address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMempoolTransactionListAsync($sender_address = null, $recipient_address = null, $address = null, $limit = 96, $offset = null, $unanchored = false)
    {
        return $this->getMempoolTransactionListAsyncWithHttpInfo($sender_address, $recipient_address, $address, $limit, $offset, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMempoolTransactionListAsyncWithHttpInfo
     *
     * Get mempool transactions
     *
     * @param  string $sender_address Filter to only return transactions with this sender address. (optional)
     * @param  string $recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     * @param  string $address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMempoolTransactionListAsyncWithHttpInfo($sender_address = null, $recipient_address = null, $address = null, $limit = 96, $offset = null, $unanchored = false)
    {
        $returnType = '\StacksBlockchainApi\Model\MempoolTransactionListResponse';
        $request = $this->getMempoolTransactionListRequest($sender_address, $recipient_address, $address, $limit, $offset, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMempoolTransactionList'
     *
     * @param  string $sender_address Filter to only return transactions with this sender address. (optional)
     * @param  string $recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     * @param  string $address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     * @param  int $limit max number of mempool transactions to fetch (optional, default to 96)
     * @param  int $offset index of first mempool transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMempoolTransactionListRequest($sender_address = null, $recipient_address = null, $address = null, $limit = 96, $offset = null, $unanchored = false)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransactionsApi.getMempoolTransactionList, must be smaller than or equal to 200.');
        }


        $resourcePath = '/extended/v1/tx/mempool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sender_address !== null) {
            if('form' === 'form' && is_array($sender_address)) {
                foreach($sender_address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sender_address'] = $sender_address;
            }
        }
        // query params
        if ($recipient_address !== null) {
            if('form' === 'form' && is_array($recipient_address)) {
                foreach($recipient_address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['recipient_address'] = $recipient_address;
            }
        }
        // query params
        if ($address !== null) {
            if('form' === 'form' && is_array($address)) {
                foreach($address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['address'] = $address;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRawTransactionById
     *
     * Get Raw Transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\GetRawTransactionResult
     */
    public function getRawTransactionById($tx_id)
    {
        list($response) = $this->getRawTransactionByIdWithHttpInfo($tx_id);
        return $response;
    }

    /**
     * Operation getRawTransactionByIdWithHttpInfo
     *
     * Get Raw Transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\GetRawTransactionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRawTransactionByIdWithHttpInfo($tx_id)
    {
        $request = $this->getRawTransactionByIdRequest($tx_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\GetRawTransactionResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\GetRawTransactionResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\GetRawTransactionResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\GetRawTransactionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRawTransactionByIdAsync
     *
     * Get Raw Transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawTransactionByIdAsync($tx_id)
    {
        return $this->getRawTransactionByIdAsyncWithHttpInfo($tx_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRawTransactionByIdAsyncWithHttpInfo
     *
     * Get Raw Transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawTransactionByIdAsyncWithHttpInfo($tx_id)
    {
        $returnType = '\StacksBlockchainApi\Model\GetRawTransactionResult';
        $request = $this->getRawTransactionByIdRequest($tx_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRawTransactionById'
     *
     * @param  string $tx_id Hash of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRawTransactionByIdRequest($tx_id)
    {
        // verify the required parameter 'tx_id' is set
        if ($tx_id === null || (is_array($tx_id) && count($tx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tx_id when calling getRawTransactionById'
            );
        }

        $resourcePath = '/extended/v1/tx/{tx_id}/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tx_id' . '}',
                ObjectSerializer::toPathValue($tx_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionById
     *
     * Get transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return AnyOfObjectObjectObjectObjectObject
     */
    public function getTransactionById($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        list($response) = $this->getTransactionByIdWithHttpInfo($tx_id, $event_offset, $event_limit, $unanchored);
        return $response;
    }

    /**
     * Operation getTransactionByIdWithHttpInfo
     *
     * Get transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of AnyOfObjectObjectObjectObjectObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionByIdWithHttpInfo($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        $request = $this->getTransactionByIdRequest($tx_id, $event_offset, $event_limit, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('AnyOfObjectObjectObjectObjectObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'AnyOfObjectObjectObjectObjectObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'AnyOfObjectObjectObjectObjectObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'AnyOfObjectObjectObjectObjectObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionByIdAsync
     *
     * Get transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByIdAsync($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        return $this->getTransactionByIdAsyncWithHttpInfo($tx_id, $event_offset, $event_limit, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionByIdAsyncWithHttpInfo
     *
     * Get transaction
     *
     * @param  string $tx_id Hash of transaction (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByIdAsyncWithHttpInfo($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        $returnType = 'AnyOfObjectObjectObjectObjectObject';
        $request = $this->getTransactionByIdRequest($tx_id, $event_offset, $event_limit, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionById'
     *
     * @param  string $tx_id Hash of transaction (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionByIdRequest($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        // verify the required parameter 'tx_id' is set
        if ($tx_id === null || (is_array($tx_id) && count($tx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tx_id when calling getTransactionById'
            );
        }

        $resourcePath = '/extended/v1/tx/{tx_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($event_offset !== null) {
            if('form' === 'form' && is_array($event_offset)) {
                foreach($event_offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event_offset'] = $event_offset;
            }
        }
        // query params
        if ($event_limit !== null) {
            if('form' === 'form' && is_array($event_limit)) {
                foreach($event_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event_limit'] = $event_limit;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }


        // path params
        if ($tx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tx_id' . '}',
                ObjectSerializer::toPathValue($tx_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionList
     *
     * Get recent transactions
     *
     * @param  int $limit max number of transactions to fetch (optional, default to 96)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  string[] $type Filter by transaction type (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StacksBlockchainApi\Model\TransactionResults
     */
    public function getTransactionList($limit = 96, $offset = null, $type = null, $unanchored = false)
    {
        list($response) = $this->getTransactionListWithHttpInfo($limit, $offset, $type, $unanchored);
        return $response;
    }

    /**
     * Operation getTransactionListWithHttpInfo
     *
     * Get recent transactions
     *
     * @param  int $limit max number of transactions to fetch (optional, default to 96)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  string[] $type Filter by transaction type (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StacksBlockchainApi\Model\TransactionResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionListWithHttpInfo($limit = 96, $offset = null, $type = null, $unanchored = false)
    {
        $request = $this->getTransactionListRequest($limit, $offset, $type, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StacksBlockchainApi\Model\TransactionResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\TransactionResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StacksBlockchainApi\Model\TransactionResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\TransactionResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionListAsync
     *
     * Get recent transactions
     *
     * @param  int $limit max number of transactions to fetch (optional, default to 96)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  string[] $type Filter by transaction type (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsync($limit = 96, $offset = null, $type = null, $unanchored = false)
    {
        return $this->getTransactionListAsyncWithHttpInfo($limit, $offset, $type, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionListAsyncWithHttpInfo
     *
     * Get recent transactions
     *
     * @param  int $limit max number of transactions to fetch (optional, default to 96)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  string[] $type Filter by transaction type (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsyncWithHttpInfo($limit = 96, $offset = null, $type = null, $unanchored = false)
    {
        $returnType = '\StacksBlockchainApi\Model\TransactionResults';
        $request = $this->getTransactionListRequest($limit, $offset, $type, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionList'
     *
     * @param  int $limit max number of transactions to fetch (optional, default to 96)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  string[] $type Filter by transaction type (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionListRequest($limit = 96, $offset = null, $type = null, $unanchored = false)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransactionsApi.getTransactionList, must be smaller than or equal to 200.');
        }


        $resourcePath = '/extended/v1/tx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsByBlockHash
     *
     * Transactions by block hash
     *
     * @param  string $block_hash Hash of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getTransactionsByBlockHash($block_hash, $limit = null, $offset = null)
    {
        list($response) = $this->getTransactionsByBlockHashWithHttpInfo($block_hash, $limit, $offset);
        return $response;
    }

    /**
     * Operation getTransactionsByBlockHashWithHttpInfo
     *
     * Transactions by block hash
     *
     * @param  string $block_hash Hash of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsByBlockHashWithHttpInfo($block_hash, $limit = null, $offset = null)
    {
        $request = $this->getTransactionsByBlockHashRequest($block_hash, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsByBlockHashAsync
     *
     * Transactions by block hash
     *
     * @param  string $block_hash Hash of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsByBlockHashAsync($block_hash, $limit = null, $offset = null)
    {
        return $this->getTransactionsByBlockHashAsyncWithHttpInfo($block_hash, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsByBlockHashAsyncWithHttpInfo
     *
     * Transactions by block hash
     *
     * @param  string $block_hash Hash of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsByBlockHashAsyncWithHttpInfo($block_hash, $limit = null, $offset = null)
    {
        $returnType = 'object';
        $request = $this->getTransactionsByBlockHashRequest($block_hash, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsByBlockHash'
     *
     * @param  string $block_hash Hash of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsByBlockHashRequest($block_hash, $limit = null, $offset = null)
    {
        // verify the required parameter 'block_hash' is set
        if ($block_hash === null || (is_array($block_hash) && count($block_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_hash when calling getTransactionsByBlockHash'
            );
        }

        $resourcePath = '/extended/v1/tx/block/{block_hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($block_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'block_hash' . '}',
                ObjectSerializer::toPathValue($block_hash),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsByBlockHeight
     *
     * Transactions by block height
     *
     * @param  int $height Height of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getTransactionsByBlockHeight($height, $limit = null, $offset = null, $unanchored = false)
    {
        list($response) = $this->getTransactionsByBlockHeightWithHttpInfo($height, $limit, $offset, $unanchored);
        return $response;
    }

    /**
     * Operation getTransactionsByBlockHeightWithHttpInfo
     *
     * Transactions by block height
     *
     * @param  int $height Height of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsByBlockHeightWithHttpInfo($height, $limit = null, $offset = null, $unanchored = false)
    {
        $request = $this->getTransactionsByBlockHeightRequest($height, $limit, $offset, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsByBlockHeightAsync
     *
     * Transactions by block height
     *
     * @param  int $height Height of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsByBlockHeightAsync($height, $limit = null, $offset = null, $unanchored = false)
    {
        return $this->getTransactionsByBlockHeightAsyncWithHttpInfo($height, $limit, $offset, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsByBlockHeightAsyncWithHttpInfo
     *
     * Transactions by block height
     *
     * @param  int $height Height of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsByBlockHeightAsyncWithHttpInfo($height, $limit = null, $offset = null, $unanchored = false)
    {
        $returnType = 'object';
        $request = $this->getTransactionsByBlockHeightRequest($height, $limit, $offset, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsByBlockHeight'
     *
     * @param  int $height Height of block (required)
     * @param  int $limit max number of transactions to fetch (optional)
     * @param  int $offset index of first transaction to fetch (optional)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsByBlockHeightRequest($height, $limit = null, $offset = null, $unanchored = false)
    {
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling getTransactionsByBlockHeight'
            );
        }

        $resourcePath = '/extended/v1/tx/block_height/{height}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }


        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                '{' . 'height' . '}',
                ObjectSerializer::toPathValue($height),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTxListDetails
     *
     * Get list of details for transactions
     *
     * @param  string[] $tx_id Array of transaction ids (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,AnyOfObjectObject>
     */
    public function getTxListDetails($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        list($response) = $this->getTxListDetailsWithHttpInfo($tx_id, $event_offset, $event_limit, $unanchored);
        return $response;
    }

    /**
     * Operation getTxListDetailsWithHttpInfo
     *
     * Get list of details for transactions
     *
     * @param  string[] $tx_id Array of transaction ids (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,AnyOfObjectObject>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTxListDetailsWithHttpInfo($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        $request = $this->getTxListDetailsRequest($tx_id, $event_offset, $event_limit, $unanchored);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,AnyOfObjectObject>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,AnyOfObjectObject>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,AnyOfObjectObject>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,AnyOfObjectObject>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTxListDetailsAsync
     *
     * Get list of details for transactions
     *
     * @param  string[] $tx_id Array of transaction ids (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTxListDetailsAsync($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        return $this->getTxListDetailsAsyncWithHttpInfo($tx_id, $event_offset, $event_limit, $unanchored)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTxListDetailsAsyncWithHttpInfo
     *
     * Get list of details for transactions
     *
     * @param  string[] $tx_id Array of transaction ids (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTxListDetailsAsyncWithHttpInfo($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        $returnType = 'array<string,AnyOfObjectObject>';
        $request = $this->getTxListDetailsRequest($tx_id, $event_offset, $event_limit, $unanchored);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTxListDetails'
     *
     * @param  string[] $tx_id Array of transaction ids (required)
     * @param  int $event_offset The number of events to skip (optional, default to 0)
     * @param  int $event_limit The numbers of events to return (optional, default to 96)
     * @param  bool $unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTxListDetailsRequest($tx_id, $event_offset = 0, $event_limit = 96, $unanchored = false)
    {
        // verify the required parameter 'tx_id' is set
        if ($tx_id === null || (is_array($tx_id) && count($tx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tx_id when calling getTxListDetails'
            );
        }

        $resourcePath = '/extended/v1/tx/multiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tx_id !== null) {
            if('form' === 'form' && is_array($tx_id)) {
                foreach($tx_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tx_id'] = $tx_id;
            }
        }
        // query params
        if ($event_offset !== null) {
            if('form' === 'form' && is_array($event_offset)) {
                foreach($event_offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event_offset'] = $event_offset;
            }
        }
        // query params
        if ($event_limit !== null) {
            if('form' === 'form' && is_array($event_limit)) {
                foreach($event_limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event_limit'] = $event_limit;
            }
        }
        // query params
        if ($unanchored !== null) {
            if('form' === 'form' && is_array($unanchored)) {
                foreach($unanchored as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unanchored'] = $unanchored;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCoreNodeTransactions
     *
     * Broadcast raw transaction
     *
     * @param  \SplFileObject $body body (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\StacksBlockchainApi\Model\PostCoreNodeTransactionsError
     */
    public function postCoreNodeTransactions($body = null)
    {
        list($response) = $this->postCoreNodeTransactionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postCoreNodeTransactionsWithHttpInfo
     *
     * Broadcast raw transaction
     *
     * @param  \SplFileObject $body (optional)
     *
     * @throws \StacksBlockchainApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\StacksBlockchainApi\Model\PostCoreNodeTransactionsError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCoreNodeTransactionsWithHttpInfo($body = null)
    {
        $request = $this->postCoreNodeTransactionsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StacksBlockchainApi\Model\PostCoreNodeTransactionsError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StacksBlockchainApi\Model\PostCoreNodeTransactionsError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StacksBlockchainApi\Model\PostCoreNodeTransactionsError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCoreNodeTransactionsAsync
     *
     * Broadcast raw transaction
     *
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCoreNodeTransactionsAsync($body = null)
    {
        return $this->postCoreNodeTransactionsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCoreNodeTransactionsAsyncWithHttpInfo
     *
     * Broadcast raw transaction
     *
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCoreNodeTransactionsAsyncWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->postCoreNodeTransactionsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCoreNodeTransactions'
     *
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCoreNodeTransactionsRequest($body = null)
    {

        $resourcePath = '/v2/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
