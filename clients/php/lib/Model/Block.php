<?php
/**
 * Block
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * Block Class Doc Comment
 *
 * @category Class
 * @description A block
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Block implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Block';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canonical' => 'bool',
        'height' => 'int',
        'hash' => 'string',
        'parent_block_hash' => 'string',
        'burn_block_time' => 'float',
        'burn_block_time_iso' => 'string',
        'burn_block_hash' => 'string',
        'burn_block_height' => 'int',
        'miner_txid' => 'string',
        'parent_microblock_hash' => 'string',
        'parent_microblock_sequence' => 'int',
        'txs' => 'string[]',
        'microblocks_accepted' => 'string[]',
        'microblocks_streamed' => 'string[]',
        'execution_cost_read_count' => 'int',
        'execution_cost_read_length' => 'int',
        'execution_cost_runtime' => 'int',
        'execution_cost_write_count' => 'int',
        'execution_cost_write_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canonical' => null,
        'height' => null,
        'hash' => null,
        'parent_block_hash' => null,
        'burn_block_time' => null,
        'burn_block_time_iso' => null,
        'burn_block_hash' => null,
        'burn_block_height' => null,
        'miner_txid' => null,
        'parent_microblock_hash' => null,
        'parent_microblock_sequence' => null,
        'txs' => null,
        'microblocks_accepted' => null,
        'microblocks_streamed' => null,
        'execution_cost_read_count' => null,
        'execution_cost_read_length' => null,
        'execution_cost_runtime' => null,
        'execution_cost_write_count' => null,
        'execution_cost_write_length' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canonical' => 'canonical',
        'height' => 'height',
        'hash' => 'hash',
        'parent_block_hash' => 'parent_block_hash',
        'burn_block_time' => 'burn_block_time',
        'burn_block_time_iso' => 'burn_block_time_iso',
        'burn_block_hash' => 'burn_block_hash',
        'burn_block_height' => 'burn_block_height',
        'miner_txid' => 'miner_txid',
        'parent_microblock_hash' => 'parent_microblock_hash',
        'parent_microblock_sequence' => 'parent_microblock_sequence',
        'txs' => 'txs',
        'microblocks_accepted' => 'microblocks_accepted',
        'microblocks_streamed' => 'microblocks_streamed',
        'execution_cost_read_count' => 'execution_cost_read_count',
        'execution_cost_read_length' => 'execution_cost_read_length',
        'execution_cost_runtime' => 'execution_cost_runtime',
        'execution_cost_write_count' => 'execution_cost_write_count',
        'execution_cost_write_length' => 'execution_cost_write_length'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canonical' => 'setCanonical',
        'height' => 'setHeight',
        'hash' => 'setHash',
        'parent_block_hash' => 'setParentBlockHash',
        'burn_block_time' => 'setBurnBlockTime',
        'burn_block_time_iso' => 'setBurnBlockTimeIso',
        'burn_block_hash' => 'setBurnBlockHash',
        'burn_block_height' => 'setBurnBlockHeight',
        'miner_txid' => 'setMinerTxid',
        'parent_microblock_hash' => 'setParentMicroblockHash',
        'parent_microblock_sequence' => 'setParentMicroblockSequence',
        'txs' => 'setTxs',
        'microblocks_accepted' => 'setMicroblocksAccepted',
        'microblocks_streamed' => 'setMicroblocksStreamed',
        'execution_cost_read_count' => 'setExecutionCostReadCount',
        'execution_cost_read_length' => 'setExecutionCostReadLength',
        'execution_cost_runtime' => 'setExecutionCostRuntime',
        'execution_cost_write_count' => 'setExecutionCostWriteCount',
        'execution_cost_write_length' => 'setExecutionCostWriteLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canonical' => 'getCanonical',
        'height' => 'getHeight',
        'hash' => 'getHash',
        'parent_block_hash' => 'getParentBlockHash',
        'burn_block_time' => 'getBurnBlockTime',
        'burn_block_time_iso' => 'getBurnBlockTimeIso',
        'burn_block_hash' => 'getBurnBlockHash',
        'burn_block_height' => 'getBurnBlockHeight',
        'miner_txid' => 'getMinerTxid',
        'parent_microblock_hash' => 'getParentMicroblockHash',
        'parent_microblock_sequence' => 'getParentMicroblockSequence',
        'txs' => 'getTxs',
        'microblocks_accepted' => 'getMicroblocksAccepted',
        'microblocks_streamed' => 'getMicroblocksStreamed',
        'execution_cost_read_count' => 'getExecutionCostReadCount',
        'execution_cost_read_length' => 'getExecutionCostReadLength',
        'execution_cost_runtime' => 'getExecutionCostRuntime',
        'execution_cost_write_count' => 'getExecutionCostWriteCount',
        'execution_cost_write_length' => 'getExecutionCostWriteLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canonical'] = $data['canonical'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['parent_block_hash'] = $data['parent_block_hash'] ?? null;
        $this->container['burn_block_time'] = $data['burn_block_time'] ?? null;
        $this->container['burn_block_time_iso'] = $data['burn_block_time_iso'] ?? null;
        $this->container['burn_block_hash'] = $data['burn_block_hash'] ?? null;
        $this->container['burn_block_height'] = $data['burn_block_height'] ?? null;
        $this->container['miner_txid'] = $data['miner_txid'] ?? null;
        $this->container['parent_microblock_hash'] = $data['parent_microblock_hash'] ?? null;
        $this->container['parent_microblock_sequence'] = $data['parent_microblock_sequence'] ?? null;
        $this->container['txs'] = $data['txs'] ?? null;
        $this->container['microblocks_accepted'] = $data['microblocks_accepted'] ?? null;
        $this->container['microblocks_streamed'] = $data['microblocks_streamed'] ?? null;
        $this->container['execution_cost_read_count'] = $data['execution_cost_read_count'] ?? null;
        $this->container['execution_cost_read_length'] = $data['execution_cost_read_length'] ?? null;
        $this->container['execution_cost_runtime'] = $data['execution_cost_runtime'] ?? null;
        $this->container['execution_cost_write_count'] = $data['execution_cost_write_count'] ?? null;
        $this->container['execution_cost_write_length'] = $data['execution_cost_write_length'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canonical'] === null) {
            $invalidProperties[] = "'canonical' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['parent_block_hash'] === null) {
            $invalidProperties[] = "'parent_block_hash' can't be null";
        }
        if ($this->container['burn_block_time'] === null) {
            $invalidProperties[] = "'burn_block_time' can't be null";
        }
        if ($this->container['burn_block_time_iso'] === null) {
            $invalidProperties[] = "'burn_block_time_iso' can't be null";
        }
        if ($this->container['burn_block_hash'] === null) {
            $invalidProperties[] = "'burn_block_hash' can't be null";
        }
        if ($this->container['burn_block_height'] === null) {
            $invalidProperties[] = "'burn_block_height' can't be null";
        }
        if ($this->container['miner_txid'] === null) {
            $invalidProperties[] = "'miner_txid' can't be null";
        }
        if ($this->container['parent_microblock_hash'] === null) {
            $invalidProperties[] = "'parent_microblock_hash' can't be null";
        }
        if ($this->container['parent_microblock_sequence'] === null) {
            $invalidProperties[] = "'parent_microblock_sequence' can't be null";
        }
        if ($this->container['txs'] === null) {
            $invalidProperties[] = "'txs' can't be null";
        }
        if ($this->container['microblocks_accepted'] === null) {
            $invalidProperties[] = "'microblocks_accepted' can't be null";
        }
        if ($this->container['microblocks_streamed'] === null) {
            $invalidProperties[] = "'microblocks_streamed' can't be null";
        }
        if ($this->container['execution_cost_read_count'] === null) {
            $invalidProperties[] = "'execution_cost_read_count' can't be null";
        }
        if ($this->container['execution_cost_read_length'] === null) {
            $invalidProperties[] = "'execution_cost_read_length' can't be null";
        }
        if ($this->container['execution_cost_runtime'] === null) {
            $invalidProperties[] = "'execution_cost_runtime' can't be null";
        }
        if ($this->container['execution_cost_write_count'] === null) {
            $invalidProperties[] = "'execution_cost_write_count' can't be null";
        }
        if ($this->container['execution_cost_write_length'] === null) {
            $invalidProperties[] = "'execution_cost_write_length' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canonical
     *
     * @return bool
     */
    public function getCanonical()
    {
        return $this->container['canonical'];
    }

    /**
     * Sets canonical
     *
     * @param bool $canonical Set to `true` if block corresponds to the canonical chain tip
     *
     * @return self
     */
    public function setCanonical($canonical)
    {
        $this->container['canonical'] = $canonical;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Height of the block
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash Hash representing the block
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets parent_block_hash
     *
     * @return string
     */
    public function getParentBlockHash()
    {
        return $this->container['parent_block_hash'];
    }

    /**
     * Sets parent_block_hash
     *
     * @param string $parent_block_hash Hash of the parent block
     *
     * @return self
     */
    public function setParentBlockHash($parent_block_hash)
    {
        $this->container['parent_block_hash'] = $parent_block_hash;

        return $this;
    }

    /**
     * Gets burn_block_time
     *
     * @return float
     */
    public function getBurnBlockTime()
    {
        return $this->container['burn_block_time'];
    }

    /**
     * Sets burn_block_time
     *
     * @param float $burn_block_time Unix timestamp (in seconds) indicating when this block was mined.
     *
     * @return self
     */
    public function setBurnBlockTime($burn_block_time)
    {
        $this->container['burn_block_time'] = $burn_block_time;

        return $this;
    }

    /**
     * Gets burn_block_time_iso
     *
     * @return string
     */
    public function getBurnBlockTimeIso()
    {
        return $this->container['burn_block_time_iso'];
    }

    /**
     * Sets burn_block_time_iso
     *
     * @param string $burn_block_time_iso An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined.
     *
     * @return self
     */
    public function setBurnBlockTimeIso($burn_block_time_iso)
    {
        $this->container['burn_block_time_iso'] = $burn_block_time_iso;

        return $this;
    }

    /**
     * Gets burn_block_hash
     *
     * @return string
     */
    public function getBurnBlockHash()
    {
        return $this->container['burn_block_hash'];
    }

    /**
     * Sets burn_block_hash
     *
     * @param string $burn_block_hash Hash of the anchor chain block
     *
     * @return self
     */
    public function setBurnBlockHash($burn_block_hash)
    {
        $this->container['burn_block_hash'] = $burn_block_hash;

        return $this;
    }

    /**
     * Gets burn_block_height
     *
     * @return int
     */
    public function getBurnBlockHeight()
    {
        return $this->container['burn_block_height'];
    }

    /**
     * Sets burn_block_height
     *
     * @param int $burn_block_height Height of the anchor chain block
     *
     * @return self
     */
    public function setBurnBlockHeight($burn_block_height)
    {
        $this->container['burn_block_height'] = $burn_block_height;

        return $this;
    }

    /**
     * Gets miner_txid
     *
     * @return string
     */
    public function getMinerTxid()
    {
        return $this->container['miner_txid'];
    }

    /**
     * Sets miner_txid
     *
     * @param string $miner_txid Anchor chain transaction ID
     *
     * @return self
     */
    public function setMinerTxid($miner_txid)
    {
        $this->container['miner_txid'] = $miner_txid;

        return $this;
    }

    /**
     * Gets parent_microblock_hash
     *
     * @return string
     */
    public function getParentMicroblockHash()
    {
        return $this->container['parent_microblock_hash'];
    }

    /**
     * Sets parent_microblock_hash
     *
     * @param string $parent_microblock_hash The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
     *
     * @return self
     */
    public function setParentMicroblockHash($parent_microblock_hash)
    {
        $this->container['parent_microblock_hash'] = $parent_microblock_hash;

        return $this;
    }

    /**
     * Gets parent_microblock_sequence
     *
     * @return int
     */
    public function getParentMicroblockSequence()
    {
        return $this->container['parent_microblock_sequence'];
    }

    /**
     * Sets parent_microblock_sequence
     *
     * @param int $parent_microblock_sequence The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
     *
     * @return self
     */
    public function setParentMicroblockSequence($parent_microblock_sequence)
    {
        $this->container['parent_microblock_sequence'] = $parent_microblock_sequence;

        return $this;
    }

    /**
     * Gets txs
     *
     * @return string[]
     */
    public function getTxs()
    {
        return $this->container['txs'];
    }

    /**
     * Sets txs
     *
     * @param string[] $txs List of transactions included in the block
     *
     * @return self
     */
    public function setTxs($txs)
    {
        $this->container['txs'] = $txs;

        return $this;
    }

    /**
     * Gets microblocks_accepted
     *
     * @return string[]
     */
    public function getMicroblocksAccepted()
    {
        return $this->container['microblocks_accepted'];
    }

    /**
     * Sets microblocks_accepted
     *
     * @param string[] $microblocks_accepted List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.
     *
     * @return self
     */
    public function setMicroblocksAccepted($microblocks_accepted)
    {
        $this->container['microblocks_accepted'] = $microblocks_accepted;

        return $this;
    }

    /**
     * Gets microblocks_streamed
     *
     * @return string[]
     */
    public function getMicroblocksStreamed()
    {
        return $this->container['microblocks_streamed'];
    }

    /**
     * Sets microblocks_streamed
     *
     * @param string[] $microblocks_streamed List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.
     *
     * @return self
     */
    public function setMicroblocksStreamed($microblocks_streamed)
    {
        $this->container['microblocks_streamed'] = $microblocks_streamed;

        return $this;
    }

    /**
     * Gets execution_cost_read_count
     *
     * @return int
     */
    public function getExecutionCostReadCount()
    {
        return $this->container['execution_cost_read_count'];
    }

    /**
     * Sets execution_cost_read_count
     *
     * @param int $execution_cost_read_count Execution cost read count.
     *
     * @return self
     */
    public function setExecutionCostReadCount($execution_cost_read_count)
    {
        $this->container['execution_cost_read_count'] = $execution_cost_read_count;

        return $this;
    }

    /**
     * Gets execution_cost_read_length
     *
     * @return int
     */
    public function getExecutionCostReadLength()
    {
        return $this->container['execution_cost_read_length'];
    }

    /**
     * Sets execution_cost_read_length
     *
     * @param int $execution_cost_read_length Execution cost read length.
     *
     * @return self
     */
    public function setExecutionCostReadLength($execution_cost_read_length)
    {
        $this->container['execution_cost_read_length'] = $execution_cost_read_length;

        return $this;
    }

    /**
     * Gets execution_cost_runtime
     *
     * @return int
     */
    public function getExecutionCostRuntime()
    {
        return $this->container['execution_cost_runtime'];
    }

    /**
     * Sets execution_cost_runtime
     *
     * @param int $execution_cost_runtime Execution cost runtime.
     *
     * @return self
     */
    public function setExecutionCostRuntime($execution_cost_runtime)
    {
        $this->container['execution_cost_runtime'] = $execution_cost_runtime;

        return $this;
    }

    /**
     * Gets execution_cost_write_count
     *
     * @return int
     */
    public function getExecutionCostWriteCount()
    {
        return $this->container['execution_cost_write_count'];
    }

    /**
     * Sets execution_cost_write_count
     *
     * @param int $execution_cost_write_count Execution cost write count.
     *
     * @return self
     */
    public function setExecutionCostWriteCount($execution_cost_write_count)
    {
        $this->container['execution_cost_write_count'] = $execution_cost_write_count;

        return $this;
    }

    /**
     * Gets execution_cost_write_length
     *
     * @return int
     */
    public function getExecutionCostWriteLength()
    {
        return $this->container['execution_cost_write_length'];
    }

    /**
     * Sets execution_cost_write_length
     *
     * @param int $execution_cost_write_length Execution cost write length.
     *
     * @return self
     */
    public function setExecutionCostWriteLength($execution_cost_write_length)
    {
        $this->container['execution_cost_write_length'] = $execution_cost_write_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


