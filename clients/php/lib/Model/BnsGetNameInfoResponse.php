<?php
/**
 * BnsGetNameInfoResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * BnsGetNameInfoResponse Class Doc Comment
 *
 * @category Class
 * @description Get name details
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BnsGetNameInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BnsGetNameInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'blockchain' => 'string',
        'expire_block' => 'int',
        'grace_period' => 'int',
        'last_txid' => 'string',
        'resolver' => 'string',
        'status' => 'string',
        'zonefile' => 'string',
        'zonefile_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'blockchain' => null,
        'expire_block' => null,
        'grace_period' => null,
        'last_txid' => null,
        'resolver' => null,
        'status' => null,
        'zonefile' => null,
        'zonefile_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'blockchain' => 'blockchain',
        'expire_block' => 'expire_block',
        'grace_period' => 'grace_period',
        'last_txid' => 'last_txid',
        'resolver' => 'resolver',
        'status' => 'status',
        'zonefile' => 'zonefile',
        'zonefile_hash' => 'zonefile_hash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'blockchain' => 'setBlockchain',
        'expire_block' => 'setExpireBlock',
        'grace_period' => 'setGracePeriod',
        'last_txid' => 'setLastTxid',
        'resolver' => 'setResolver',
        'status' => 'setStatus',
        'zonefile' => 'setZonefile',
        'zonefile_hash' => 'setZonefileHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'blockchain' => 'getBlockchain',
        'expire_block' => 'getExpireBlock',
        'grace_period' => 'getGracePeriod',
        'last_txid' => 'getLastTxid',
        'resolver' => 'getResolver',
        'status' => 'getStatus',
        'zonefile' => 'getZonefile',
        'zonefile_hash' => 'getZonefileHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = $data['address'] ?? null;
        $this->container['blockchain'] = $data['blockchain'] ?? null;
        $this->container['expire_block'] = $data['expire_block'] ?? null;
        $this->container['grace_period'] = $data['grace_period'] ?? null;
        $this->container['last_txid'] = $data['last_txid'] ?? null;
        $this->container['resolver'] = $data['resolver'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['zonefile'] = $data['zonefile'] ?? null;
        $this->container['zonefile_hash'] = $data['zonefile_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['blockchain'] === null) {
            $invalidProperties[] = "'blockchain' can't be null";
        }
        if (!preg_match("/^stacks$/", $this->container['blockchain'])) {
            $invalidProperties[] = "invalid value for 'blockchain', must be conform to the pattern /^stacks$/.";
        }

        if (!is_null($this->container['expire_block']) && ($this->container['expire_block'] < 0)) {
            $invalidProperties[] = "invalid value for 'expire_block', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['grace_period']) && ($this->container['grace_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'grace_period', must be bigger than or equal to 0.";
        }

        if ($this->container['last_txid'] === null) {
            $invalidProperties[] = "'last_txid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['zonefile'] === null) {
            $invalidProperties[] = "'zonefile' can't be null";
        }
        if ($this->container['zonefile_hash'] === null) {
            $invalidProperties[] = "'zonefile_hash' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets blockchain
     *
     * @return string
     */
    public function getBlockchain()
    {
        return $this->container['blockchain'];
    }

    /**
     * Sets blockchain
     *
     * @param string $blockchain blockchain
     *
     * @return self
     */
    public function setBlockchain($blockchain)
    {

        if ((!preg_match("/^stacks$/", $blockchain))) {
            throw new \InvalidArgumentException("invalid value for $blockchain when calling BnsGetNameInfoResponse., must conform to the pattern /^stacks$/.");
        }

        $this->container['blockchain'] = $blockchain;

        return $this;
    }

    /**
     * Gets expire_block
     *
     * @return int|null
     */
    public function getExpireBlock()
    {
        return $this->container['expire_block'];
    }

    /**
     * Sets expire_block
     *
     * @param int|null $expire_block expire_block
     *
     * @return self
     */
    public function setExpireBlock($expire_block)
    {

        if (!is_null($expire_block) && ($expire_block < 0)) {
            throw new \InvalidArgumentException('invalid value for $expire_block when calling BnsGetNameInfoResponse., must be bigger than or equal to 0.');
        }

        $this->container['expire_block'] = $expire_block;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int|null
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int|null $grace_period grace_period
     *
     * @return self
     */
    public function setGracePeriod($grace_period)
    {

        if (!is_null($grace_period) && ($grace_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $grace_period when calling BnsGetNameInfoResponse., must be bigger than or equal to 0.');
        }

        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets last_txid
     *
     * @return string
     */
    public function getLastTxid()
    {
        return $this->container['last_txid'];
    }

    /**
     * Sets last_txid
     *
     * @param string $last_txid last_txid
     *
     * @return self
     */
    public function setLastTxid($last_txid)
    {
        $this->container['last_txid'] = $last_txid;

        return $this;
    }

    /**
     * Gets resolver
     *
     * @return string|null
     */
    public function getResolver()
    {
        return $this->container['resolver'];
    }

    /**
     * Sets resolver
     *
     * @param string|null $resolver resolver
     *
     * @return self
     */
    public function setResolver($resolver)
    {
        $this->container['resolver'] = $resolver;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets zonefile
     *
     * @return string
     */
    public function getZonefile()
    {
        return $this->container['zonefile'];
    }

    /**
     * Sets zonefile
     *
     * @param string $zonefile zonefile
     *
     * @return self
     */
    public function setZonefile($zonefile)
    {
        $this->container['zonefile'] = $zonefile;

        return $this;
    }

    /**
     * Gets zonefile_hash
     *
     * @return string
     */
    public function getZonefileHash()
    {
        return $this->container['zonefile_hash'];
    }

    /**
     * Sets zonefile_hash
     *
     * @param string $zonefile_hash zonefile_hash
     *
     * @return self
     */
    public function setZonefileHash($zonefile_hash)
    {
        $this->container['zonefile_hash'] = $zonefile_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


