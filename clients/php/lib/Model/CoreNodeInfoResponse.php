<?php
/**
 * CoreNodeInfoResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * CoreNodeInfoResponse Class Doc Comment
 *
 * @category Class
 * @description GET request that core node information
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CoreNodeInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CoreNodeInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'peer_version' => 'int',
        'pox_consensus' => 'string',
        'burn_block_height' => 'int',
        'stable_pox_consensus' => 'string',
        'stable_burn_block_height' => 'int',
        'server_version' => 'string',
        'network_id' => 'int',
        'parent_network_id' => 'int',
        'stacks_tip_height' => 'int',
        'stacks_tip' => 'string',
        'stacks_tip_consensus_hash' => 'string',
        'unanchored_tip' => 'string',
        'exit_at_block_height' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'peer_version' => null,
        'pox_consensus' => null,
        'burn_block_height' => null,
        'stable_pox_consensus' => null,
        'stable_burn_block_height' => null,
        'server_version' => null,
        'network_id' => null,
        'parent_network_id' => null,
        'stacks_tip_height' => null,
        'stacks_tip' => null,
        'stacks_tip_consensus_hash' => null,
        'unanchored_tip' => null,
        'exit_at_block_height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'peer_version' => 'peer_version',
        'pox_consensus' => 'pox_consensus',
        'burn_block_height' => 'burn_block_height',
        'stable_pox_consensus' => 'stable_pox_consensus',
        'stable_burn_block_height' => 'stable_burn_block_height',
        'server_version' => 'server_version',
        'network_id' => 'network_id',
        'parent_network_id' => 'parent_network_id',
        'stacks_tip_height' => 'stacks_tip_height',
        'stacks_tip' => 'stacks_tip',
        'stacks_tip_consensus_hash' => 'stacks_tip_consensus_hash',
        'unanchored_tip' => 'unanchored_tip',
        'exit_at_block_height' => 'exit_at_block_height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'peer_version' => 'setPeerVersion',
        'pox_consensus' => 'setPoxConsensus',
        'burn_block_height' => 'setBurnBlockHeight',
        'stable_pox_consensus' => 'setStablePoxConsensus',
        'stable_burn_block_height' => 'setStableBurnBlockHeight',
        'server_version' => 'setServerVersion',
        'network_id' => 'setNetworkId',
        'parent_network_id' => 'setParentNetworkId',
        'stacks_tip_height' => 'setStacksTipHeight',
        'stacks_tip' => 'setStacksTip',
        'stacks_tip_consensus_hash' => 'setStacksTipConsensusHash',
        'unanchored_tip' => 'setUnanchoredTip',
        'exit_at_block_height' => 'setExitAtBlockHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'peer_version' => 'getPeerVersion',
        'pox_consensus' => 'getPoxConsensus',
        'burn_block_height' => 'getBurnBlockHeight',
        'stable_pox_consensus' => 'getStablePoxConsensus',
        'stable_burn_block_height' => 'getStableBurnBlockHeight',
        'server_version' => 'getServerVersion',
        'network_id' => 'getNetworkId',
        'parent_network_id' => 'getParentNetworkId',
        'stacks_tip_height' => 'getStacksTipHeight',
        'stacks_tip' => 'getStacksTip',
        'stacks_tip_consensus_hash' => 'getStacksTipConsensusHash',
        'unanchored_tip' => 'getUnanchoredTip',
        'exit_at_block_height' => 'getExitAtBlockHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['peer_version'] = $data['peer_version'] ?? null;
        $this->container['pox_consensus'] = $data['pox_consensus'] ?? null;
        $this->container['burn_block_height'] = $data['burn_block_height'] ?? null;
        $this->container['stable_pox_consensus'] = $data['stable_pox_consensus'] ?? null;
        $this->container['stable_burn_block_height'] = $data['stable_burn_block_height'] ?? null;
        $this->container['server_version'] = $data['server_version'] ?? null;
        $this->container['network_id'] = $data['network_id'] ?? null;
        $this->container['parent_network_id'] = $data['parent_network_id'] ?? null;
        $this->container['stacks_tip_height'] = $data['stacks_tip_height'] ?? null;
        $this->container['stacks_tip'] = $data['stacks_tip'] ?? null;
        $this->container['stacks_tip_consensus_hash'] = $data['stacks_tip_consensus_hash'] ?? null;
        $this->container['unanchored_tip'] = $data['unanchored_tip'] ?? null;
        $this->container['exit_at_block_height'] = $data['exit_at_block_height'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['peer_version'] === null) {
            $invalidProperties[] = "'peer_version' can't be null";
        }
        if ($this->container['pox_consensus'] === null) {
            $invalidProperties[] = "'pox_consensus' can't be null";
        }
        if ($this->container['burn_block_height'] === null) {
            $invalidProperties[] = "'burn_block_height' can't be null";
        }
        if ($this->container['stable_pox_consensus'] === null) {
            $invalidProperties[] = "'stable_pox_consensus' can't be null";
        }
        if ($this->container['stable_burn_block_height'] === null) {
            $invalidProperties[] = "'stable_burn_block_height' can't be null";
        }
        if ($this->container['server_version'] === null) {
            $invalidProperties[] = "'server_version' can't be null";
        }
        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['parent_network_id'] === null) {
            $invalidProperties[] = "'parent_network_id' can't be null";
        }
        if ($this->container['stacks_tip_height'] === null) {
            $invalidProperties[] = "'stacks_tip_height' can't be null";
        }
        if ($this->container['stacks_tip'] === null) {
            $invalidProperties[] = "'stacks_tip' can't be null";
        }
        if ($this->container['stacks_tip_consensus_hash'] === null) {
            $invalidProperties[] = "'stacks_tip_consensus_hash' can't be null";
        }
        if ($this->container['unanchored_tip'] === null) {
            $invalidProperties[] = "'unanchored_tip' can't be null";
        }
        if ($this->container['exit_at_block_height'] === null) {
            $invalidProperties[] = "'exit_at_block_height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets peer_version
     *
     * @return int
     */
    public function getPeerVersion()
    {
        return $this->container['peer_version'];
    }

    /**
     * Sets peer_version
     *
     * @param int $peer_version identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade
     *
     * @return self
     */
    public function setPeerVersion($peer_version)
    {
        $this->container['peer_version'] = $peer_version;

        return $this;
    }

    /**
     * Gets pox_consensus
     *
     * @return string
     */
    public function getPoxConsensus()
    {
        return $this->container['pox_consensus'];
    }

    /**
     * Sets pox_consensus
     *
     * @param string $pox_consensus is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block
     *
     * @return self
     */
    public function setPoxConsensus($pox_consensus)
    {
        $this->container['pox_consensus'] = $pox_consensus;

        return $this;
    }

    /**
     * Gets burn_block_height
     *
     * @return int
     */
    public function getBurnBlockHeight()
    {
        return $this->container['burn_block_height'];
    }

    /**
     * Sets burn_block_height
     *
     * @param int $burn_block_height latest bitcoin chain height
     *
     * @return self
     */
    public function setBurnBlockHeight($burn_block_height)
    {
        $this->container['burn_block_height'] = $burn_block_height;

        return $this;
    }

    /**
     * Gets stable_pox_consensus
     *
     * @return string
     */
    public function getStablePoxConsensus()
    {
        return $this->container['stable_pox_consensus'];
    }

    /**
     * Sets stable_pox_consensus
     *
     * @param string $stable_pox_consensus same as burn_consensus, but evaluated at stable_burn_block_height
     *
     * @return self
     */
    public function setStablePoxConsensus($stable_pox_consensus)
    {
        $this->container['stable_pox_consensus'] = $stable_pox_consensus;

        return $this;
    }

    /**
     * Gets stable_burn_block_height
     *
     * @return int
     */
    public function getStableBurnBlockHeight()
    {
        return $this->container['stable_burn_block_height'];
    }

    /**
     * Sets stable_burn_block_height
     *
     * @param int $stable_burn_block_height leftover from stacks 1.0, basically always burn_block_height - 1
     *
     * @return self
     */
    public function setStableBurnBlockHeight($stable_burn_block_height)
    {
        $this->container['stable_burn_block_height'] = $stable_burn_block_height;

        return $this;
    }

    /**
     * Gets server_version
     *
     * @return string
     */
    public function getServerVersion()
    {
        return $this->container['server_version'];
    }

    /**
     * Sets server_version
     *
     * @param string $server_version is a version descriptor
     *
     * @return self
     */
    public function setServerVersion($server_version)
    {
        $this->container['server_version'] = $server_version;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets parent_network_id
     *
     * @return int
     */
    public function getParentNetworkId()
    {
        return $this->container['parent_network_id'];
    }

    /**
     * Sets parent_network_id
     *
     * @param int $parent_network_id same as network_id, but for bitcoin
     *
     * @return self
     */
    public function setParentNetworkId($parent_network_id)
    {
        $this->container['parent_network_id'] = $parent_network_id;

        return $this;
    }

    /**
     * Gets stacks_tip_height
     *
     * @return int
     */
    public function getStacksTipHeight()
    {
        return $this->container['stacks_tip_height'];
    }

    /**
     * Sets stacks_tip_height
     *
     * @param int $stacks_tip_height the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height
     *
     * @return self
     */
    public function setStacksTipHeight($stacks_tip_height)
    {
        $this->container['stacks_tip_height'] = $stacks_tip_height;

        return $this;
    }

    /**
     * Gets stacks_tip
     *
     * @return string
     */
    public function getStacksTip()
    {
        return $this->container['stacks_tip'];
    }

    /**
     * Sets stacks_tip
     *
     * @param string $stacks_tip the best known block hash for the Stack chain (not including any pending microblocks)
     *
     * @return self
     */
    public function setStacksTip($stacks_tip)
    {
        $this->container['stacks_tip'] = $stacks_tip;

        return $this;
    }

    /**
     * Gets stacks_tip_consensus_hash
     *
     * @return string
     */
    public function getStacksTipConsensusHash()
    {
        return $this->container['stacks_tip_consensus_hash'];
    }

    /**
     * Sets stacks_tip_consensus_hash
     *
     * @param string $stacks_tip_consensus_hash the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined
     *
     * @return self
     */
    public function setStacksTipConsensusHash($stacks_tip_consensus_hash)
    {
        $this->container['stacks_tip_consensus_hash'] = $stacks_tip_consensus_hash;

        return $this;
    }

    /**
     * Gets unanchored_tip
     *
     * @return string
     */
    public function getUnanchoredTip()
    {
        return $this->container['unanchored_tip'];
    }

    /**
     * Sets unanchored_tip
     *
     * @param string $unanchored_tip the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned
     *
     * @return self
     */
    public function setUnanchoredTip($unanchored_tip)
    {
        $this->container['unanchored_tip'] = $unanchored_tip;

        return $this;
    }

    /**
     * Gets exit_at_block_height
     *
     * @return int
     */
    public function getExitAtBlockHeight()
    {
        return $this->container['exit_at_block_height'];
    }

    /**
     * Sets exit_at_block_height
     *
     * @param int $exit_at_block_height the block height at which the testnet network will be reset. not applicable for mainnet
     *
     * @return self
     */
    public function setExitAtBlockHeight($exit_at_block_height)
    {
        $this->container['exit_at_block_height'] = $exit_at_block_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


