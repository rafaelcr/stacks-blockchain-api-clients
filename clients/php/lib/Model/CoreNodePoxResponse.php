<?php
/**
 * CoreNodePoxResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * CoreNodePoxResponse Class Doc Comment
 *
 * @category Class
 * @description Get Proof of Transfer (PoX) information
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CoreNodePoxResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CoreNodePoxResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contract_id' => 'string',
        'first_burnchain_block_height' => 'int',
        'min_amount_ustx' => 'int',
        'registration_window_length' => 'int',
        'rejection_fraction' => 'int',
        'reward_cycle_id' => 'int',
        'reward_cycle_length' => 'int',
        'rejection_votes_left_required' => 'int',
        'total_liquid_supply_ustx' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contract_id' => null,
        'first_burnchain_block_height' => null,
        'min_amount_ustx' => null,
        'registration_window_length' => null,
        'rejection_fraction' => null,
        'reward_cycle_id' => null,
        'reward_cycle_length' => null,
        'rejection_votes_left_required' => null,
        'total_liquid_supply_ustx' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_id' => 'contract_id',
        'first_burnchain_block_height' => 'first_burnchain_block_height',
        'min_amount_ustx' => 'min_amount_ustx',
        'registration_window_length' => 'registration_window_length',
        'rejection_fraction' => 'rejection_fraction',
        'reward_cycle_id' => 'reward_cycle_id',
        'reward_cycle_length' => 'reward_cycle_length',
        'rejection_votes_left_required' => 'rejection_votes_left_required',
        'total_liquid_supply_ustx' => 'total_liquid_supply_ustx'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_id' => 'setContractId',
        'first_burnchain_block_height' => 'setFirstBurnchainBlockHeight',
        'min_amount_ustx' => 'setMinAmountUstx',
        'registration_window_length' => 'setRegistrationWindowLength',
        'rejection_fraction' => 'setRejectionFraction',
        'reward_cycle_id' => 'setRewardCycleId',
        'reward_cycle_length' => 'setRewardCycleLength',
        'rejection_votes_left_required' => 'setRejectionVotesLeftRequired',
        'total_liquid_supply_ustx' => 'setTotalLiquidSupplyUstx'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_id' => 'getContractId',
        'first_burnchain_block_height' => 'getFirstBurnchainBlockHeight',
        'min_amount_ustx' => 'getMinAmountUstx',
        'registration_window_length' => 'getRegistrationWindowLength',
        'rejection_fraction' => 'getRejectionFraction',
        'reward_cycle_id' => 'getRewardCycleId',
        'reward_cycle_length' => 'getRewardCycleLength',
        'rejection_votes_left_required' => 'getRejectionVotesLeftRequired',
        'total_liquid_supply_ustx' => 'getTotalLiquidSupplyUstx'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract_id'] = $data['contract_id'] ?? null;
        $this->container['first_burnchain_block_height'] = $data['first_burnchain_block_height'] ?? null;
        $this->container['min_amount_ustx'] = $data['min_amount_ustx'] ?? null;
        $this->container['registration_window_length'] = $data['registration_window_length'] ?? null;
        $this->container['rejection_fraction'] = $data['rejection_fraction'] ?? null;
        $this->container['reward_cycle_id'] = $data['reward_cycle_id'] ?? null;
        $this->container['reward_cycle_length'] = $data['reward_cycle_length'] ?? null;
        $this->container['rejection_votes_left_required'] = $data['rejection_votes_left_required'] ?? null;
        $this->container['total_liquid_supply_ustx'] = $data['total_liquid_supply_ustx'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract_id'] === null) {
            $invalidProperties[] = "'contract_id' can't be null";
        }
        if ($this->container['first_burnchain_block_height'] === null) {
            $invalidProperties[] = "'first_burnchain_block_height' can't be null";
        }
        if ($this->container['min_amount_ustx'] === null) {
            $invalidProperties[] = "'min_amount_ustx' can't be null";
        }
        if ($this->container['registration_window_length'] === null) {
            $invalidProperties[] = "'registration_window_length' can't be null";
        }
        if ($this->container['rejection_fraction'] === null) {
            $invalidProperties[] = "'rejection_fraction' can't be null";
        }
        if ($this->container['reward_cycle_id'] === null) {
            $invalidProperties[] = "'reward_cycle_id' can't be null";
        }
        if ($this->container['reward_cycle_length'] === null) {
            $invalidProperties[] = "'reward_cycle_length' can't be null";
        }
        if ($this->container['rejection_votes_left_required'] === null) {
            $invalidProperties[] = "'rejection_votes_left_required' can't be null";
        }
        if ($this->container['total_liquid_supply_ustx'] === null) {
            $invalidProperties[] = "'total_liquid_supply_ustx' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_id
     *
     * @return string
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string $contract_id contract_id
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets first_burnchain_block_height
     *
     * @return int
     */
    public function getFirstBurnchainBlockHeight()
    {
        return $this->container['first_burnchain_block_height'];
    }

    /**
     * Sets first_burnchain_block_height
     *
     * @param int $first_burnchain_block_height first_burnchain_block_height
     *
     * @return self
     */
    public function setFirstBurnchainBlockHeight($first_burnchain_block_height)
    {
        $this->container['first_burnchain_block_height'] = $first_burnchain_block_height;

        return $this;
    }

    /**
     * Gets min_amount_ustx
     *
     * @return int
     */
    public function getMinAmountUstx()
    {
        return $this->container['min_amount_ustx'];
    }

    /**
     * Sets min_amount_ustx
     *
     * @param int $min_amount_ustx min_amount_ustx
     *
     * @return self
     */
    public function setMinAmountUstx($min_amount_ustx)
    {
        $this->container['min_amount_ustx'] = $min_amount_ustx;

        return $this;
    }

    /**
     * Gets registration_window_length
     *
     * @return int
     */
    public function getRegistrationWindowLength()
    {
        return $this->container['registration_window_length'];
    }

    /**
     * Sets registration_window_length
     *
     * @param int $registration_window_length registration_window_length
     *
     * @return self
     */
    public function setRegistrationWindowLength($registration_window_length)
    {
        $this->container['registration_window_length'] = $registration_window_length;

        return $this;
    }

    /**
     * Gets rejection_fraction
     *
     * @return int
     */
    public function getRejectionFraction()
    {
        return $this->container['rejection_fraction'];
    }

    /**
     * Sets rejection_fraction
     *
     * @param int $rejection_fraction rejection_fraction
     *
     * @return self
     */
    public function setRejectionFraction($rejection_fraction)
    {
        $this->container['rejection_fraction'] = $rejection_fraction;

        return $this;
    }

    /**
     * Gets reward_cycle_id
     *
     * @return int
     */
    public function getRewardCycleId()
    {
        return $this->container['reward_cycle_id'];
    }

    /**
     * Sets reward_cycle_id
     *
     * @param int $reward_cycle_id reward_cycle_id
     *
     * @return self
     */
    public function setRewardCycleId($reward_cycle_id)
    {
        $this->container['reward_cycle_id'] = $reward_cycle_id;

        return $this;
    }

    /**
     * Gets reward_cycle_length
     *
     * @return int
     */
    public function getRewardCycleLength()
    {
        return $this->container['reward_cycle_length'];
    }

    /**
     * Sets reward_cycle_length
     *
     * @param int $reward_cycle_length reward_cycle_length
     *
     * @return self
     */
    public function setRewardCycleLength($reward_cycle_length)
    {
        $this->container['reward_cycle_length'] = $reward_cycle_length;

        return $this;
    }

    /**
     * Gets rejection_votes_left_required
     *
     * @return int
     */
    public function getRejectionVotesLeftRequired()
    {
        return $this->container['rejection_votes_left_required'];
    }

    /**
     * Sets rejection_votes_left_required
     *
     * @param int $rejection_votes_left_required rejection_votes_left_required
     *
     * @return self
     */
    public function setRejectionVotesLeftRequired($rejection_votes_left_required)
    {
        $this->container['rejection_votes_left_required'] = $rejection_votes_left_required;

        return $this;
    }

    /**
     * Gets total_liquid_supply_ustx
     *
     * @return int
     */
    public function getTotalLiquidSupplyUstx()
    {
        return $this->container['total_liquid_supply_ustx'];
    }

    /**
     * Sets total_liquid_supply_ustx
     *
     * @param int $total_liquid_supply_ustx total_liquid_supply_ustx
     *
     * @return self
     */
    public function setTotalLiquidSupplyUstx($total_liquid_supply_ustx)
    {
        $this->container['total_liquid_supply_ustx'] = $total_liquid_supply_ustx;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


