<?php
/**
 * Microblock
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * Microblock Class Doc Comment
 *
 * @category Class
 * @description A microblock
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Microblock implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Microblock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canonical' => 'bool',
        'microblock_canonical' => 'bool',
        'microblock_hash' => 'string',
        'microblock_sequence' => 'int',
        'microblock_parent_hash' => 'string',
        'block_height' => 'int',
        'parent_block_height' => 'int',
        'parent_block_hash' => 'string',
        'parent_burn_block_hash' => 'string',
        'parent_burn_block_time' => 'int',
        'parent_burn_block_time_iso' => 'string',
        'parent_burn_block_height' => 'int',
        'block_hash' => 'string',
        'txs' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canonical' => null,
        'microblock_canonical' => null,
        'microblock_hash' => null,
        'microblock_sequence' => null,
        'microblock_parent_hash' => null,
        'block_height' => null,
        'parent_block_height' => null,
        'parent_block_hash' => null,
        'parent_burn_block_hash' => null,
        'parent_burn_block_time' => null,
        'parent_burn_block_time_iso' => null,
        'parent_burn_block_height' => null,
        'block_hash' => null,
        'txs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canonical' => 'canonical',
        'microblock_canonical' => 'microblock_canonical',
        'microblock_hash' => 'microblock_hash',
        'microblock_sequence' => 'microblock_sequence',
        'microblock_parent_hash' => 'microblock_parent_hash',
        'block_height' => 'block_height',
        'parent_block_height' => 'parent_block_height',
        'parent_block_hash' => 'parent_block_hash',
        'parent_burn_block_hash' => 'parent_burn_block_hash',
        'parent_burn_block_time' => 'parent_burn_block_time',
        'parent_burn_block_time_iso' => 'parent_burn_block_time_iso',
        'parent_burn_block_height' => 'parent_burn_block_height',
        'block_hash' => 'block_hash',
        'txs' => 'txs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canonical' => 'setCanonical',
        'microblock_canonical' => 'setMicroblockCanonical',
        'microblock_hash' => 'setMicroblockHash',
        'microblock_sequence' => 'setMicroblockSequence',
        'microblock_parent_hash' => 'setMicroblockParentHash',
        'block_height' => 'setBlockHeight',
        'parent_block_height' => 'setParentBlockHeight',
        'parent_block_hash' => 'setParentBlockHash',
        'parent_burn_block_hash' => 'setParentBurnBlockHash',
        'parent_burn_block_time' => 'setParentBurnBlockTime',
        'parent_burn_block_time_iso' => 'setParentBurnBlockTimeIso',
        'parent_burn_block_height' => 'setParentBurnBlockHeight',
        'block_hash' => 'setBlockHash',
        'txs' => 'setTxs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canonical' => 'getCanonical',
        'microblock_canonical' => 'getMicroblockCanonical',
        'microblock_hash' => 'getMicroblockHash',
        'microblock_sequence' => 'getMicroblockSequence',
        'microblock_parent_hash' => 'getMicroblockParentHash',
        'block_height' => 'getBlockHeight',
        'parent_block_height' => 'getParentBlockHeight',
        'parent_block_hash' => 'getParentBlockHash',
        'parent_burn_block_hash' => 'getParentBurnBlockHash',
        'parent_burn_block_time' => 'getParentBurnBlockTime',
        'parent_burn_block_time_iso' => 'getParentBurnBlockTimeIso',
        'parent_burn_block_height' => 'getParentBurnBlockHeight',
        'block_hash' => 'getBlockHash',
        'txs' => 'getTxs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canonical'] = $data['canonical'] ?? null;
        $this->container['microblock_canonical'] = $data['microblock_canonical'] ?? null;
        $this->container['microblock_hash'] = $data['microblock_hash'] ?? null;
        $this->container['microblock_sequence'] = $data['microblock_sequence'] ?? null;
        $this->container['microblock_parent_hash'] = $data['microblock_parent_hash'] ?? null;
        $this->container['block_height'] = $data['block_height'] ?? null;
        $this->container['parent_block_height'] = $data['parent_block_height'] ?? null;
        $this->container['parent_block_hash'] = $data['parent_block_hash'] ?? null;
        $this->container['parent_burn_block_hash'] = $data['parent_burn_block_hash'] ?? null;
        $this->container['parent_burn_block_time'] = $data['parent_burn_block_time'] ?? null;
        $this->container['parent_burn_block_time_iso'] = $data['parent_burn_block_time_iso'] ?? null;
        $this->container['parent_burn_block_height'] = $data['parent_burn_block_height'] ?? null;
        $this->container['block_hash'] = $data['block_hash'] ?? null;
        $this->container['txs'] = $data['txs'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canonical'] === null) {
            $invalidProperties[] = "'canonical' can't be null";
        }
        if ($this->container['microblock_canonical'] === null) {
            $invalidProperties[] = "'microblock_canonical' can't be null";
        }
        if ($this->container['microblock_hash'] === null) {
            $invalidProperties[] = "'microblock_hash' can't be null";
        }
        if ($this->container['microblock_sequence'] === null) {
            $invalidProperties[] = "'microblock_sequence' can't be null";
        }
        if ($this->container['microblock_parent_hash'] === null) {
            $invalidProperties[] = "'microblock_parent_hash' can't be null";
        }
        if ($this->container['block_height'] === null) {
            $invalidProperties[] = "'block_height' can't be null";
        }
        if ($this->container['parent_block_height'] === null) {
            $invalidProperties[] = "'parent_block_height' can't be null";
        }
        if ($this->container['parent_block_hash'] === null) {
            $invalidProperties[] = "'parent_block_hash' can't be null";
        }
        if ($this->container['parent_burn_block_hash'] === null) {
            $invalidProperties[] = "'parent_burn_block_hash' can't be null";
        }
        if ($this->container['parent_burn_block_time'] === null) {
            $invalidProperties[] = "'parent_burn_block_time' can't be null";
        }
        if ($this->container['parent_burn_block_time_iso'] === null) {
            $invalidProperties[] = "'parent_burn_block_time_iso' can't be null";
        }
        if ($this->container['parent_burn_block_height'] === null) {
            $invalidProperties[] = "'parent_burn_block_height' can't be null";
        }
        if ($this->container['block_hash'] === null) {
            $invalidProperties[] = "'block_hash' can't be null";
        }
        if ($this->container['txs'] === null) {
            $invalidProperties[] = "'txs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canonical
     *
     * @return bool
     */
    public function getCanonical()
    {
        return $this->container['canonical'];
    }

    /**
     * Sets canonical
     *
     * @param bool $canonical Set to `true` if the microblock corresponds to the canonical chain tip.
     *
     * @return self
     */
    public function setCanonical($canonical)
    {
        $this->container['canonical'] = $canonical;

        return $this;
    }

    /**
     * Gets microblock_canonical
     *
     * @return bool
     */
    public function getMicroblockCanonical()
    {
        return $this->container['microblock_canonical'];
    }

    /**
     * Sets microblock_canonical
     *
     * @param bool $microblock_canonical Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created.
     *
     * @return self
     */
    public function setMicroblockCanonical($microblock_canonical)
    {
        $this->container['microblock_canonical'] = $microblock_canonical;

        return $this;
    }

    /**
     * Gets microblock_hash
     *
     * @return string
     */
    public function getMicroblockHash()
    {
        return $this->container['microblock_hash'];
    }

    /**
     * Sets microblock_hash
     *
     * @param string $microblock_hash The SHA512/256 hash of this microblock.
     *
     * @return self
     */
    public function setMicroblockHash($microblock_hash)
    {
        $this->container['microblock_hash'] = $microblock_hash;

        return $this;
    }

    /**
     * Gets microblock_sequence
     *
     * @return int
     */
    public function getMicroblockSequence()
    {
        return $this->container['microblock_sequence'];
    }

    /**
     * Sets microblock_sequence
     *
     * @param int $microblock_sequence A hint to describe how to order a set of microblocks. Starts at 0.
     *
     * @return self
     */
    public function setMicroblockSequence($microblock_sequence)
    {
        $this->container['microblock_sequence'] = $microblock_sequence;

        return $this;
    }

    /**
     * Gets microblock_parent_hash
     *
     * @return string
     */
    public function getMicroblockParentHash()
    {
        return $this->container['microblock_parent_hash'];
    }

    /**
     * Sets microblock_parent_hash
     *
     * @param string $microblock_parent_hash The SHA512/256 hash of the previous signed microblock in this stream.
     *
     * @return self
     */
    public function setMicroblockParentHash($microblock_parent_hash)
    {
        $this->container['microblock_parent_hash'] = $microblock_parent_hash;

        return $this;
    }

    /**
     * Gets block_height
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param int $block_height The anchor block height that confirmed this microblock.
     *
     * @return self
     */
    public function setBlockHeight($block_height)
    {
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets parent_block_height
     *
     * @return int
     */
    public function getParentBlockHeight()
    {
        return $this->container['parent_block_height'];
    }

    /**
     * Sets parent_block_height
     *
     * @param int $parent_block_height The height of the anchor block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBlockHeight($parent_block_height)
    {
        $this->container['parent_block_height'] = $parent_block_height;

        return $this;
    }

    /**
     * Gets parent_block_hash
     *
     * @return string
     */
    public function getParentBlockHash()
    {
        return $this->container['parent_block_hash'];
    }

    /**
     * Sets parent_block_hash
     *
     * @param string $parent_block_hash The hash of the anchor block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBlockHash($parent_block_hash)
    {
        $this->container['parent_block_hash'] = $parent_block_hash;

        return $this;
    }

    /**
     * Gets parent_burn_block_hash
     *
     * @return string
     */
    public function getParentBurnBlockHash()
    {
        return $this->container['parent_burn_block_hash'];
    }

    /**
     * Sets parent_burn_block_hash
     *
     * @param string $parent_burn_block_hash The hash of the Bitcoin block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBurnBlockHash($parent_burn_block_hash)
    {
        $this->container['parent_burn_block_hash'] = $parent_burn_block_hash;

        return $this;
    }

    /**
     * Gets parent_burn_block_time
     *
     * @return int
     */
    public function getParentBurnBlockTime()
    {
        return $this->container['parent_burn_block_time'];
    }

    /**
     * Sets parent_burn_block_time
     *
     * @param int $parent_burn_block_time The block timestamp of the Bitcoin block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBurnBlockTime($parent_burn_block_time)
    {
        $this->container['parent_burn_block_time'] = $parent_burn_block_time;

        return $this;
    }

    /**
     * Gets parent_burn_block_time_iso
     *
     * @return string
     */
    public function getParentBurnBlockTimeIso()
    {
        return $this->container['parent_burn_block_time_iso'];
    }

    /**
     * Sets parent_burn_block_time_iso
     *
     * @param string $parent_burn_block_time_iso The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBurnBlockTimeIso($parent_burn_block_time_iso)
    {
        $this->container['parent_burn_block_time_iso'] = $parent_burn_block_time_iso;

        return $this;
    }

    /**
     * Gets parent_burn_block_height
     *
     * @return int
     */
    public function getParentBurnBlockHeight()
    {
        return $this->container['parent_burn_block_height'];
    }

    /**
     * Sets parent_burn_block_height
     *
     * @param int $parent_burn_block_height The height of the Bitcoin block that preceded this microblock.
     *
     * @return self
     */
    public function setParentBurnBlockHeight($parent_burn_block_height)
    {
        $this->container['parent_burn_block_height'] = $parent_burn_block_height;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string $block_hash The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets txs
     *
     * @return string[]
     */
    public function getTxs()
    {
        return $this->container['txs'];
    }

    /**
     * Sets txs
     *
     * @param string[] $txs List of transactions included in the microblock
     *
     * @return self
     */
    public function setTxs($txs)
    {
        $this->container['txs'] = $txs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


