<?php
/**
 * RosettaOptions
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stacks Blockchain API
 *
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: v3.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StacksBlockchainApi\Model;

use \ArrayAccess;
use \StacksBlockchainApi\ObjectSerializer;

/**
 * RosettaOptions Class Doc Comment
 *
 * @category Class
 * @description The options that will be sent directly to /construction/metadata by the caller.
 * @package  StacksBlockchainApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RosettaOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RosettaOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sender_address' => 'string',
        'type' => 'string',
        'status' => 'mixed',
        'token_transfer_recipient_address' => 'string',
        'amount' => 'string',
        'symbol' => 'string',
        'decimals' => 'int',
        'gas_limit' => 'float',
        'gas_price' => 'float',
        'suggested_fee_multiplier' => 'float',
        'max_fee' => 'string',
        'fee' => 'string',
        'size' => 'int',
        'memo' => 'string',
        'number_of_cycles' => 'int',
        'contract_address' => 'string',
        'contract_name' => 'string',
        'burn_block_height' => 'int',
        'delegate_to' => 'string',
        'pox_addr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sender_address' => null,
        'type' => null,
        'status' => null,
        'token_transfer_recipient_address' => null,
        'amount' => null,
        'symbol' => null,
        'decimals' => null,
        'gas_limit' => null,
        'gas_price' => null,
        'suggested_fee_multiplier' => null,
        'max_fee' => null,
        'fee' => null,
        'size' => null,
        'memo' => null,
        'number_of_cycles' => null,
        'contract_address' => null,
        'contract_name' => null,
        'burn_block_height' => null,
        'delegate_to' => null,
        'pox_addr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sender_address' => 'sender_address',
        'type' => 'type',
        'status' => 'status',
        'token_transfer_recipient_address' => 'token_transfer_recipient_address',
        'amount' => 'amount',
        'symbol' => 'symbol',
        'decimals' => 'decimals',
        'gas_limit' => 'gas_limit',
        'gas_price' => 'gas_price',
        'suggested_fee_multiplier' => 'suggested_fee_multiplier',
        'max_fee' => 'max_fee',
        'fee' => 'fee',
        'size' => 'size',
        'memo' => 'memo',
        'number_of_cycles' => 'number_of_cycles',
        'contract_address' => 'contract_address',
        'contract_name' => 'contract_name',
        'burn_block_height' => 'burn_block_height',
        'delegate_to' => 'delegate_to',
        'pox_addr' => 'pox_addr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sender_address' => 'setSenderAddress',
        'type' => 'setType',
        'status' => 'setStatus',
        'token_transfer_recipient_address' => 'setTokenTransferRecipientAddress',
        'amount' => 'setAmount',
        'symbol' => 'setSymbol',
        'decimals' => 'setDecimals',
        'gas_limit' => 'setGasLimit',
        'gas_price' => 'setGasPrice',
        'suggested_fee_multiplier' => 'setSuggestedFeeMultiplier',
        'max_fee' => 'setMaxFee',
        'fee' => 'setFee',
        'size' => 'setSize',
        'memo' => 'setMemo',
        'number_of_cycles' => 'setNumberOfCycles',
        'contract_address' => 'setContractAddress',
        'contract_name' => 'setContractName',
        'burn_block_height' => 'setBurnBlockHeight',
        'delegate_to' => 'setDelegateTo',
        'pox_addr' => 'setPoxAddr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sender_address' => 'getSenderAddress',
        'type' => 'getType',
        'status' => 'getStatus',
        'token_transfer_recipient_address' => 'getTokenTransferRecipientAddress',
        'amount' => 'getAmount',
        'symbol' => 'getSymbol',
        'decimals' => 'getDecimals',
        'gas_limit' => 'getGasLimit',
        'gas_price' => 'getGasPrice',
        'suggested_fee_multiplier' => 'getSuggestedFeeMultiplier',
        'max_fee' => 'getMaxFee',
        'fee' => 'getFee',
        'size' => 'getSize',
        'memo' => 'getMemo',
        'number_of_cycles' => 'getNumberOfCycles',
        'contract_address' => 'getContractAddress',
        'contract_name' => 'getContractName',
        'burn_block_height' => 'getBurnBlockHeight',
        'delegate_to' => 'getDelegateTo',
        'pox_addr' => 'getPoxAddr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sender_address'] = $data['sender_address'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token_transfer_recipient_address'] = $data['token_transfer_recipient_address'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['decimals'] = $data['decimals'] ?? null;
        $this->container['gas_limit'] = $data['gas_limit'] ?? null;
        $this->container['gas_price'] = $data['gas_price'] ?? null;
        $this->container['suggested_fee_multiplier'] = $data['suggested_fee_multiplier'] ?? null;
        $this->container['max_fee'] = $data['max_fee'] ?? null;
        $this->container['fee'] = $data['fee'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['number_of_cycles'] = $data['number_of_cycles'] ?? null;
        $this->container['contract_address'] = $data['contract_address'] ?? null;
        $this->container['contract_name'] = $data['contract_name'] ?? null;
        $this->container['burn_block_height'] = $data['burn_block_height'] ?? null;
        $this->container['delegate_to'] = $data['delegate_to'] ?? null;
        $this->container['pox_addr'] = $data['pox_addr'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sender_address
     *
     * @return string|null
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     *
     * @param string|null $sender_address sender's address
     *
     * @return self
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of operation e.g transfer
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status This value indicates the state of the operations
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token_transfer_recipient_address
     *
     * @return string|null
     */
    public function getTokenTransferRecipientAddress()
    {
        return $this->container['token_transfer_recipient_address'];
    }

    /**
     * Sets token_transfer_recipient_address
     *
     * @param string|null $token_transfer_recipient_address Recipient's address
     *
     * @return self
     */
    public function setTokenTransferRecipientAddress($token_transfer_recipient_address)
    {
        $this->container['token_transfer_recipient_address'] = $token_transfer_recipient_address;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount Amount to be transfered.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Currency symbol e.g STX
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets decimals
     *
     * @return int|null
     */
    public function getDecimals()
    {
        return $this->container['decimals'];
    }

    /**
     * Sets decimals
     *
     * @param int|null $decimals Number of decimal places
     *
     * @return self
     */
    public function setDecimals($decimals)
    {
        $this->container['decimals'] = $decimals;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return float|null
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param float|null $gas_limit Maximum price a user is willing to pay.
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_price
     *
     * @return float|null
     */
    public function getGasPrice()
    {
        return $this->container['gas_price'];
    }

    /**
     * Sets gas_price
     *
     * @param float|null $gas_price Cost necessary to perform a transaction on the network
     *
     * @return self
     */
    public function setGasPrice($gas_price)
    {
        $this->container['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Gets suggested_fee_multiplier
     *
     * @return float|null
     */
    public function getSuggestedFeeMultiplier()
    {
        return $this->container['suggested_fee_multiplier'];
    }

    /**
     * Sets suggested_fee_multiplier
     *
     * @param float|null $suggested_fee_multiplier A suggested fee multiplier to indicate that the suggested fee should be scaled. This may be used to set higher fees for urgent transactions or to pay lower fees when there is less urgency.
     *
     * @return self
     */
    public function setSuggestedFeeMultiplier($suggested_fee_multiplier)
    {
        $this->container['suggested_fee_multiplier'] = $suggested_fee_multiplier;

        return $this;
    }

    /**
     * Gets max_fee
     *
     * @return string|null
     */
    public function getMaxFee()
    {
        return $this->container['max_fee'];
    }

    /**
     * Sets max_fee
     *
     * @param string|null $max_fee Maximum fee user is willing to pay
     *
     * @return self
     */
    public function setMaxFee($max_fee)
    {
        $this->container['max_fee'] = $max_fee;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string|null $fee Fee for this transaction
     *
     * @return self
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Transaction approximative size (used to calculate total fee).
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo STX token transfer memo.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets number_of_cycles
     *
     * @return int|null
     */
    public function getNumberOfCycles()
    {
        return $this->container['number_of_cycles'];
    }

    /**
     * Sets number_of_cycles
     *
     * @param int|null $number_of_cycles Number of cycles when stacking.
     *
     * @return self
     */
    public function setNumberOfCycles($number_of_cycles)
    {
        $this->container['number_of_cycles'] = $number_of_cycles;

        return $this;
    }

    /**
     * Gets contract_address
     *
     * @return string|null
     */
    public function getContractAddress()
    {
        return $this->container['contract_address'];
    }

    /**
     * Sets contract_address
     *
     * @param string|null $contract_address Address of the contract to call.
     *
     * @return self
     */
    public function setContractAddress($contract_address)
    {
        $this->container['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Gets contract_name
     *
     * @return string|null
     */
    public function getContractName()
    {
        return $this->container['contract_name'];
    }

    /**
     * Sets contract_name
     *
     * @param string|null $contract_name Name of the contract to call.
     *
     * @return self
     */
    public function setContractName($contract_name)
    {
        $this->container['contract_name'] = $contract_name;

        return $this;
    }

    /**
     * Gets burn_block_height
     *
     * @return int|null
     */
    public function getBurnBlockHeight()
    {
        return $this->container['burn_block_height'];
    }

    /**
     * Sets burn_block_height
     *
     * @param int|null $burn_block_height Set the burnchain (BTC) block for stacking lock to start.
     *
     * @return self
     */
    public function setBurnBlockHeight($burn_block_height)
    {
        $this->container['burn_block_height'] = $burn_block_height;

        return $this;
    }

    /**
     * Gets delegate_to
     *
     * @return string|null
     */
    public function getDelegateTo()
    {
        return $this->container['delegate_to'];
    }

    /**
     * Sets delegate_to
     *
     * @param string|null $delegate_to Delegator address for when calling `delegate-stacking`.
     *
     * @return self
     */
    public function setDelegateTo($delegate_to)
    {
        $this->container['delegate_to'] = $delegate_to;

        return $this;
    }

    /**
     * Gets pox_addr
     *
     * @return string|null
     */
    public function getPoxAddr()
    {
        return $this->container['pox_addr'];
    }

    /**
     * Sets pox_addr
     *
     * @param string|null $pox_addr The reward address for stacking transaction. It should be a valid Bitcoin address
     *
     * @return self
     */
    public function setPoxAddr($pox_addr)
    {
        $this->container['pox_addr'] = $pox_addr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


