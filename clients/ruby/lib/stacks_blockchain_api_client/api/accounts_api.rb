=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get account assets
    # Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account assets to fetch
    # @option opts [Integer] :offset index of first account assets to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state at that point in time, rather than the current block.
    # @return [AddressAssetsListResponse]
    def get_account_assets(principal, opts = {})
      data, _status_code, _headers = get_account_assets_with_http_info(principal, opts)
      data
    end

    # Get account assets
    # Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account assets to fetch
    # @option opts [Integer] :offset index of first account assets to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state at that point in time, rather than the current block.
    # @return [Array<(AddressAssetsListResponse, Integer, Hash)>] AddressAssetsListResponse data, response status code and response headers
    def get_account_assets_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_assets ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_assets"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/assets'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressAssetsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_assets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account balances
    # Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [AddressBalanceResponse]
    def get_account_balance(principal, opts = {})
      data, _status_code, _headers = get_account_balance_with_http_info(principal, opts)
      data
    end

    # Get account balances
    # Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(AddressBalanceResponse, Integer, Hash)>] AddressBalanceResponse data, response status code and response headers
    def get_account_balance_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_balance ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_balance"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/balances'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressBalanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get inbound STX transfers
    # Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit number of items to return
    # @option opts [Integer] :offset number of items to skip
    # @option opts [Float] :height Filter for transfers only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [AddressStxInboundListResponse]
    def get_account_inbound(principal, opts = {})
      data, _status_code, _headers = get_account_inbound_with_http_info(principal, opts)
      data
    end

    # Get inbound STX transfers
    # Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the &#x60;send-many-memo&#x60; bulk sending contract. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit number of items to return
    # @option opts [Integer] :offset number of items to skip
    # @option opts [Float] :height Filter for transfers only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(AddressStxInboundListResponse, Integer, Hash)>] AddressStxInboundListResponse data, response status code and response headers
    def get_account_inbound_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_inbound ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_inbound"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/stx_inbound'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressStxInboundListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_inbound",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_inbound\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account info
    # Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field if set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [AccountDataResponse]
    def get_account_info(principal, opts = {})
      data, _status_code, _headers = get_account_info_with_http_info(principal, opts)
      data
    end

    # Get account info
    # Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field if set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [Array<(AccountDataResponse, Integer, Hash)>] AccountDataResponse data, response status code and response headers
    def get_account_info_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_info ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_info"
      end
      # resource path
      local_var_path = '/v2/accounts/{principal}'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'proof'] = opts[:'proof'] if !opts[:'proof'].nil?
      query_params[:'tip'] = opts[:'tip'] if !opts[:'tip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get nft events
    # **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit number of items to return
    # @option opts [Integer] :offset number of items to skip
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [AddressNftListResponse]
    def get_account_nft(principal, opts = {})
      data, _status_code, _headers = get_account_nft_with_http_info(principal, opts)
      data
    end

    # Get nft events
    # **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit number of items to return
    # @option opts [Integer] :offset number of items to skip
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(AddressNftListResponse, Integer, Hash)>] AddressNftListResponse data, response status code and response headers
    def get_account_nft_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_nft ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_nft"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/nft_events'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressNftListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_nft",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_nft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest nonce used by an account
    # Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
    # @param principal [String] Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :block_height Optionally get the nonce at a given block height
    # @option opts [String] :block_hash Optionally get the nonce at a given block hash
    # @return [AddressNonces]
    def get_account_nonces(principal, opts = {})
      data, _status_code, _headers = get_account_nonces_with_http_info(principal, opts)
      data
    end

    # Get the latest nonce used by an account
    # Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
    # @param principal [String] Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :block_height Optionally get the nonce at a given block height
    # @option opts [String] :block_hash Optionally get the nonce at a given block hash
    # @return [Array<(AddressNonces, Integer, Hash)>] AddressNonces data, response status code and response headers
    def get_account_nonces_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_nonces ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_nonces"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/nonces'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'block_height'] = opts[:'block_height'] if !opts[:'block_height'].nil?
      query_params[:'block_hash'] = opts[:'block_hash'] if !opts[:'block_hash'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressNonces'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_nonces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_nonces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account STX balance
    # Retrieves STX token balance for a given Address or Contract Identifier.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Object]
    def get_account_stx_balance(principal, opts = {})
      data, _status_code, _headers = get_account_stx_balance_with_http_info(principal, opts)
      data
    end

    # Get account STX balance
    # Retrieves STX token balance for a given Address or Contract Identifier.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_account_stx_balance_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_stx_balance ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_stx_balance"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/stx'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_stx_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_stx_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account transactions
    # Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account transactions to fetch
    # @option opts [Integer] :offset index of first account transaction to fetch
    # @option opts [Float] :height Filter for transactions only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [AddressTransactionsListResponse]
    def get_account_transactions(principal, opts = {})
      data, _status_code, _headers = get_account_transactions_with_http_info(principal, opts)
      data
    end

    # Get account transactions
    # Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account transactions to fetch
    # @option opts [Integer] :offset index of first account transaction to fetch
    # @option opts [Float] :height Filter for transactions only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(AddressTransactionsListResponse, Integer, Hash)>] AddressTransactionsListResponse data, response status code and response headers
    def get_account_transactions_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_transactions ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_transactions"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/transactions'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressTransactionsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account transactions including STX transfers for each transaction.
    # Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account transactions to fetch
    # @option opts [Integer] :offset index of first account transaction to fetch
    # @option opts [Float] :height Filter for transactions only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [AddressTransactionsWithTransfersListResponse]
    def get_account_transactions_with_transfers(principal, opts = {})
      data, _status_code, _headers = get_account_transactions_with_transfers_with_http_info(principal, opts)
      data
    end

    # Get account transactions including STX transfers for each transaction.
    # Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
    # @param principal [String] Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of account transactions to fetch
    # @option opts [Integer] :offset index of first account transaction to fetch
    # @option opts [Float] :height Filter for transactions only at this given block height
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @option opts [String] :until_block returned data representing the state up until that point in time, rather than the current block.
    # @return [Array<(AddressTransactionsWithTransfersListResponse, Integer, Hash)>] AddressTransactionsWithTransfersListResponse data, response status code and response headers
    def get_account_transactions_with_transfers_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_transactions_with_transfers ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_account_transactions_with_transfers"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/transactions_with_transfers'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'until_block'] = opts[:'until_block'] if !opts[:'until_block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressTransactionsWithTransfersListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_transactions_with_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_transactions_with_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account transaction information for specific transaction
    # Retrieves transaction details for a given Transcation Id `tx_id`, for a given account or contract Identifier.
    # @param principal [String] Stacks address or a contract identifier
    # @param tx_id [String] Transaction id
    # @param [Hash] opts the optional parameters
    # @return [AddressTransactionWithTransfers]
    def get_single_transaction_with_transfers(principal, tx_id, opts = {})
      data, _status_code, _headers = get_single_transaction_with_transfers_with_http_info(principal, tx_id, opts)
      data
    end

    # Get account transaction information for specific transaction
    # Retrieves transaction details for a given Transcation Id &#x60;tx_id&#x60;, for a given account or contract Identifier.
    # @param principal [String] Stacks address or a contract identifier
    # @param tx_id [String] Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressTransactionWithTransfers, Integer, Hash)>] AddressTransactionWithTransfers data, response status code and response headers
    def get_single_transaction_with_transfers_with_http_info(principal, tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_single_transaction_with_transfers ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling AccountsApi.get_single_transaction_with_transfers"
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling AccountsApi.get_single_transaction_with_transfers"
      end
      # resource path
      local_var_path = '/extended/v1/address/{principal}/{tx_id}/with_transfers'.sub('{' + 'principal' + '}', CGI.escape(principal.to_s)).sub('{' + 'tx_id' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressTransactionWithTransfers'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccountsApi.get_single_transaction_with_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_single_transaction_with_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
