=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class FeesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # fetch fee rate
    # Retrieves estimated fee rate.
    # @param fee_rate_request [FeeRateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FeeRate]
    def fetch_fee_rate(fee_rate_request, opts = {})
      data, _status_code, _headers = fetch_fee_rate_with_http_info(fee_rate_request, opts)
      data
    end

    # fetch fee rate
    # Retrieves estimated fee rate.
    # @param fee_rate_request [FeeRateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeRate, Integer, Hash)>] FeeRate data, response status code and response headers
    def fetch_fee_rate_with_http_info(fee_rate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesApi.fetch_fee_rate ...'
      end
      # verify the required parameter 'fee_rate_request' is set
      if @api_client.config.client_side_validation && fee_rate_request.nil?
        fail ArgumentError, "Missing the required parameter 'fee_rate_request' when calling FeesApi.fetch_fee_rate"
      end
      # resource path
      local_var_path = '/extended/v1/fee_rate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_rate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeRate'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FeesApi.fetch_fee_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesApi#fetch_fee_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get estimated fee
    # Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_fee_transfer(opts = {})
      data, _status_code, _headers = get_fee_transfer_with_http_info(opts)
      data
    end

    # Get estimated fee
    # Retrieves an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_fee_transfer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesApi.get_fee_transfer ...'
      end
      # resource path
      local_var_path = '/v2/fees/transfer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FeesApi.get_fee_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesApi#get_fee_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
