=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class FungibleTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fungible tokens metadata for contract id
    # Retrieves the metadata for fungible tokens for a given contract id
    # @param contract_id [String] token&#39;s contract id
    # @param [Hash] opts the optional parameters
    # @return [FungibleTokenMetadata]
    def get_contract_ft_metadata(contract_id, opts = {})
      data, _status_code, _headers = get_contract_ft_metadata_with_http_info(contract_id, opts)
      data
    end

    # Fungible tokens metadata for contract id
    # Retrieves the metadata for fungible tokens for a given contract id
    # @param contract_id [String] token&#39;s contract id
    # @param [Hash] opts the optional parameters
    # @return [Array<(FungibleTokenMetadata, Integer, Hash)>] FungibleTokenMetadata data, response status code and response headers
    def get_contract_ft_metadata_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FungibleTokensApi.get_contract_ft_metadata ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling FungibleTokensApi.get_contract_ft_metadata"
      end
      # resource path
      local_var_path = '/extended/v1/tokens/{contractId}/ft/metadata'.sub('{' + 'contractId' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FungibleTokenMetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FungibleTokensApi.get_contract_ft_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FungibleTokensApi#get_contract_ft_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fungible tokens metadata list
    # Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of tokens to fetch
    # @option opts [Integer] :offset index of first tokens to fetch
    # @return [FungibleTokensMetadataList]
    def get_ft_metadata_list(opts = {})
      data, _status_code, _headers = get_ft_metadata_list_with_http_info(opts)
      data
    end

    # Fungible tokens metadata list
    # Retrieves list of fungible tokens with their metadata. More information on Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#fungible-tokens).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of tokens to fetch
    # @option opts [Integer] :offset index of first tokens to fetch
    # @return [Array<(FungibleTokensMetadataList, Integer, Hash)>] FungibleTokensMetadataList data, response status code and response headers
    def get_ft_metadata_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FungibleTokensApi.get_ft_metadata_list ...'
      end
      # resource path
      local_var_path = '/extended/v1/tokens/ft/metadata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FungibleTokensMetadataList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FungibleTokensApi.get_ft_metadata_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FungibleTokensApi#get_ft_metadata_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
