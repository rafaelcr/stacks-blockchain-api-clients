=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class InfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Core API info
    # Retrieves information about the Core API including the server version
    # @param [Hash] opts the optional parameters
    # @return [CoreNodeInfoResponse]
    def get_core_api_info(opts = {})
      data, _status_code, _headers = get_core_api_info_with_http_info(opts)
      data
    end

    # Get Core API info
    # Retrieves information about the Core API including the server version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreNodeInfoResponse, Integer, Hash)>] CoreNodeInfoResponse data, response status code and response headers
    def get_core_api_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_core_api_info ...'
      end
      # resource path
      local_var_path = '/v2/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreNodeInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_core_api_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_core_api_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a given network's target block time
    # Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
    # @param network [String] Which network to retrieve the target block time of
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_network_block_time_by_network(network, opts = {})
      data, _status_code, _headers = get_network_block_time_by_network_with_http_info(network, opts)
      data
    end

    # Get a given network&#39;s target block time
    # Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
    # @param network [String] Which network to retrieve the target block time of
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_network_block_time_by_network_with_http_info(network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_network_block_time_by_network ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling InfoApi.get_network_block_time_by_network"
      end
      # verify enum value
      allowable_values = ["testnet", "mainnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/extended/v1/info/network_block_time/{network}'.sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_network_block_time_by_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_network_block_time_by_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the network target block time
    # Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
    # @param [Hash] opts the optional parameters
    # @return [NetworkBlockTimesResponse]
    def get_network_block_times(opts = {})
      data, _status_code, _headers = get_network_block_times_with_http_info(opts)
      data
    end

    # Get the network target block time
    # Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkBlockTimesResponse, Integer, Hash)>] NetworkBlockTimesResponse data, response status code and response headers
    def get_network_block_times_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_network_block_times ...'
      end
      # resource path
      local_var_path = '/extended/v1/info/network_block_times'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkBlockTimesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_network_block_times",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_network_block_times\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Proof-of-Transfer details
    # Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
    # @param [Hash] opts the optional parameters
    # @return [CoreNodePoxResponse]
    def get_pox_info(opts = {})
      data, _status_code, _headers = get_pox_info_with_http_info(opts)
      data
    end

    # Get Proof-of-Transfer details
    # Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoreNodePoxResponse, Integer, Hash)>] CoreNodePoxResponse data, response status code and response headers
    def get_pox_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_pox_info ...'
      end
      # resource path
      local_var_path = '/v2/pox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoreNodePoxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_pox_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_pox_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # API status
    # Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
    # @param [Hash] opts the optional parameters
    # @return [ServerStatusResponse]
    def get_status(opts = {})
      data, _status_code, _headers = get_status_with_http_info(opts)
      data
    end

    # API status
    # Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerStatusResponse, Integer, Hash)>] ServerStatusResponse data, response status code and response headers
    def get_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_status ...'
      end
      # resource path
      local_var_path = '/extended/v1/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get total and unlocked STX supply
    # Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The block height at which to query supply details from, if not provided then the latest block height is used
    # @return [GetStxSupplyResponse]
    def get_stx_supply(opts = {})
      data, _status_code, _headers = get_stx_supply_with_http_info(opts)
      data
    end

    # Get total and unlocked STX supply
    # Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The block height at which to query supply details from, if not provided then the latest block height is used
    # @return [Array<(GetStxSupplyResponse, Integer, Hash)>] GetStxSupplyResponse data, response status code and response headers
    def get_stx_supply_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_stx_supply ...'
      end
      # resource path
      local_var_path = '/extended/v1/stx_supply'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStxSupplyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_stx_supply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_stx_supply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get circulating STX supply in plain text format
    # Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_stx_supply_circulating_plain(opts = {})
      data, _status_code, _headers = get_stx_supply_circulating_plain_with_http_info(opts)
      data
    end

    # Get circulating STX supply in plain text format
    # Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_stx_supply_circulating_plain_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_stx_supply_circulating_plain ...'
      end
      # resource path
      local_var_path = '/extended/v1/stx_supply/circulating/plain'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_stx_supply_circulating_plain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_stx_supply_circulating_plain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get total STX supply in plain text format
    # Retrieves the total supply for STX tokens as plain text.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_stx_supply_total_supply_plain(opts = {})
      data, _status_code, _headers = get_stx_supply_total_supply_plain_with_http_info(opts)
      data
    end

    # Get total STX supply in plain text format
    # Retrieves the total supply for STX tokens as plain text.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_stx_supply_total_supply_plain_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_stx_supply_total_supply_plain ...'
      end
      # resource path
      local_var_path = '/extended/v1/stx_supply/total/plain'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_stx_supply_total_supply_plain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_stx_supply_total_supply_plain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
    # Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The block height at which to query supply details from, if not provided then the latest block height is used
    # @return [GetStxSupplyLegacyFormatResponse]
    def get_total_stx_supply_legacy_format(opts = {})
      data, _status_code, _headers = get_total_stx_supply_legacy_format_with_http_info(opts)
      data
    end

    # Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
    # Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The block height at which to query supply details from, if not provided then the latest block height is used
    # @return [Array<(GetStxSupplyLegacyFormatResponse, Integer, Hash)>] GetStxSupplyLegacyFormatResponse data, response status code and response headers
    def get_total_stx_supply_legacy_format_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoApi.get_total_stx_supply_legacy_format ...'
      end
      # resource path
      local_var_path = '/extended/v1/stx_supply/legacy_format'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStxSupplyLegacyFormatResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"InfoApi.get_total_stx_supply_legacy_format",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoApi#get_total_stx_supply_legacy_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
