=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class NamesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Zone File
    # Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
    # @param name [String] fully-qualified name
    # @param [Hash] opts the optional parameters
    # @return [AnyOfobjectobject]
    def fetch_zone_file(name, opts = {})
      data, _status_code, _headers = fetch_zone_file_with_http_info(name, opts)
      data
    end

    # Get Zone File
    # Retrieves a user’s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
    # @param name [String] fully-qualified name
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyOfobjectobject, Integer, Hash)>] AnyOfobjectobject data, response status code and response headers
    def fetch_zone_file_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.fetch_zone_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling NamesApi.fetch_zone_file"
      end
      # resource path
      local_var_path = '/v1/names/{name}/zonefile'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnyOfobjectobject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.fetch_zone_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#fetch_zone_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Names
    # Retrieves a list of all names known to the node.
    # @param page [Integer] names are returned in pages of size 100, so specify the page number.
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_all_names(page, opts = {})
      data, _status_code, _headers = get_all_names_with_http_info(page, opts)
      data
    end

    # Get All Names
    # Retrieves a list of all names known to the node.
    # @param page [Integer] names are returned in pages of size 100, so specify the page number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_all_names_with_http_info(page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_all_names ...'
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling NamesApi.get_all_names"
      end
      # resource path
      local_var_path = '/v1/names'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = page

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_all_names",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_all_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Namespaces
    # Retrieves a list of all namespaces known to the node.
    # @param [Hash] opts the optional parameters
    # @return [BnsGetAllNamespacesResponse]
    def get_all_namespaces(opts = {})
      data, _status_code, _headers = get_all_namespaces_with_http_info(opts)
      data
    end

    # Get All Namespaces
    # Retrieves a list of all namespaces known to the node.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BnsGetAllNamespacesResponse, Integer, Hash)>] BnsGetAllNamespacesResponse data, response status code and response headers
    def get_all_namespaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_all_namespaces ...'
      end
      # resource path
      local_var_path = '/v1/namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BnsGetAllNamespacesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_all_namespaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_all_namespaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Historical Zone File
    # Retrieves the historical zonefile specified by the username and zone hash.
    # @param name [String] fully-qualified name
    # @param zone_file_hash [String] zone file hash
    # @param [Hash] opts the optional parameters
    # @return [AnyOfobjectobject]
    def get_historical_zone_file(name, zone_file_hash, opts = {})
      data, _status_code, _headers = get_historical_zone_file_with_http_info(name, zone_file_hash, opts)
      data
    end

    # Get Historical Zone File
    # Retrieves the historical zonefile specified by the username and zone hash.
    # @param name [String] fully-qualified name
    # @param zone_file_hash [String] zone file hash
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyOfobjectobject, Integer, Hash)>] AnyOfobjectobject data, response status code and response headers
    def get_historical_zone_file_with_http_info(name, zone_file_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_historical_zone_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling NamesApi.get_historical_zone_file"
      end
      # verify the required parameter 'zone_file_hash' is set
      if @api_client.config.client_side_validation && zone_file_hash.nil?
        fail ArgumentError, "Missing the required parameter 'zone_file_hash' when calling NamesApi.get_historical_zone_file"
      end
      # resource path
      local_var_path = '/v1/names/{name}/zonefile/{zoneFileHash}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'zoneFileHash' + '}', CGI.escape(zone_file_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnyOfobjectobject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_historical_zone_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_historical_zone_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Name History
    # Retrieves a history of all blockchain records of a registered name.
    # @param name [String] name to query
    # @param page [Integer] the page (in 20-entry pages) of the history to fetch
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_name_history(name, page, opts = {})
      data, _status_code, _headers = get_name_history_with_http_info(name, page, opts)
      data
    end

    # Get Name History
    # Retrieves a history of all blockchain records of a registered name.
    # @param name [String] name to query
    # @param page [Integer] the page (in 20-entry pages) of the history to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_name_history_with_http_info(name, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_name_history ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling NamesApi.get_name_history"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling NamesApi.get_name_history"
      end
      # resource path
      local_var_path = '/v1/names/{name}/history'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = page

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_name_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_name_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Name Details
    # Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
    # @param name [String] fully-qualified name
    # @param [Hash] opts the optional parameters
    # @return [BnsGetNameInfoResponse]
    def get_name_info(name, opts = {})
      data, _status_code, _headers = get_name_info_with_http_info(name, opts)
      data
    end

    # Get Name Details
    # Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
    # @param name [String] fully-qualified name
    # @param [Hash] opts the optional parameters
    # @return [Array<(BnsGetNameInfoResponse, Integer, Hash)>] BnsGetNameInfoResponse data, response status code and response headers
    def get_name_info_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_name_info ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling NamesApi.get_name_info"
      end
      # resource path
      local_var_path = '/v1/names/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BnsGetNameInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_name_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_name_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Name Price
    # Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
    # @param name [String] the name to query price information for
    # @param [Hash] opts the optional parameters
    # @return [BnsGetNamePriceResponse]
    def get_name_price(name, opts = {})
      data, _status_code, _headers = get_name_price_with_http_info(name, opts)
      data
    end

    # Get Name Price
    # Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
    # @param name [String] the name to query price information for
    # @param [Hash] opts the optional parameters
    # @return [Array<(BnsGetNamePriceResponse, Integer, Hash)>] BnsGetNamePriceResponse data, response status code and response headers
    def get_name_price_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_name_price ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling NamesApi.get_name_price"
      end
      # resource path
      local_var_path = '/v2/prices/names/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BnsGetNamePriceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_name_price",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_name_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Names Owned by Address
    # Retrieves a list of names owned by the address provided.
    # @param blockchain [String] the layer-1 blockchain for the address
    # @param address [String] the address to lookup
    # @param [Hash] opts the optional parameters
    # @return [BnsNamesOwnByAddressResponse]
    def get_names_owned_by_address(blockchain, address, opts = {})
      data, _status_code, _headers = get_names_owned_by_address_with_http_info(blockchain, address, opts)
      data
    end

    # Get Names Owned by Address
    # Retrieves a list of names owned by the address provided.
    # @param blockchain [String] the layer-1 blockchain for the address
    # @param address [String] the address to lookup
    # @param [Hash] opts the optional parameters
    # @return [Array<(BnsNamesOwnByAddressResponse, Integer, Hash)>] BnsNamesOwnByAddressResponse data, response status code and response headers
    def get_names_owned_by_address_with_http_info(blockchain, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_names_owned_by_address ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling NamesApi.get_names_owned_by_address"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling NamesApi.get_names_owned_by_address"
      end
      # resource path
      local_var_path = '/v1/addresses/{blockchain}/{address}'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BnsNamesOwnByAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_names_owned_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_names_owned_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Namespace Names
    # Retrieves a list of names within a given namespace.
    # @param tld [String] the namespace to fetch names from
    # @param page [Integer] names are returned in pages of size 100, so specify the page number.
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_namespace_names(tld, page, opts = {})
      data, _status_code, _headers = get_namespace_names_with_http_info(tld, page, opts)
      data
    end

    # Get Namespace Names
    # Retrieves a list of names within a given namespace.
    # @param tld [String] the namespace to fetch names from
    # @param page [Integer] names are returned in pages of size 100, so specify the page number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_namespace_names_with_http_info(tld, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_namespace_names ...'
      end
      # verify the required parameter 'tld' is set
      if @api_client.config.client_side_validation && tld.nil?
        fail ArgumentError, "Missing the required parameter 'tld' when calling NamesApi.get_namespace_names"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling NamesApi.get_namespace_names"
      end
      # resource path
      local_var_path = '/v1/namespaces/{tld}/names'.sub('{' + 'tld' + '}', CGI.escape(tld.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = page

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_namespace_names",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_namespace_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Namespace Price
    # Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
    # @param tld [String] the namespace to fetch price for
    # @param [Hash] opts the optional parameters
    # @return [BnsGetNamespacePriceResponse]
    def get_namespace_price(tld, opts = {})
      data, _status_code, _headers = get_namespace_price_with_http_info(tld, opts)
      data
    end

    # Get Namespace Price
    # Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
    # @param tld [String] the namespace to fetch price for
    # @param [Hash] opts the optional parameters
    # @return [Array<(BnsGetNamespacePriceResponse, Integer, Hash)>] BnsGetNamespacePriceResponse data, response status code and response headers
    def get_namespace_price_with_http_info(tld, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamesApi.get_namespace_price ...'
      end
      # verify the required parameter 'tld' is set
      if @api_client.config.client_side_validation && tld.nil?
        fail ArgumentError, "Missing the required parameter 'tld' when calling NamesApi.get_namespace_price"
      end
      # resource path
      local_var_path = '/v2/prices/namespaces/{tld}'.sub('{' + 'tld' + '}', CGI.escape(tld.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BnsGetNamespacePriceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NamesApi.get_namespace_price",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamesApi#get_namespace_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
