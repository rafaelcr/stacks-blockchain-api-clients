=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class NonFungibleTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Non fungible tokens metadata for contract id
    # Retrieves metadata for non fungible tokens for a given contract id. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
    # @param contract_id [String] token&#39;s contract id
    # @param [Hash] opts the optional parameters
    # @return [NonFungibleTokenMetadata]
    def get_contract_nft_metadata(contract_id, opts = {})
      data, _status_code, _headers = get_contract_nft_metadata_with_http_info(contract_id, opts)
      data
    end

    # Non fungible tokens metadata for contract id
    # Retrieves metadata for non fungible tokens for a given contract id. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
    # @param contract_id [String] token&#39;s contract id
    # @param [Hash] opts the optional parameters
    # @return [Array<(NonFungibleTokenMetadata, Integer, Hash)>] NonFungibleTokenMetadata data, response status code and response headers
    def get_contract_nft_metadata_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonFungibleTokensApi.get_contract_nft_metadata ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling NonFungibleTokensApi.get_contract_nft_metadata"
      end
      # resource path
      local_var_path = '/extended/v1/tokens/{contractId}/nft/metadata'.sub('{' + 'contractId' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonFungibleTokenMetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NonFungibleTokensApi.get_contract_nft_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonFungibleTokensApi#get_contract_nft_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Non-Fungible Token history
    # Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param asset_identifier [String] token asset class identifier
    # @param value [String] hex representation of the token&#39;s unique value
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of events to fetch (default to 50)
    # @option opts [Integer] :offset index of first event to fetch (default to 0)
    # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions (default to false)
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (default to false)
    # @return [NonFungibleTokenHistoryEventList]
    def get_nft_history(asset_identifier, value, opts = {})
      data, _status_code, _headers = get_nft_history_with_http_info(asset_identifier, value, opts)
      data
    end

    # Non-Fungible Token history
    # Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param asset_identifier [String] token asset class identifier
    # @param value [String] hex representation of the token&#39;s unique value
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of events to fetch
    # @option opts [Integer] :offset index of first event to fetch
    # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
    # @return [Array<(NonFungibleTokenHistoryEventList, Integer, Hash)>] NonFungibleTokenHistoryEventList data, response status code and response headers
    def get_nft_history_with_http_info(asset_identifier, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonFungibleTokensApi.get_nft_history ...'
      end
      # verify the required parameter 'asset_identifier' is set
      if @api_client.config.client_side_validation && asset_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'asset_identifier' when calling NonFungibleTokensApi.get_nft_history"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling NonFungibleTokensApi.get_nft_history"
      end
      # resource path
      local_var_path = '/extended/v1/tokens/nft/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_identifier'] = asset_identifier
      query_params[:'value'] = value
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'tx_metadata'] = opts[:'tx_metadata'] if !opts[:'tx_metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonFungibleTokenHistoryEventList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NonFungibleTokensApi.get_nft_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonFungibleTokensApi#get_nft_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Non-Fungible Token holdings
    # Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID). Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param principal [String] token owner&#39;s STX address or Smart Contract ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :asset_identifiers identifiers of the token asset classes to filter for
    # @option opts [Integer] :limit max number of tokens to fetch (default to 50)
    # @option opts [Integer] :offset index of first tokens to fetch (default to 0)
    # @option opts [Boolean] :unanchored whether or not to include tokens from unconfirmed transactions (default to false)
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (default to false)
    # @return [NonFungibleTokenHoldingsList]
    def get_nft_holdings(principal, opts = {})
      data, _status_code, _headers = get_nft_holdings_with_http_info(principal, opts)
      data
    end

    # Non-Fungible Token holdings
    # Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID). Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param principal [String] token owner&#39;s STX address or Smart Contract ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :asset_identifiers identifiers of the token asset classes to filter for
    # @option opts [Integer] :limit max number of tokens to fetch
    # @option opts [Integer] :offset index of first tokens to fetch
    # @option opts [Boolean] :unanchored whether or not to include tokens from unconfirmed transactions
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
    # @return [Array<(NonFungibleTokenHoldingsList, Integer, Hash)>] NonFungibleTokenHoldingsList data, response status code and response headers
    def get_nft_holdings_with_http_info(principal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonFungibleTokensApi.get_nft_holdings ...'
      end
      # verify the required parameter 'principal' is set
      if @api_client.config.client_side_validation && principal.nil?
        fail ArgumentError, "Missing the required parameter 'principal' when calling NonFungibleTokensApi.get_nft_holdings"
      end
      # resource path
      local_var_path = '/extended/v1/tokens/nft/holdings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'principal'] = principal
      query_params[:'asset_identifiers'] = @api_client.build_collection_param(opts[:'asset_identifiers'], :multi) if !opts[:'asset_identifiers'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'tx_metadata'] = opts[:'tx_metadata'] if !opts[:'tx_metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonFungibleTokenHoldingsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NonFungibleTokensApi.get_nft_holdings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonFungibleTokensApi#get_nft_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Non fungible tokens metadata list
    # Retrieves a list of non fungible tokens with their metadata. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of tokens to fetch
    # @option opts [Integer] :offset index of first tokens to fetch
    # @return [NonFungibleTokensMetadataList]
    def get_nft_metadata_list(opts = {})
      data, _status_code, _headers = get_nft_metadata_list_with_http_info(opts)
      data
    end

    # Non fungible tokens metadata list
    # Retrieves a list of non fungible tokens with their metadata. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of tokens to fetch
    # @option opts [Integer] :offset index of first tokens to fetch
    # @return [Array<(NonFungibleTokensMetadataList, Integer, Hash)>] NonFungibleTokensMetadataList data, response status code and response headers
    def get_nft_metadata_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonFungibleTokensApi.get_nft_metadata_list ...'
      end
      # resource path
      local_var_path = '/extended/v1/tokens/nft/metadata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonFungibleTokensMetadataList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NonFungibleTokensApi.get_nft_metadata_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonFungibleTokensApi#get_nft_metadata_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Non-Fungible Token mints
    # Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param asset_identifier [String] token asset class identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of events to fetch (default to 50)
    # @option opts [Integer] :offset index of first event to fetch (default to 0)
    # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions (default to false)
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times. (default to false)
    # @return [NonFungibleTokenMintList]
    def get_nft_mints(asset_identifier, opts = {})
      data, _status_code, _headers = get_nft_mints_with_http_info(asset_identifier, opts)
      data
    end

    # Non-Fungible Token mints
    # Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
    # @param asset_identifier [String] token asset class identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of events to fetch
    # @option opts [Integer] :offset index of first event to fetch
    # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions
    # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
    # @return [Array<(NonFungibleTokenMintList, Integer, Hash)>] NonFungibleTokenMintList data, response status code and response headers
    def get_nft_mints_with_http_info(asset_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NonFungibleTokensApi.get_nft_mints ...'
      end
      # verify the required parameter 'asset_identifier' is set
      if @api_client.config.client_side_validation && asset_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'asset_identifier' when calling NonFungibleTokensApi.get_nft_mints"
      end
      # resource path
      local_var_path = '/extended/v1/tokens/nft/mints'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_identifier'] = asset_identifier
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?
      query_params[:'tx_metadata'] = opts[:'tx_metadata'] if !opts[:'tx_metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NonFungibleTokenMintList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"NonFungibleTokensApi.get_nft_mints",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NonFungibleTokensApi#get_nft_mints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
