=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class RosettaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get an Account Balance
    # An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
    # @param rosetta_account_balance_request [RosettaAccountBalanceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaAccountBalanceResponse]
    def rosetta_account_balance(rosetta_account_balance_request, opts = {})
      data, _status_code, _headers = rosetta_account_balance_with_http_info(rosetta_account_balance_request, opts)
      data
    end

    # Get an Account Balance
    # An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
    # @param rosetta_account_balance_request [RosettaAccountBalanceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaAccountBalanceResponse, Integer, Hash)>] RosettaAccountBalanceResponse data, response status code and response headers
    def rosetta_account_balance_with_http_info(rosetta_account_balance_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_account_balance ...'
      end
      # verify the required parameter 'rosetta_account_balance_request' is set
      if @api_client.config.client_side_validation && rosetta_account_balance_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_account_balance_request' when calling RosettaApi.rosetta_account_balance"
      end
      # resource path
      local_var_path = '/rosetta/v1/account/balance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_account_balance_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaAccountBalanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Block
    # Retrieves the Block information for a given block identifier including a list of all transactions in the block.
    # @param rosetta_block_request [RosettaBlockRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaBlockResponse]
    def rosetta_block(rosetta_block_request, opts = {})
      data, _status_code, _headers = rosetta_block_with_http_info(rosetta_block_request, opts)
      data
    end

    # Get a Block
    # Retrieves the Block information for a given block identifier including a list of all transactions in the block.
    # @param rosetta_block_request [RosettaBlockRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaBlockResponse, Integer, Hash)>] RosettaBlockResponse data, response status code and response headers
    def rosetta_block_with_http_info(rosetta_block_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_block ...'
      end
      # verify the required parameter 'rosetta_block_request' is set
      if @api_client.config.client_side_validation && rosetta_block_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_block_request' when calling RosettaApi.rosetta_block"
      end
      # resource path
      local_var_path = '/rosetta/v1/block'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_block_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaBlockResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_block",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Block Transaction
    # Retrieves a Transaction included in a block that is not returned in a BlockResponse.
    # @param rosetta_block_transaction_request [RosettaBlockTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaBlockTransactionResponse]
    def rosetta_block_transaction(rosetta_block_transaction_request, opts = {})
      data, _status_code, _headers = rosetta_block_transaction_with_http_info(rosetta_block_transaction_request, opts)
      data
    end

    # Get a Block Transaction
    # Retrieves a Transaction included in a block that is not returned in a BlockResponse.
    # @param rosetta_block_transaction_request [RosettaBlockTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaBlockTransactionResponse, Integer, Hash)>] RosettaBlockTransactionResponse data, response status code and response headers
    def rosetta_block_transaction_with_http_info(rosetta_block_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_block_transaction ...'
      end
      # verify the required parameter 'rosetta_block_transaction_request' is set
      if @api_client.config.client_side_validation && rosetta_block_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_block_transaction_request' when calling RosettaApi.rosetta_block_transaction"
      end
      # resource path
      local_var_path = '/rosetta/v1/block/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_block_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaBlockTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_block_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_block_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Network Transaction from Signatures
    # Take unsigned transaction and signature, combine both and return signed transaction
    # @param rosetta_construction_combine_request [RosettaConstructionCombineRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionCombineResponse]
    def rosetta_construction_combine(rosetta_construction_combine_request, opts = {})
      data, _status_code, _headers = rosetta_construction_combine_with_http_info(rosetta_construction_combine_request, opts)
      data
    end

    # Create Network Transaction from Signatures
    # Take unsigned transaction and signature, combine both and return signed transaction
    # @param rosetta_construction_combine_request [RosettaConstructionCombineRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionCombineResponse, Integer, Hash)>] RosettaConstructionCombineResponse data, response status code and response headers
    def rosetta_construction_combine_with_http_info(rosetta_construction_combine_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_combine ...'
      end
      # verify the required parameter 'rosetta_construction_combine_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_combine_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_combine_request' when calling RosettaApi.rosetta_construction_combine"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/combine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_combine_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionCombineResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_combine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_combine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Derive an AccountIdentifier from a PublicKey
    # Retrieves the Account Identifier information based on a Public Key for a given network
    # @param rosetta_construction_derive_request [RosettaConstructionDeriveRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionDeriveResponse]
    def rosetta_construction_derive(rosetta_construction_derive_request, opts = {})
      data, _status_code, _headers = rosetta_construction_derive_with_http_info(rosetta_construction_derive_request, opts)
      data
    end

    # Derive an AccountIdentifier from a PublicKey
    # Retrieves the Account Identifier information based on a Public Key for a given network
    # @param rosetta_construction_derive_request [RosettaConstructionDeriveRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionDeriveResponse, Integer, Hash)>] RosettaConstructionDeriveResponse data, response status code and response headers
    def rosetta_construction_derive_with_http_info(rosetta_construction_derive_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_derive ...'
      end
      # verify the required parameter 'rosetta_construction_derive_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_derive_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_derive_request' when calling RosettaApi.rosetta_construction_derive"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/derive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_derive_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionDeriveResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_derive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_derive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Hash of a Signed Transaction
    # Retrieves the network-specific transaction hash for a signed transaction.
    # @param rosetta_construction_hash_request [RosettaConstructionHashRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionHashResponse]
    def rosetta_construction_hash(rosetta_construction_hash_request, opts = {})
      data, _status_code, _headers = rosetta_construction_hash_with_http_info(rosetta_construction_hash_request, opts)
      data
    end

    # Get the Hash of a Signed Transaction
    # Retrieves the network-specific transaction hash for a signed transaction.
    # @param rosetta_construction_hash_request [RosettaConstructionHashRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionHashResponse, Integer, Hash)>] RosettaConstructionHashResponse data, response status code and response headers
    def rosetta_construction_hash_with_http_info(rosetta_construction_hash_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_hash ...'
      end
      # verify the required parameter 'rosetta_construction_hash_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_hash_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_hash_request' when calling RosettaApi.rosetta_construction_hash"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/hash'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_hash_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionHashResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Metadata for Transaction Construction
    # To Do
    # @param rosetta_construction_metadata_request [RosettaConstructionMetadataRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionMetadataResponse]
    def rosetta_construction_metadata(rosetta_construction_metadata_request, opts = {})
      data, _status_code, _headers = rosetta_construction_metadata_with_http_info(rosetta_construction_metadata_request, opts)
      data
    end

    # Get Metadata for Transaction Construction
    # To Do
    # @param rosetta_construction_metadata_request [RosettaConstructionMetadataRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionMetadataResponse, Integer, Hash)>] RosettaConstructionMetadataResponse data, response status code and response headers
    def rosetta_construction_metadata_with_http_info(rosetta_construction_metadata_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_metadata ...'
      end
      # verify the required parameter 'rosetta_construction_metadata_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_metadata_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_metadata_request' when calling RosettaApi.rosetta_construction_metadata"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/metadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_metadata_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse a Transaction
    # TODO
    # @param rosetta_construction_parse_request [RosettaConstructionParseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionParseResponse]
    def rosetta_construction_parse(rosetta_construction_parse_request, opts = {})
      data, _status_code, _headers = rosetta_construction_parse_with_http_info(rosetta_construction_parse_request, opts)
      data
    end

    # Parse a Transaction
    # TODO
    # @param rosetta_construction_parse_request [RosettaConstructionParseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionParseResponse, Integer, Hash)>] RosettaConstructionParseResponse data, response status code and response headers
    def rosetta_construction_parse_with_http_info(rosetta_construction_parse_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_parse ...'
      end
      # verify the required parameter 'rosetta_construction_parse_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_parse_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_parse_request' when calling RosettaApi.rosetta_construction_parse"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/parse'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_parse_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionParseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_parse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_parse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate an Unsigned Transaction and Signing Payloads
    # Generate and unsigned transaction from operations and metadata
    # @param rosetta_construction_payloads_request [RosettaConstructionPayloadsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionPayloadResponse]
    def rosetta_construction_payloads(rosetta_construction_payloads_request, opts = {})
      data, _status_code, _headers = rosetta_construction_payloads_with_http_info(rosetta_construction_payloads_request, opts)
      data
    end

    # Generate an Unsigned Transaction and Signing Payloads
    # Generate and unsigned transaction from operations and metadata
    # @param rosetta_construction_payloads_request [RosettaConstructionPayloadsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionPayloadResponse, Integer, Hash)>] RosettaConstructionPayloadResponse data, response status code and response headers
    def rosetta_construction_payloads_with_http_info(rosetta_construction_payloads_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_payloads ...'
      end
      # verify the required parameter 'rosetta_construction_payloads_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_payloads_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_payloads_request' when calling RosettaApi.rosetta_construction_payloads"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/payloads'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_payloads_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionPayloadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_payloads",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_payloads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Request to Fetch Metadata
    # TODO
    # @param rosetta_construction_preprocess_request [RosettaConstructionPreprocessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionPreprocessResponse]
    def rosetta_construction_preprocess(rosetta_construction_preprocess_request, opts = {})
      data, _status_code, _headers = rosetta_construction_preprocess_with_http_info(rosetta_construction_preprocess_request, opts)
      data
    end

    # Create a Request to Fetch Metadata
    # TODO
    # @param rosetta_construction_preprocess_request [RosettaConstructionPreprocessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionPreprocessResponse, Integer, Hash)>] RosettaConstructionPreprocessResponse data, response status code and response headers
    def rosetta_construction_preprocess_with_http_info(rosetta_construction_preprocess_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_preprocess ...'
      end
      # verify the required parameter 'rosetta_construction_preprocess_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_preprocess_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_preprocess_request' when calling RosettaApi.rosetta_construction_preprocess"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/preprocess'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_preprocess_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionPreprocessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_preprocess",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_preprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit a Signed Transaction
    # Submit a pre-signed transaction to the node.
    # @param rosetta_construction_submit_request [RosettaConstructionSubmitRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaConstructionSubmitResponse]
    def rosetta_construction_submit(rosetta_construction_submit_request, opts = {})
      data, _status_code, _headers = rosetta_construction_submit_with_http_info(rosetta_construction_submit_request, opts)
      data
    end

    # Submit a Signed Transaction
    # Submit a pre-signed transaction to the node.
    # @param rosetta_construction_submit_request [RosettaConstructionSubmitRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaConstructionSubmitResponse, Integer, Hash)>] RosettaConstructionSubmitResponse data, response status code and response headers
    def rosetta_construction_submit_with_http_info(rosetta_construction_submit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_construction_submit ...'
      end
      # verify the required parameter 'rosetta_construction_submit_request' is set
      if @api_client.config.client_side_validation && rosetta_construction_submit_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_construction_submit_request' when calling RosettaApi.rosetta_construction_submit"
      end
      # resource path
      local_var_path = '/rosetta/v1/construction/submit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_construction_submit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaConstructionSubmitResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_construction_submit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_construction_submit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Mempool Transactions
    # Retrieves a list of transcations currently in the mempool for a given network.
    # @param rosetta_mempool_request [RosettaMempoolRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaMempoolResponse]
    def rosetta_mempool(rosetta_mempool_request, opts = {})
      data, _status_code, _headers = rosetta_mempool_with_http_info(rosetta_mempool_request, opts)
      data
    end

    # Get All Mempool Transactions
    # Retrieves a list of transcations currently in the mempool for a given network.
    # @param rosetta_mempool_request [RosettaMempoolRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaMempoolResponse, Integer, Hash)>] RosettaMempoolResponse data, response status code and response headers
    def rosetta_mempool_with_http_info(rosetta_mempool_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_mempool ...'
      end
      # verify the required parameter 'rosetta_mempool_request' is set
      if @api_client.config.client_side_validation && rosetta_mempool_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_mempool_request' when calling RosettaApi.rosetta_mempool"
      end
      # resource path
      local_var_path = '/rosetta/v1/mempool'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_mempool_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaMempoolResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_mempool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_mempool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Mempool Transaction
    # Retrieves transaction details from the mempool for a given transaction id from a given network.
    # @param rosetta_mempool_transaction_request [RosettaMempoolTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaMempoolTransactionResponse]
    def rosetta_mempool_transaction(rosetta_mempool_transaction_request, opts = {})
      data, _status_code, _headers = rosetta_mempool_transaction_with_http_info(rosetta_mempool_transaction_request, opts)
      data
    end

    # Get a Mempool Transaction
    # Retrieves transaction details from the mempool for a given transaction id from a given network.
    # @param rosetta_mempool_transaction_request [RosettaMempoolTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaMempoolTransactionResponse, Integer, Hash)>] RosettaMempoolTransactionResponse data, response status code and response headers
    def rosetta_mempool_transaction_with_http_info(rosetta_mempool_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_mempool_transaction ...'
      end
      # verify the required parameter 'rosetta_mempool_transaction_request' is set
      if @api_client.config.client_side_validation && rosetta_mempool_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_mempool_transaction_request' when calling RosettaApi.rosetta_mempool_transaction"
      end
      # resource path
      local_var_path = '/rosetta/v1/mempool/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_mempool_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaMempoolTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_mempool_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_mempool_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of Available Networks
    # Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
    # @param [Hash] opts the optional parameters
    # @return [RosettaNetworkListResponse]
    def rosetta_network_list(opts = {})
      data, _status_code, _headers = rosetta_network_list_with_http_info(opts)
      data
    end

    # Get List of Available Networks
    # Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaNetworkListResponse, Integer, Hash)>] RosettaNetworkListResponse data, response status code and response headers
    def rosetta_network_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_network_list ...'
      end
      # resource path
      local_var_path = '/rosetta/v1/network/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaNetworkListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_network_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_network_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Network Options
    # Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
    # @param rosetta_options_request [RosettaOptionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RosettaNetworkOptionsResponse]
    def rosetta_network_options(rosetta_options_request, opts = {})
      data, _status_code, _headers = rosetta_network_options_with_http_info(rosetta_options_request, opts)
      data
    end

    # Get Network Options
    # Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
    # @param rosetta_options_request [RosettaOptionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RosettaNetworkOptionsResponse, Integer, Hash)>] RosettaNetworkOptionsResponse data, response status code and response headers
    def rosetta_network_options_with_http_info(rosetta_options_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_network_options ...'
      end
      # verify the required parameter 'rosetta_options_request' is set
      if @api_client.config.client_side_validation && rosetta_options_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_options_request' when calling RosettaApi.rosetta_network_options"
      end
      # resource path
      local_var_path = '/rosetta/v1/network/options'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_options_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RosettaNetworkOptionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_network_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_network_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Network Status
    # Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
    # @param rosetta_status_request [RosettaStatusRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def rosetta_network_status(rosetta_status_request, opts = {})
      data, _status_code, _headers = rosetta_network_status_with_http_info(rosetta_status_request, opts)
      data
    end

    # Get Network Status
    # Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
    # @param rosetta_status_request [RosettaStatusRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def rosetta_network_status_with_http_info(rosetta_status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RosettaApi.rosetta_network_status ...'
      end
      # verify the required parameter 'rosetta_status_request' is set
      if @api_client.config.client_side_validation && rosetta_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'rosetta_status_request' when calling RosettaApi.rosetta_network_status"
      end
      # resource path
      local_var_path = '/rosetta/v1/network/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rosetta_status_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RosettaApi.rosetta_network_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RosettaApi#rosetta_network_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
