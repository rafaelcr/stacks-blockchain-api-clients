=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class SmartContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Call read-only function
    # Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param function_name [String] Function name
    # @param read_only_function_args [ReadOnlyFunctionArgs] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [ReadOnlyFunctionSuccessResponse]
    def call_read_only_function(contract_address, contract_name, function_name, read_only_function_args, opts = {})
      data, _status_code, _headers = call_read_only_function_with_http_info(contract_address, contract_name, function_name, read_only_function_args, opts)
      data
    end

    # Call read-only function
    # Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param function_name [String] Function name
    # @param read_only_function_args [ReadOnlyFunctionArgs] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [Array<(ReadOnlyFunctionSuccessResponse, Integer, Hash)>] ReadOnlyFunctionSuccessResponse data, response status code and response headers
    def call_read_only_function_with_http_info(contract_address, contract_name, function_name, read_only_function_args, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.call_read_only_function ...'
      end
      # verify the required parameter 'contract_address' is set
      if @api_client.config.client_side_validation && contract_address.nil?
        fail ArgumentError, "Missing the required parameter 'contract_address' when calling SmartContractsApi.call_read_only_function"
      end
      # verify the required parameter 'contract_name' is set
      if @api_client.config.client_side_validation && contract_name.nil?
        fail ArgumentError, "Missing the required parameter 'contract_name' when calling SmartContractsApi.call_read_only_function"
      end
      # verify the required parameter 'function_name' is set
      if @api_client.config.client_side_validation && function_name.nil?
        fail ArgumentError, "Missing the required parameter 'function_name' when calling SmartContractsApi.call_read_only_function"
      end
      # verify the required parameter 'read_only_function_args' is set
      if @api_client.config.client_side_validation && read_only_function_args.nil?
        fail ArgumentError, "Missing the required parameter 'read_only_function_args' when calling SmartContractsApi.call_read_only_function"
      end
      # resource path
      local_var_path = '/v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}'.sub('{' + 'contract_address' + '}', CGI.escape(contract_address.to_s)).sub('{' + 'contract_name' + '}', CGI.escape(contract_name.to_s)).sub('{' + 'function_name' + '}', CGI.escape(function_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tip'] = opts[:'tip'] if !opts[:'tip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(read_only_function_args)

      # return_type
      return_type = opts[:debug_return_type] || 'ReadOnlyFunctionSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.call_read_only_function",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#call_read_only_function\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract info
    # Retrieves details of a contract with a given `contract_id`
    # @param contract_id [String] Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [Object]
    def get_contract_by_id(contract_id, opts = {})
      data, _status_code, _headers = get_contract_by_id_with_http_info(contract_id, opts)
      data
    end

    # Get contract info
    # Retrieves details of a contract with a given &#x60;contract_id&#x60;
    # @param contract_id [String] Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_contract_by_id_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contract_by_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling SmartContractsApi.get_contract_by_id"
      end
      # resource path
      local_var_path = '/extended/v1/contract/{contract_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contract_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contract_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specific data-map inside a contract
    # Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param map_name [String] Map name
    # @param key [String] Hex string serialization of the lookup key (which should be a Clarity value)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field when set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [MapEntryResponse]
    def get_contract_data_map_entry(contract_address, contract_name, map_name, key, opts = {})
      data, _status_code, _headers = get_contract_data_map_entry_with_http_info(contract_address, contract_name, map_name, key, opts)
      data
    end

    # Get specific data-map inside a contract
    # Attempt to fetch data from a contract data map. The contract is identified with Stacks Address &#x60;contract_address&#x60; and Contract Name &#x60;contract_address&#x60; in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, &#x60;data&#x60; is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param map_name [String] Map name
    # @param key [String] Hex string serialization of the lookup key (which should be a Clarity value)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field when set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [Array<(MapEntryResponse, Integer, Hash)>] MapEntryResponse data, response status code and response headers
    def get_contract_data_map_entry_with_http_info(contract_address, contract_name, map_name, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contract_data_map_entry ...'
      end
      # verify the required parameter 'contract_address' is set
      if @api_client.config.client_side_validation && contract_address.nil?
        fail ArgumentError, "Missing the required parameter 'contract_address' when calling SmartContractsApi.get_contract_data_map_entry"
      end
      # verify the required parameter 'contract_name' is set
      if @api_client.config.client_side_validation && contract_name.nil?
        fail ArgumentError, "Missing the required parameter 'contract_name' when calling SmartContractsApi.get_contract_data_map_entry"
      end
      # verify the required parameter 'map_name' is set
      if @api_client.config.client_side_validation && map_name.nil?
        fail ArgumentError, "Missing the required parameter 'map_name' when calling SmartContractsApi.get_contract_data_map_entry"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling SmartContractsApi.get_contract_data_map_entry"
      end
      # resource path
      local_var_path = '/v2/map_entry/{contract_address}/{contract_name}/{map_name}'.sub('{' + 'contract_address' + '}', CGI.escape(contract_address.to_s)).sub('{' + 'contract_name' + '}', CGI.escape(contract_name.to_s)).sub('{' + 'map_name' + '}', CGI.escape(map_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'proof'] = opts[:'proof'] if !opts[:'proof'].nil?
      query_params[:'tip'] = opts[:'tip'] if !opts[:'tip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(key)

      # return_type
      return_type = opts[:debug_return_type] || 'MapEntryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contract_data_map_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contract_data_map_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract events
    # Retrieves a list of events that have been triggered by a given `contract_id`
    # @param contract_id [String] Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of contract events to fetch
    # @option opts [Integer] :offset index of first contract event to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [AnyOfobjectobjectobjectobjectobject]
    def get_contract_events_by_id(contract_id, opts = {})
      data, _status_code, _headers = get_contract_events_by_id_with_http_info(contract_id, opts)
      data
    end

    # Get contract events
    # Retrieves a list of events that have been triggered by a given &#x60;contract_id&#x60;
    # @param contract_id [String] Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of contract events to fetch
    # @option opts [Integer] :offset index of first contract event to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(AnyOfobjectobjectobjectobjectobject, Integer, Hash)>] AnyOfobjectobjectobjectobjectobject data, response status code and response headers
    def get_contract_events_by_id_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contract_events_by_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling SmartContractsApi.get_contract_events_by_id"
      end
      # resource path
      local_var_path = '/extended/v1/contract/{contract_id}/events'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnyOfobjectobjectobjectobjectobject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contract_events_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contract_events_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract interface
    # Retrieves a contract interface with a given `contract_address` and `contract name`
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [ContractInterfaceResponse]
    def get_contract_interface(contract_address, contract_name, opts = {})
      data, _status_code, _headers = get_contract_interface_with_http_info(contract_address, contract_name, opts)
      data
    end

    # Get contract interface
    # Retrieves a contract interface with a given &#x60;contract_address&#x60; and &#x60;contract name&#x60;
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [Array<(ContractInterfaceResponse, Integer, Hash)>] ContractInterfaceResponse data, response status code and response headers
    def get_contract_interface_with_http_info(contract_address, contract_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contract_interface ...'
      end
      # verify the required parameter 'contract_address' is set
      if @api_client.config.client_side_validation && contract_address.nil?
        fail ArgumentError, "Missing the required parameter 'contract_address' when calling SmartContractsApi.get_contract_interface"
      end
      # verify the required parameter 'contract_name' is set
      if @api_client.config.client_side_validation && contract_name.nil?
        fail ArgumentError, "Missing the required parameter 'contract_name' when calling SmartContractsApi.get_contract_interface"
      end
      # resource path
      local_var_path = '/v2/contracts/interface/{contract_address}/{contract_name}'.sub('{' + 'contract_address' + '}', CGI.escape(contract_address.to_s)).sub('{' + 'contract_name' + '}', CGI.escape(contract_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tip'] = opts[:'tip'] if !opts[:'tip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractInterfaceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contract_interface",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contract_interface\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract source
    # Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field if set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [ContractSourceResponse]
    def get_contract_source(contract_address, contract_name, opts = {})
      data, _status_code, _headers = get_contract_source_with_http_info(contract_address, contract_name, opts)
      data
    end

    # Get contract source
    # Retrieves the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
    # @param contract_address [String] Stacks address
    # @param contract_name [String] Contract name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :proof Returns object without the proof field if set to 0
    # @option opts [String] :tip The Stacks chain tip to query from
    # @return [Array<(ContractSourceResponse, Integer, Hash)>] ContractSourceResponse data, response status code and response headers
    def get_contract_source_with_http_info(contract_address, contract_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contract_source ...'
      end
      # verify the required parameter 'contract_address' is set
      if @api_client.config.client_side_validation && contract_address.nil?
        fail ArgumentError, "Missing the required parameter 'contract_address' when calling SmartContractsApi.get_contract_source"
      end
      # verify the required parameter 'contract_name' is set
      if @api_client.config.client_side_validation && contract_name.nil?
        fail ArgumentError, "Missing the required parameter 'contract_name' when calling SmartContractsApi.get_contract_source"
      end
      # resource path
      local_var_path = '/v2/contracts/source/{contract_address}/{contract_name}'.sub('{' + 'contract_address' + '}', CGI.escape(contract_address.to_s)).sub('{' + 'contract_name' + '}', CGI.escape(contract_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'proof'] = opts[:'proof'] if !opts[:'proof'].nil?
      query_params[:'tip'] = opts[:'tip'] if !opts[:'tip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contract_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contract_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contracts by trait
    # Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
    # @param trait_abi [String] JSON abi of the trait.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of contracts fetch
    # @option opts [Integer] :offset index of first contract event to fetch
    # @return [ContractListResponse]
    def get_contracts_by_trait(trait_abi, opts = {})
      data, _status_code, _headers = get_contracts_by_trait_with_http_info(trait_abi, opts)
      data
    end

    # Get contracts by trait
    # Retrieves a list of contracts based on the following traits listed in JSON format -  functions, variables, maps, fungible tokens and non-fungible tokens
    # @param trait_abi [String] JSON abi of the trait.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of contracts fetch
    # @option opts [Integer] :offset index of first contract event to fetch
    # @return [Array<(ContractListResponse, Integer, Hash)>] ContractListResponse data, response status code and response headers
    def get_contracts_by_trait_with_http_info(trait_abi, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmartContractsApi.get_contracts_by_trait ...'
      end
      # verify the required parameter 'trait_abi' is set
      if @api_client.config.client_side_validation && trait_abi.nil?
        fail ArgumentError, "Missing the required parameter 'trait_abi' when calling SmartContractsApi.get_contracts_by_trait"
      end
      # resource path
      local_var_path = '/extended/v1/contract/by_trait'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'trait_abi'] = trait_abi
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SmartContractsApi.get_contracts_by_trait",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmartContractsApi#get_contracts_by_trait\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
