=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class StackingRewardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get recent burnchain reward recipients
    # Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of rewards to fetch (default to 96)
    # @option opts [Integer] :offset index of first rewards to fetch
    # @return [BurnchainRewardListResponse]
    def get_burnchain_reward_list(opts = {})
      data, _status_code, _headers = get_burnchain_reward_list_with_http_info(opts)
      data
    end

    # Get recent burnchain reward recipients
    # Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of rewards to fetch
    # @option opts [Integer] :offset index of first rewards to fetch
    # @return [Array<(BurnchainRewardListResponse, Integer, Hash)>] BurnchainRewardListResponse data, response status code and response headers
    def get_burnchain_reward_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackingRewardsApi.get_burnchain_reward_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling StackingRewardsApi.get_burnchain_reward_list, must be smaller than or equal to 250.'
      end

      # resource path
      local_var_path = '/extended/v1/burnchain/rewards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BurnchainRewardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StackingRewardsApi.get_burnchain_reward_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackingRewardsApi#get_burnchain_reward_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recent burnchain reward for the given recipient
    # Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
    # @param address [String] Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of rewards to fetch
    # @option opts [Integer] :offset index of first rewards to fetch
    # @return [Object]
    def get_burnchain_reward_list_by_address(address, opts = {})
      data, _status_code, _headers = get_burnchain_reward_list_by_address_with_http_info(address, opts)
      data
    end

    # Get recent burnchain reward for the given recipient
    # Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
    # @param address [String] Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of rewards to fetch
    # @option opts [Integer] :offset index of first rewards to fetch
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_burnchain_reward_list_by_address_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackingRewardsApi.get_burnchain_reward_list_by_address ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling StackingRewardsApi.get_burnchain_reward_list_by_address"
      end
      # resource path
      local_var_path = '/extended/v1/burnchain/rewards/{address}'.sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StackingRewardsApi.get_burnchain_reward_list_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackingRewardsApi#get_burnchain_reward_list_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recent reward slot holders
    # Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of items to fetch (default to 96)
    # @option opts [Integer] :offset index of the first items to fetch
    # @return [BurnchainRewardSlotHolderListResponse]
    def get_burnchain_reward_slot_holders(opts = {})
      data, _status_code, _headers = get_burnchain_reward_slot_holders_with_http_info(opts)
      data
    end

    # Get recent reward slot holders
    # Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of items to fetch
    # @option opts [Integer] :offset index of the first items to fetch
    # @return [Array<(BurnchainRewardSlotHolderListResponse, Integer, Hash)>] BurnchainRewardSlotHolderListResponse data, response status code and response headers
    def get_burnchain_reward_slot_holders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackingRewardsApi.get_burnchain_reward_slot_holders ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling StackingRewardsApi.get_burnchain_reward_slot_holders, must be smaller than or equal to 250.'
      end

      # resource path
      local_var_path = '/extended/v1/burnchain/reward_slot_holders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BurnchainRewardSlotHolderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StackingRewardsApi.get_burnchain_reward_slot_holders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackingRewardsApi#get_burnchain_reward_slot_holders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recent reward slot holder entries for the given address
    # Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
    # @param address [String] Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of items to fetch
    # @option opts [Integer] :offset index of the first items to fetch
    # @return [Object]
    def get_burnchain_reward_slot_holders_by_address(address, opts = {})
      data, _status_code, _headers = get_burnchain_reward_slot_holders_by_address_with_http_info(address, opts)
      data
    end

    # Get recent reward slot holder entries for the given address
    # Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
    # @param address [String] Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of items to fetch
    # @option opts [Integer] :offset index of the first items to fetch
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_burnchain_reward_slot_holders_by_address_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackingRewardsApi.get_burnchain_reward_slot_holders_by_address ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling StackingRewardsApi.get_burnchain_reward_slot_holders_by_address"
      end
      # resource path
      local_var_path = '/extended/v1/burnchain/reward_slot_holders/{address}'.sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StackingRewardsApi.get_burnchain_reward_slot_holders_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackingRewardsApi#get_burnchain_reward_slot_holders_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get total burnchain rewards for the given recipient
    # Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
    # @param address [String] Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @return [BurnchainRewardsTotal]
    def get_burnchain_rewards_total_by_address(address, opts = {})
      data, _status_code, _headers = get_burnchain_rewards_total_by_address_with_http_info(address, opts)
      data
    end

    # Get total burnchain rewards for the given recipient
    # Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient &#x60;address&#x60;
    # @param address [String] Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format
    # @param [Hash] opts the optional parameters
    # @return [Array<(BurnchainRewardsTotal, Integer, Hash)>] BurnchainRewardsTotal data, response status code and response headers
    def get_burnchain_rewards_total_by_address_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackingRewardsApi.get_burnchain_rewards_total_by_address ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling StackingRewardsApi.get_burnchain_rewards_total_by_address"
      end
      # resource path
      local_var_path = '/extended/v1/burnchain/rewards/{address}/total'.sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BurnchainRewardsTotal'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StackingRewardsApi.get_burnchain_rewards_total_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackingRewardsApi#get_burnchain_rewards_total_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
