=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module StacksBlockchainApi
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Transactions for address
    # Retrieves all transactions for a given address that are currently in mempool
    # @param address [String] Transactions for the address
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [Object]
    def get_address_mempool_transactions(address, opts = {})
      data, _status_code, _headers = get_address_mempool_transactions_with_http_info(address, opts)
      data
    end

    # Transactions for address
    # Retrieves all transactions for a given address that are currently in mempool
    # @param address [String] Transactions for the address
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_address_mempool_transactions_with_http_info(address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_address_mempool_transactions ...'
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling TransactionsApi.get_address_mempool_transactions"
      end
      # resource path
      local_var_path = '/extended/v1/address/{address}/mempool'.sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_address_mempool_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_address_mempool_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dropped mempool transactions
    # Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of mempool transactions to fetch (default to 96)
    # @option opts [Integer] :offset index of first mempool transaction to fetch
    # @return [Object]
    def get_dropped_mempool_transaction_list(opts = {})
      data, _status_code, _headers = get_dropped_mempool_transaction_list_with_http_info(opts)
      data
    end

    # Get dropped mempool transactions
    # Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of mempool transactions to fetch
    # @option opts [Integer] :offset index of first mempool transaction to fetch
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_dropped_mempool_transaction_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_dropped_mempool_transaction_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionsApi.get_dropped_mempool_transaction_list, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = '/extended/v1/tx/mempool/dropped'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_dropped_mempool_transaction_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_dropped_mempool_transaction_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mempool transactions
    # Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_address Filter to only return transactions with this sender address.
    # @option opts [String] :recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types).
    # @option opts [String] :address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types).
    # @option opts [Integer] :limit max number of mempool transactions to fetch (default to 96)
    # @option opts [Integer] :offset index of first mempool transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [MempoolTransactionListResponse]
    def get_mempool_transaction_list(opts = {})
      data, _status_code, _headers = get_mempool_transaction_list_with_http_info(opts)
      data
    end

    # Get mempool transactions
    # Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_address Filter to only return transactions with this sender address.
    # @option opts [String] :recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types).
    # @option opts [String] :address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types).
    # @option opts [Integer] :limit max number of mempool transactions to fetch
    # @option opts [Integer] :offset index of first mempool transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(MempoolTransactionListResponse, Integer, Hash)>] MempoolTransactionListResponse data, response status code and response headers
    def get_mempool_transaction_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_mempool_transaction_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionsApi.get_mempool_transaction_list, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = '/extended/v1/tx/mempool'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sender_address'] = opts[:'sender_address'] if !opts[:'sender_address'].nil?
      query_params[:'recipient_address'] = opts[:'recipient_address'] if !opts[:'recipient_address'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MempoolTransactionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_mempool_transaction_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_mempool_transaction_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Raw Transaction
    # Retrieves a hex encoded serialized transaction for a given ID 
    # @param tx_id [String] Hash of transaction
    # @param [Hash] opts the optional parameters
    # @return [GetRawTransactionResult]
    def get_raw_transaction_by_id(tx_id, opts = {})
      data, _status_code, _headers = get_raw_transaction_by_id_with_http_info(tx_id, opts)
      data
    end

    # Get Raw Transaction
    # Retrieves a hex encoded serialized transaction for a given ID 
    # @param tx_id [String] Hash of transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRawTransactionResult, Integer, Hash)>] GetRawTransactionResult data, response status code and response headers
    def get_raw_transaction_by_id_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_raw_transaction_by_id ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling TransactionsApi.get_raw_transaction_by_id"
      end
      # resource path
      local_var_path = '/extended/v1/tx/{tx_id}/raw'.sub('{' + 'tx_id' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRawTransactionResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_raw_transaction_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_raw_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transaction
    # Retrieves transaction details for a given transaction ID  `import type { Transaction } from '@stacks/stacks-blockchain-api-types';` 
    # @param tx_id [String] Hash of transaction
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :event_offset The number of events to skip (default to 0)
    # @option opts [Integer] :event_limit The numbers of events to return (default to 96)
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [AnyOfobjectobjectobjectobjectobject]
    def get_transaction_by_id(tx_id, opts = {})
      data, _status_code, _headers = get_transaction_by_id_with_http_info(tx_id, opts)
      data
    end

    # Get transaction
    # Retrieves transaction details for a given transaction ID  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
    # @param tx_id [String] Hash of transaction
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :event_offset The number of events to skip
    # @option opts [Integer] :event_limit The numbers of events to return
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(AnyOfobjectobjectobjectobjectobject, Integer, Hash)>] AnyOfobjectobjectobjectobjectobject data, response status code and response headers
    def get_transaction_by_id_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transaction_by_id ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling TransactionsApi.get_transaction_by_id"
      end
      # resource path
      local_var_path = '/extended/v1/tx/{tx_id}'.sub('{' + 'tx_id' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'event_offset'] = opts[:'event_offset'] if !opts[:'event_offset'].nil?
      query_params[:'event_limit'] = opts[:'event_limit'] if !opts[:'event_limit'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnyOfobjectobjectobjectobjectobject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transaction_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recent transactions
    # Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from '@stacks/stacks-blockchain-api-types';` 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch (default to 96)
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Array<String>] :type Filter by transaction type
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [TransactionResults]
    def get_transaction_list(opts = {})
      data, _status_code, _headers = get_transaction_list_with_http_info(opts)
      data
    end

    # Get recent transactions
    # Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  &#x60;import type { TransactionResults } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Array<String>] :type Filter by transaction type
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(TransactionResults, Integer, Hash)>] TransactionResults data, response status code and response headers
    def get_transaction_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transaction_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionsApi.get_transaction_list, must be smaller than or equal to 200.'
      end

      allowable_values = ["coinbase", "token_transfer", "smart_contract", "contract_call", "poison_microblock"]
      if @api_client.config.client_side_validation && opts[:'type'] && !opts[:'type'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"type\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/extended/v1/tx'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'type'] = @api_client.build_collection_param(opts[:'type'], :multi) if !opts[:'type'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transaction_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transaction_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transactions by block hash
    # Retrieves a list of all transactions within a block for a given block hash.
    # @param block_hash [String] Hash of block
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @return [Object]
    def get_transactions_by_block_hash(block_hash, opts = {})
      data, _status_code, _headers = get_transactions_by_block_hash_with_http_info(block_hash, opts)
      data
    end

    # Transactions by block hash
    # Retrieves a list of all transactions within a block for a given block hash.
    # @param block_hash [String] Hash of block
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_transactions_by_block_hash_with_http_info(block_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions_by_block_hash ...'
      end
      # verify the required parameter 'block_hash' is set
      if @api_client.config.client_side_validation && block_hash.nil?
        fail ArgumentError, "Missing the required parameter 'block_hash' when calling TransactionsApi.get_transactions_by_block_hash"
      end
      # resource path
      local_var_path = '/extended/v1/tx/block/{block_hash}'.sub('{' + 'block_hash' + '}', CGI.escape(block_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions_by_block_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions_by_block_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transactions by block height
    # Retrieves all transactions within a block at a given height
    # @param height [Integer] Height of block
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [Object]
    def get_transactions_by_block_height(height, opts = {})
      data, _status_code, _headers = get_transactions_by_block_height_with_http_info(height, opts)
      data
    end

    # Transactions by block height
    # Retrieves all transactions within a block at a given height
    # @param height [Integer] Height of block
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit max number of transactions to fetch
    # @option opts [Integer] :offset index of first transaction to fetch
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_transactions_by_block_height_with_http_info(height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions_by_block_height ...'
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling TransactionsApi.get_transactions_by_block_height"
      end
      # resource path
      local_var_path = '/extended/v1/tx/block_height/{height}'.sub('{' + 'height' + '}', CGI.escape(height.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions_by_block_height",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions_by_block_height\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of details for transactions
    # Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from '@stacks/stacks-blockchain-api-types';` 
    # @param tx_id [Array<String>] Array of transaction ids
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :event_offset The number of events to skip (default to 0)
    # @option opts [Integer] :event_limit The numbers of events to return (default to 96)
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks (default to false)
    # @return [Hash<String, AnyOfobjectobject>]
    def get_tx_list_details(tx_id, opts = {})
      data, _status_code, _headers = get_tx_list_details_with_http_info(tx_id, opts)
      data
    end

    # Get list of details for transactions
    # Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
    # @param tx_id [Array<String>] Array of transaction ids
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :event_offset The number of events to skip
    # @option opts [Integer] :event_limit The numbers of events to return
    # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
    # @return [Array<(Hash<String, AnyOfobjectobject>, Integer, Hash)>] Hash<String, AnyOfobjectobject> data, response status code and response headers
    def get_tx_list_details_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_tx_list_details ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling TransactionsApi.get_tx_list_details"
      end
      # resource path
      local_var_path = '/extended/v1/tx/multiple'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tx_id'] = @api_client.build_collection_param(tx_id, :multi)
      query_params[:'event_offset'] = opts[:'event_offset'] if !opts[:'event_offset'].nil?
      query_params[:'event_limit'] = opts[:'event_limit'] if !opts[:'event_limit'].nil?
      query_params[:'unanchored'] = opts[:'unanchored'] if !opts[:'unanchored'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, AnyOfobjectobject>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_tx_list_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_tx_list_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Broadcast raw transaction
    # Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :body 
    # @return [String]
    def post_core_node_transactions(opts = {})
      data, _status_code, _headers = post_core_node_transactions_with_http_info(opts)
      data
    end

    # Broadcast raw transaction
    # Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def post_core_node_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.post_core_node_transactions ...'
      end
      # resource path
      local_var_path = '/v2/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.post_core_node_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#post_core_node_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
