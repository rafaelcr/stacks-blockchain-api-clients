=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # StxBalance
  class AddressBalanceResponseStx
    attr_accessor :balance

    attr_accessor :total_sent

    attr_accessor :total_received

    attr_accessor :total_fees_sent

    attr_accessor :total_miner_rewards_received

    # The transaction where the lock event occurred. Empty if no tokens are locked.
    attr_accessor :lock_tx_id

    # The amount of locked STX, as string quoted micro-STX. Zero if no tokens are locked.
    attr_accessor :locked

    # The STX chain block height of when the lock event occurred. Zero if no tokens are locked.
    attr_accessor :lock_height

    # The burnchain block height of when the lock event occurred. Zero if no tokens are locked.
    attr_accessor :burnchain_lock_height

    # The burnchain block height of when the tokens unlock. Zero if no tokens are locked.
    attr_accessor :burnchain_unlock_height

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'balance' => :'balance',
        :'total_sent' => :'total_sent',
        :'total_received' => :'total_received',
        :'total_fees_sent' => :'total_fees_sent',
        :'total_miner_rewards_received' => :'total_miner_rewards_received',
        :'lock_tx_id' => :'lock_tx_id',
        :'locked' => :'locked',
        :'lock_height' => :'lock_height',
        :'burnchain_lock_height' => :'burnchain_lock_height',
        :'burnchain_unlock_height' => :'burnchain_unlock_height'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'balance' => :'String',
        :'total_sent' => :'String',
        :'total_received' => :'String',
        :'total_fees_sent' => :'String',
        :'total_miner_rewards_received' => :'String',
        :'lock_tx_id' => :'String',
        :'locked' => :'String',
        :'lock_height' => :'Integer',
        :'burnchain_lock_height' => :'Integer',
        :'burnchain_unlock_height' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::AddressBalanceResponseStx` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::AddressBalanceResponseStx`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'total_sent')
        self.total_sent = attributes[:'total_sent']
      end

      if attributes.key?(:'total_received')
        self.total_received = attributes[:'total_received']
      end

      if attributes.key?(:'total_fees_sent')
        self.total_fees_sent = attributes[:'total_fees_sent']
      end

      if attributes.key?(:'total_miner_rewards_received')
        self.total_miner_rewards_received = attributes[:'total_miner_rewards_received']
      end

      if attributes.key?(:'lock_tx_id')
        self.lock_tx_id = attributes[:'lock_tx_id']
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.key?(:'lock_height')
        self.lock_height = attributes[:'lock_height']
      end

      if attributes.key?(:'burnchain_lock_height')
        self.burnchain_lock_height = attributes[:'burnchain_lock_height']
      end

      if attributes.key?(:'burnchain_unlock_height')
        self.burnchain_unlock_height = attributes[:'burnchain_unlock_height']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @balance.nil?
        invalid_properties.push('invalid value for "balance", balance cannot be nil.')
      end

      if @total_sent.nil?
        invalid_properties.push('invalid value for "total_sent", total_sent cannot be nil.')
      end

      if @total_received.nil?
        invalid_properties.push('invalid value for "total_received", total_received cannot be nil.')
      end

      if @total_fees_sent.nil?
        invalid_properties.push('invalid value for "total_fees_sent", total_fees_sent cannot be nil.')
      end

      if @total_miner_rewards_received.nil?
        invalid_properties.push('invalid value for "total_miner_rewards_received", total_miner_rewards_received cannot be nil.')
      end

      if @lock_tx_id.nil?
        invalid_properties.push('invalid value for "lock_tx_id", lock_tx_id cannot be nil.')
      end

      if @locked.nil?
        invalid_properties.push('invalid value for "locked", locked cannot be nil.')
      end

      if @lock_height.nil?
        invalid_properties.push('invalid value for "lock_height", lock_height cannot be nil.')
      end

      if @burnchain_lock_height.nil?
        invalid_properties.push('invalid value for "burnchain_lock_height", burnchain_lock_height cannot be nil.')
      end

      if @burnchain_unlock_height.nil?
        invalid_properties.push('invalid value for "burnchain_unlock_height", burnchain_unlock_height cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @balance.nil?
      return false if @total_sent.nil?
      return false if @total_received.nil?
      return false if @total_fees_sent.nil?
      return false if @total_miner_rewards_received.nil?
      return false if @lock_tx_id.nil?
      return false if @locked.nil?
      return false if @lock_height.nil?
      return false if @burnchain_lock_height.nil?
      return false if @burnchain_unlock_height.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          balance == o.balance &&
          total_sent == o.total_sent &&
          total_received == o.total_received &&
          total_fees_sent == o.total_fees_sent &&
          total_miner_rewards_received == o.total_miner_rewards_received &&
          lock_tx_id == o.lock_tx_id &&
          locked == o.locked &&
          lock_height == o.lock_height &&
          burnchain_lock_height == o.burnchain_lock_height &&
          burnchain_unlock_height == o.burnchain_unlock_height
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [balance, total_sent, total_received, total_fees_sent, total_miner_rewards_received, lock_tx_id, locked, lock_height, burnchain_lock_height, burnchain_unlock_height].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
