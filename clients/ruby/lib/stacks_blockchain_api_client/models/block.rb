=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # A block
  class Block
    # Set to `true` if block corresponds to the canonical chain tip
    attr_accessor :canonical

    # Height of the block
    attr_accessor :height

    # Hash representing the block
    attr_accessor :hash

    # Hash of the parent block
    attr_accessor :parent_block_hash

    # Unix timestamp (in seconds) indicating when this block was mined.
    attr_accessor :burn_block_time

    # An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined.
    attr_accessor :burn_block_time_iso

    # Hash of the anchor chain block
    attr_accessor :burn_block_hash

    # Height of the anchor chain block
    attr_accessor :burn_block_height

    # Anchor chain transaction ID
    attr_accessor :miner_txid

    # The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
    attr_accessor :parent_microblock_hash

    # The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.
    attr_accessor :parent_microblock_sequence

    # List of transactions included in the block
    attr_accessor :txs

    # List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.
    attr_accessor :microblocks_accepted

    # List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.
    attr_accessor :microblocks_streamed

    # Execution cost read count.
    attr_accessor :execution_cost_read_count

    # Execution cost read length.
    attr_accessor :execution_cost_read_length

    # Execution cost runtime.
    attr_accessor :execution_cost_runtime

    # Execution cost write count.
    attr_accessor :execution_cost_write_count

    # Execution cost write length.
    attr_accessor :execution_cost_write_length

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'canonical' => :'canonical',
        :'height' => :'height',
        :'hash' => :'hash',
        :'parent_block_hash' => :'parent_block_hash',
        :'burn_block_time' => :'burn_block_time',
        :'burn_block_time_iso' => :'burn_block_time_iso',
        :'burn_block_hash' => :'burn_block_hash',
        :'burn_block_height' => :'burn_block_height',
        :'miner_txid' => :'miner_txid',
        :'parent_microblock_hash' => :'parent_microblock_hash',
        :'parent_microblock_sequence' => :'parent_microblock_sequence',
        :'txs' => :'txs',
        :'microblocks_accepted' => :'microblocks_accepted',
        :'microblocks_streamed' => :'microblocks_streamed',
        :'execution_cost_read_count' => :'execution_cost_read_count',
        :'execution_cost_read_length' => :'execution_cost_read_length',
        :'execution_cost_runtime' => :'execution_cost_runtime',
        :'execution_cost_write_count' => :'execution_cost_write_count',
        :'execution_cost_write_length' => :'execution_cost_write_length'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'canonical' => :'Boolean',
        :'height' => :'Integer',
        :'hash' => :'String',
        :'parent_block_hash' => :'String',
        :'burn_block_time' => :'Float',
        :'burn_block_time_iso' => :'String',
        :'burn_block_hash' => :'String',
        :'burn_block_height' => :'Integer',
        :'miner_txid' => :'String',
        :'parent_microblock_hash' => :'String',
        :'parent_microblock_sequence' => :'Integer',
        :'txs' => :'Array<String>',
        :'microblocks_accepted' => :'Array<String>',
        :'microblocks_streamed' => :'Array<String>',
        :'execution_cost_read_count' => :'Integer',
        :'execution_cost_read_length' => :'Integer',
        :'execution_cost_runtime' => :'Integer',
        :'execution_cost_write_count' => :'Integer',
        :'execution_cost_write_length' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::Block` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::Block`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'canonical')
        self.canonical = attributes[:'canonical']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'parent_block_hash')
        self.parent_block_hash = attributes[:'parent_block_hash']
      end

      if attributes.key?(:'burn_block_time')
        self.burn_block_time = attributes[:'burn_block_time']
      end

      if attributes.key?(:'burn_block_time_iso')
        self.burn_block_time_iso = attributes[:'burn_block_time_iso']
      end

      if attributes.key?(:'burn_block_hash')
        self.burn_block_hash = attributes[:'burn_block_hash']
      end

      if attributes.key?(:'burn_block_height')
        self.burn_block_height = attributes[:'burn_block_height']
      end

      if attributes.key?(:'miner_txid')
        self.miner_txid = attributes[:'miner_txid']
      end

      if attributes.key?(:'parent_microblock_hash')
        self.parent_microblock_hash = attributes[:'parent_microblock_hash']
      end

      if attributes.key?(:'parent_microblock_sequence')
        self.parent_microblock_sequence = attributes[:'parent_microblock_sequence']
      end

      if attributes.key?(:'txs')
        if (value = attributes[:'txs']).is_a?(Array)
          self.txs = value
        end
      end

      if attributes.key?(:'microblocks_accepted')
        if (value = attributes[:'microblocks_accepted']).is_a?(Array)
          self.microblocks_accepted = value
        end
      end

      if attributes.key?(:'microblocks_streamed')
        if (value = attributes[:'microblocks_streamed']).is_a?(Array)
          self.microblocks_streamed = value
        end
      end

      if attributes.key?(:'execution_cost_read_count')
        self.execution_cost_read_count = attributes[:'execution_cost_read_count']
      end

      if attributes.key?(:'execution_cost_read_length')
        self.execution_cost_read_length = attributes[:'execution_cost_read_length']
      end

      if attributes.key?(:'execution_cost_runtime')
        self.execution_cost_runtime = attributes[:'execution_cost_runtime']
      end

      if attributes.key?(:'execution_cost_write_count')
        self.execution_cost_write_count = attributes[:'execution_cost_write_count']
      end

      if attributes.key?(:'execution_cost_write_length')
        self.execution_cost_write_length = attributes[:'execution_cost_write_length']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @canonical.nil?
        invalid_properties.push('invalid value for "canonical", canonical cannot be nil.')
      end

      if @height.nil?
        invalid_properties.push('invalid value for "height", height cannot be nil.')
      end

      if @hash.nil?
        invalid_properties.push('invalid value for "hash", hash cannot be nil.')
      end

      if @parent_block_hash.nil?
        invalid_properties.push('invalid value for "parent_block_hash", parent_block_hash cannot be nil.')
      end

      if @burn_block_time.nil?
        invalid_properties.push('invalid value for "burn_block_time", burn_block_time cannot be nil.')
      end

      if @burn_block_time_iso.nil?
        invalid_properties.push('invalid value for "burn_block_time_iso", burn_block_time_iso cannot be nil.')
      end

      if @burn_block_hash.nil?
        invalid_properties.push('invalid value for "burn_block_hash", burn_block_hash cannot be nil.')
      end

      if @burn_block_height.nil?
        invalid_properties.push('invalid value for "burn_block_height", burn_block_height cannot be nil.')
      end

      if @miner_txid.nil?
        invalid_properties.push('invalid value for "miner_txid", miner_txid cannot be nil.')
      end

      if @parent_microblock_hash.nil?
        invalid_properties.push('invalid value for "parent_microblock_hash", parent_microblock_hash cannot be nil.')
      end

      if @parent_microblock_sequence.nil?
        invalid_properties.push('invalid value for "parent_microblock_sequence", parent_microblock_sequence cannot be nil.')
      end

      if @txs.nil?
        invalid_properties.push('invalid value for "txs", txs cannot be nil.')
      end

      if @microblocks_accepted.nil?
        invalid_properties.push('invalid value for "microblocks_accepted", microblocks_accepted cannot be nil.')
      end

      if @microblocks_streamed.nil?
        invalid_properties.push('invalid value for "microblocks_streamed", microblocks_streamed cannot be nil.')
      end

      if @execution_cost_read_count.nil?
        invalid_properties.push('invalid value for "execution_cost_read_count", execution_cost_read_count cannot be nil.')
      end

      if @execution_cost_read_length.nil?
        invalid_properties.push('invalid value for "execution_cost_read_length", execution_cost_read_length cannot be nil.')
      end

      if @execution_cost_runtime.nil?
        invalid_properties.push('invalid value for "execution_cost_runtime", execution_cost_runtime cannot be nil.')
      end

      if @execution_cost_write_count.nil?
        invalid_properties.push('invalid value for "execution_cost_write_count", execution_cost_write_count cannot be nil.')
      end

      if @execution_cost_write_length.nil?
        invalid_properties.push('invalid value for "execution_cost_write_length", execution_cost_write_length cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @canonical.nil?
      return false if @height.nil?
      return false if @hash.nil?
      return false if @parent_block_hash.nil?
      return false if @burn_block_time.nil?
      return false if @burn_block_time_iso.nil?
      return false if @burn_block_hash.nil?
      return false if @burn_block_height.nil?
      return false if @miner_txid.nil?
      return false if @parent_microblock_hash.nil?
      return false if @parent_microblock_sequence.nil?
      return false if @txs.nil?
      return false if @microblocks_accepted.nil?
      return false if @microblocks_streamed.nil?
      return false if @execution_cost_read_count.nil?
      return false if @execution_cost_read_length.nil?
      return false if @execution_cost_runtime.nil?
      return false if @execution_cost_write_count.nil?
      return false if @execution_cost_write_length.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          canonical == o.canonical &&
          height == o.height &&
          hash == o.hash &&
          parent_block_hash == o.parent_block_hash &&
          burn_block_time == o.burn_block_time &&
          burn_block_time_iso == o.burn_block_time_iso &&
          burn_block_hash == o.burn_block_hash &&
          burn_block_height == o.burn_block_height &&
          miner_txid == o.miner_txid &&
          parent_microblock_hash == o.parent_microblock_hash &&
          parent_microblock_sequence == o.parent_microblock_sequence &&
          txs == o.txs &&
          microblocks_accepted == o.microblocks_accepted &&
          microblocks_streamed == o.microblocks_streamed &&
          execution_cost_read_count == o.execution_cost_read_count &&
          execution_cost_read_length == o.execution_cost_read_length &&
          execution_cost_runtime == o.execution_cost_runtime &&
          execution_cost_write_count == o.execution_cost_write_count &&
          execution_cost_write_length == o.execution_cost_write_length
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [canonical, height, hash, parent_block_hash, burn_block_time, burn_block_time_iso, burn_block_hash, burn_block_height, miner_txid, parent_microblock_hash, parent_microblock_sequence, txs, microblocks_accepted, microblocks_streamed, execution_cost_read_count, execution_cost_read_length, execution_cost_runtime, execution_cost_write_count, execution_cost_write_length].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
