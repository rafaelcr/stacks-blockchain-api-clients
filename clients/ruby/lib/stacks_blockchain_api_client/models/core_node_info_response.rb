=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # GET request that core node information
  class CoreNodeInfoResponse
    # identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade
    attr_accessor :peer_version

    # is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block
    attr_accessor :pox_consensus

    # latest bitcoin chain height
    attr_accessor :burn_block_height

    # same as burn_consensus, but evaluated at stable_burn_block_height
    attr_accessor :stable_pox_consensus

    # leftover from stacks 1.0, basically always burn_block_height - 1
    attr_accessor :stable_burn_block_height

    # is a version descriptor
    attr_accessor :server_version

    # is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change
    attr_accessor :network_id

    # same as network_id, but for bitcoin
    attr_accessor :parent_network_id

    # the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height
    attr_accessor :stacks_tip_height

    # the best known block hash for the Stack chain (not including any pending microblocks)
    attr_accessor :stacks_tip

    # the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined
    attr_accessor :stacks_tip_consensus_hash

    # the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned
    attr_accessor :unanchored_tip

    # the block height at which the testnet network will be reset. not applicable for mainnet
    attr_accessor :exit_at_block_height

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'peer_version' => :'peer_version',
        :'pox_consensus' => :'pox_consensus',
        :'burn_block_height' => :'burn_block_height',
        :'stable_pox_consensus' => :'stable_pox_consensus',
        :'stable_burn_block_height' => :'stable_burn_block_height',
        :'server_version' => :'server_version',
        :'network_id' => :'network_id',
        :'parent_network_id' => :'parent_network_id',
        :'stacks_tip_height' => :'stacks_tip_height',
        :'stacks_tip' => :'stacks_tip',
        :'stacks_tip_consensus_hash' => :'stacks_tip_consensus_hash',
        :'unanchored_tip' => :'unanchored_tip',
        :'exit_at_block_height' => :'exit_at_block_height'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'peer_version' => :'Integer',
        :'pox_consensus' => :'String',
        :'burn_block_height' => :'Integer',
        :'stable_pox_consensus' => :'String',
        :'stable_burn_block_height' => :'Integer',
        :'server_version' => :'String',
        :'network_id' => :'Integer',
        :'parent_network_id' => :'Integer',
        :'stacks_tip_height' => :'Integer',
        :'stacks_tip' => :'String',
        :'stacks_tip_consensus_hash' => :'String',
        :'unanchored_tip' => :'String',
        :'exit_at_block_height' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::CoreNodeInfoResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::CoreNodeInfoResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'peer_version')
        self.peer_version = attributes[:'peer_version']
      end

      if attributes.key?(:'pox_consensus')
        self.pox_consensus = attributes[:'pox_consensus']
      end

      if attributes.key?(:'burn_block_height')
        self.burn_block_height = attributes[:'burn_block_height']
      end

      if attributes.key?(:'stable_pox_consensus')
        self.stable_pox_consensus = attributes[:'stable_pox_consensus']
      end

      if attributes.key?(:'stable_burn_block_height')
        self.stable_burn_block_height = attributes[:'stable_burn_block_height']
      end

      if attributes.key?(:'server_version')
        self.server_version = attributes[:'server_version']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'parent_network_id')
        self.parent_network_id = attributes[:'parent_network_id']
      end

      if attributes.key?(:'stacks_tip_height')
        self.stacks_tip_height = attributes[:'stacks_tip_height']
      end

      if attributes.key?(:'stacks_tip')
        self.stacks_tip = attributes[:'stacks_tip']
      end

      if attributes.key?(:'stacks_tip_consensus_hash')
        self.stacks_tip_consensus_hash = attributes[:'stacks_tip_consensus_hash']
      end

      if attributes.key?(:'unanchored_tip')
        self.unanchored_tip = attributes[:'unanchored_tip']
      end

      if attributes.key?(:'exit_at_block_height')
        self.exit_at_block_height = attributes[:'exit_at_block_height']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @peer_version.nil?
        invalid_properties.push('invalid value for "peer_version", peer_version cannot be nil.')
      end

      if @pox_consensus.nil?
        invalid_properties.push('invalid value for "pox_consensus", pox_consensus cannot be nil.')
      end

      if @burn_block_height.nil?
        invalid_properties.push('invalid value for "burn_block_height", burn_block_height cannot be nil.')
      end

      if @stable_pox_consensus.nil?
        invalid_properties.push('invalid value for "stable_pox_consensus", stable_pox_consensus cannot be nil.')
      end

      if @stable_burn_block_height.nil?
        invalid_properties.push('invalid value for "stable_burn_block_height", stable_burn_block_height cannot be nil.')
      end

      if @server_version.nil?
        invalid_properties.push('invalid value for "server_version", server_version cannot be nil.')
      end

      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @parent_network_id.nil?
        invalid_properties.push('invalid value for "parent_network_id", parent_network_id cannot be nil.')
      end

      if @stacks_tip_height.nil?
        invalid_properties.push('invalid value for "stacks_tip_height", stacks_tip_height cannot be nil.')
      end

      if @stacks_tip.nil?
        invalid_properties.push('invalid value for "stacks_tip", stacks_tip cannot be nil.')
      end

      if @stacks_tip_consensus_hash.nil?
        invalid_properties.push('invalid value for "stacks_tip_consensus_hash", stacks_tip_consensus_hash cannot be nil.')
      end

      if @unanchored_tip.nil?
        invalid_properties.push('invalid value for "unanchored_tip", unanchored_tip cannot be nil.')
      end

      if @exit_at_block_height.nil?
        invalid_properties.push('invalid value for "exit_at_block_height", exit_at_block_height cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @peer_version.nil?
      return false if @pox_consensus.nil?
      return false if @burn_block_height.nil?
      return false if @stable_pox_consensus.nil?
      return false if @stable_burn_block_height.nil?
      return false if @server_version.nil?
      return false if @network_id.nil?
      return false if @parent_network_id.nil?
      return false if @stacks_tip_height.nil?
      return false if @stacks_tip.nil?
      return false if @stacks_tip_consensus_hash.nil?
      return false if @unanchored_tip.nil?
      return false if @exit_at_block_height.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          peer_version == o.peer_version &&
          pox_consensus == o.pox_consensus &&
          burn_block_height == o.burn_block_height &&
          stable_pox_consensus == o.stable_pox_consensus &&
          stable_burn_block_height == o.stable_burn_block_height &&
          server_version == o.server_version &&
          network_id == o.network_id &&
          parent_network_id == o.parent_network_id &&
          stacks_tip_height == o.stacks_tip_height &&
          stacks_tip == o.stacks_tip &&
          stacks_tip_consensus_hash == o.stacks_tip_consensus_hash &&
          unanchored_tip == o.unanchored_tip &&
          exit_at_block_height == o.exit_at_block_height
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [peer_version, pox_consensus, burn_block_height, stable_pox_consensus, stable_burn_block_height, server_version, network_id, parent_network_id, stacks_tip_height, stacks_tip, stacks_tip_consensus_hash, unanchored_tip, exit_at_block_height].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
