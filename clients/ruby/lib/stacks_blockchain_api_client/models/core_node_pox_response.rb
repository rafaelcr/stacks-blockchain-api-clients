=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # Get Proof of Transfer (PoX) information
  class CoreNodePoxResponse
    attr_accessor :contract_id

    attr_accessor :first_burnchain_block_height

    attr_accessor :min_amount_ustx

    attr_accessor :registration_window_length

    attr_accessor :rejection_fraction

    attr_accessor :reward_cycle_id

    attr_accessor :reward_cycle_length

    attr_accessor :rejection_votes_left_required

    attr_accessor :total_liquid_supply_ustx

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contract_id' => :'contract_id',
        :'first_burnchain_block_height' => :'first_burnchain_block_height',
        :'min_amount_ustx' => :'min_amount_ustx',
        :'registration_window_length' => :'registration_window_length',
        :'rejection_fraction' => :'rejection_fraction',
        :'reward_cycle_id' => :'reward_cycle_id',
        :'reward_cycle_length' => :'reward_cycle_length',
        :'rejection_votes_left_required' => :'rejection_votes_left_required',
        :'total_liquid_supply_ustx' => :'total_liquid_supply_ustx'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'contract_id' => :'String',
        :'first_burnchain_block_height' => :'Integer',
        :'min_amount_ustx' => :'Integer',
        :'registration_window_length' => :'Integer',
        :'rejection_fraction' => :'Integer',
        :'reward_cycle_id' => :'Integer',
        :'reward_cycle_length' => :'Integer',
        :'rejection_votes_left_required' => :'Integer',
        :'total_liquid_supply_ustx' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::CoreNodePoxResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::CoreNodePoxResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'contract_id')
        self.contract_id = attributes[:'contract_id']
      end

      if attributes.key?(:'first_burnchain_block_height')
        self.first_burnchain_block_height = attributes[:'first_burnchain_block_height']
      end

      if attributes.key?(:'min_amount_ustx')
        self.min_amount_ustx = attributes[:'min_amount_ustx']
      end

      if attributes.key?(:'registration_window_length')
        self.registration_window_length = attributes[:'registration_window_length']
      end

      if attributes.key?(:'rejection_fraction')
        self.rejection_fraction = attributes[:'rejection_fraction']
      end

      if attributes.key?(:'reward_cycle_id')
        self.reward_cycle_id = attributes[:'reward_cycle_id']
      end

      if attributes.key?(:'reward_cycle_length')
        self.reward_cycle_length = attributes[:'reward_cycle_length']
      end

      if attributes.key?(:'rejection_votes_left_required')
        self.rejection_votes_left_required = attributes[:'rejection_votes_left_required']
      end

      if attributes.key?(:'total_liquid_supply_ustx')
        self.total_liquid_supply_ustx = attributes[:'total_liquid_supply_ustx']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @contract_id.nil?
        invalid_properties.push('invalid value for "contract_id", contract_id cannot be nil.')
      end

      if @first_burnchain_block_height.nil?
        invalid_properties.push('invalid value for "first_burnchain_block_height", first_burnchain_block_height cannot be nil.')
      end

      if @min_amount_ustx.nil?
        invalid_properties.push('invalid value for "min_amount_ustx", min_amount_ustx cannot be nil.')
      end

      if @registration_window_length.nil?
        invalid_properties.push('invalid value for "registration_window_length", registration_window_length cannot be nil.')
      end

      if @rejection_fraction.nil?
        invalid_properties.push('invalid value for "rejection_fraction", rejection_fraction cannot be nil.')
      end

      if @reward_cycle_id.nil?
        invalid_properties.push('invalid value for "reward_cycle_id", reward_cycle_id cannot be nil.')
      end

      if @reward_cycle_length.nil?
        invalid_properties.push('invalid value for "reward_cycle_length", reward_cycle_length cannot be nil.')
      end

      if @rejection_votes_left_required.nil?
        invalid_properties.push('invalid value for "rejection_votes_left_required", rejection_votes_left_required cannot be nil.')
      end

      if @total_liquid_supply_ustx.nil?
        invalid_properties.push('invalid value for "total_liquid_supply_ustx", total_liquid_supply_ustx cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @contract_id.nil?
      return false if @first_burnchain_block_height.nil?
      return false if @min_amount_ustx.nil?
      return false if @registration_window_length.nil?
      return false if @rejection_fraction.nil?
      return false if @reward_cycle_id.nil?
      return false if @reward_cycle_length.nil?
      return false if @rejection_votes_left_required.nil?
      return false if @total_liquid_supply_ustx.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contract_id == o.contract_id &&
          first_burnchain_block_height == o.first_burnchain_block_height &&
          min_amount_ustx == o.min_amount_ustx &&
          registration_window_length == o.registration_window_length &&
          rejection_fraction == o.rejection_fraction &&
          reward_cycle_id == o.reward_cycle_id &&
          reward_cycle_length == o.reward_cycle_length &&
          rejection_votes_left_required == o.rejection_votes_left_required &&
          total_liquid_supply_ustx == o.total_liquid_supply_ustx
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contract_id, first_burnchain_block_height, min_amount_ustx, registration_window_length, rejection_fraction, reward_cycle_id, reward_cycle_length, rejection_votes_left_required, total_liquid_supply_ustx].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
