=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # A inbound STX transfer with a memo
  class InboundStxTransfer
    # Principal that sent this transfer
    attr_accessor :sender

    # Transfer amount in micro-STX as integer string
    attr_accessor :amount

    # Hex encoded memo bytes associated with the transfer
    attr_accessor :memo

    # Block height at which this transfer occurred
    attr_accessor :block_height

    # The transaction ID in which this transfer occurred
    attr_accessor :tx_id

    # Indicates if the transfer is from a stx-transfer transaction or a contract-call transaction
    attr_accessor :transfer_type

    # Index of the transaction within a block
    attr_accessor :tx_index

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sender' => :'sender',
        :'amount' => :'amount',
        :'memo' => :'memo',
        :'block_height' => :'block_height',
        :'tx_id' => :'tx_id',
        :'transfer_type' => :'transfer_type',
        :'tx_index' => :'tx_index'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sender' => :'String',
        :'amount' => :'String',
        :'memo' => :'String',
        :'block_height' => :'Float',
        :'tx_id' => :'String',
        :'transfer_type' => :'String',
        :'tx_index' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::InboundStxTransfer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::InboundStxTransfer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'block_height')
        self.block_height = attributes[:'block_height']
      end

      if attributes.key?(:'tx_id')
        self.tx_id = attributes[:'tx_id']
      end

      if attributes.key?(:'transfer_type')
        self.transfer_type = attributes[:'transfer_type']
      end

      if attributes.key?(:'tx_index')
        self.tx_index = attributes[:'tx_index']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @memo.nil?
        invalid_properties.push('invalid value for "memo", memo cannot be nil.')
      end

      if @block_height.nil?
        invalid_properties.push('invalid value for "block_height", block_height cannot be nil.')
      end

      if @tx_id.nil?
        invalid_properties.push('invalid value for "tx_id", tx_id cannot be nil.')
      end

      if @transfer_type.nil?
        invalid_properties.push('invalid value for "transfer_type", transfer_type cannot be nil.')
      end

      if @tx_index.nil?
        invalid_properties.push('invalid value for "tx_index", tx_index cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sender.nil?
      return false if @amount.nil?
      return false if @memo.nil?
      return false if @block_height.nil?
      return false if @tx_id.nil?
      return false if @transfer_type.nil?
      transfer_type_validator = EnumAttributeValidator.new('String', ["bulk-send", "stx-transfer"])
      return false unless transfer_type_validator.valid?(@transfer_type)
      return false if @tx_index.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_type Object to be assigned
    def transfer_type=(transfer_type)
      validator = EnumAttributeValidator.new('String', ["bulk-send", "stx-transfer"])
      unless validator.valid?(transfer_type)
        fail ArgumentError, "invalid value for \"transfer_type\", must be one of #{validator.allowable_values}."
      end
      @transfer_type = transfer_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sender == o.sender &&
          amount == o.amount &&
          memo == o.memo &&
          block_height == o.block_height &&
          tx_id == o.tx_id &&
          transfer_type == o.transfer_type &&
          tx_index == o.tx_index
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sender, amount, memo, block_height, tx_id, transfer_type, tx_index].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
