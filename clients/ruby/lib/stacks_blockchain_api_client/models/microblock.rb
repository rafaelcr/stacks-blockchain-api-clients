=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module StacksBlockchainApi
  # A microblock
  class Microblock
    # Set to `true` if the microblock corresponds to the canonical chain tip.
    attr_accessor :canonical

    # Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created.
    attr_accessor :microblock_canonical

    # The SHA512/256 hash of this microblock.
    attr_accessor :microblock_hash

    # A hint to describe how to order a set of microblocks. Starts at 0.
    attr_accessor :microblock_sequence

    # The SHA512/256 hash of the previous signed microblock in this stream.
    attr_accessor :microblock_parent_hash

    # The anchor block height that confirmed this microblock.
    attr_accessor :block_height

    # The height of the anchor block that preceded this microblock.
    attr_accessor :parent_block_height

    # The hash of the anchor block that preceded this microblock.
    attr_accessor :parent_block_hash

    # The hash of the Bitcoin block that preceded this microblock.
    attr_accessor :parent_burn_block_hash

    # The block timestamp of the Bitcoin block that preceded this microblock.
    attr_accessor :parent_burn_block_time

    # The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.
    attr_accessor :parent_burn_block_time_iso

    # The height of the Bitcoin block that preceded this microblock.
    attr_accessor :parent_burn_block_height

    # The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks
    attr_accessor :block_hash

    # List of transactions included in the microblock
    attr_accessor :txs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'canonical' => :'canonical',
        :'microblock_canonical' => :'microblock_canonical',
        :'microblock_hash' => :'microblock_hash',
        :'microblock_sequence' => :'microblock_sequence',
        :'microblock_parent_hash' => :'microblock_parent_hash',
        :'block_height' => :'block_height',
        :'parent_block_height' => :'parent_block_height',
        :'parent_block_hash' => :'parent_block_hash',
        :'parent_burn_block_hash' => :'parent_burn_block_hash',
        :'parent_burn_block_time' => :'parent_burn_block_time',
        :'parent_burn_block_time_iso' => :'parent_burn_block_time_iso',
        :'parent_burn_block_height' => :'parent_burn_block_height',
        :'block_hash' => :'block_hash',
        :'txs' => :'txs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'canonical' => :'Boolean',
        :'microblock_canonical' => :'Boolean',
        :'microblock_hash' => :'String',
        :'microblock_sequence' => :'Integer',
        :'microblock_parent_hash' => :'String',
        :'block_height' => :'Integer',
        :'parent_block_height' => :'Integer',
        :'parent_block_hash' => :'String',
        :'parent_burn_block_hash' => :'String',
        :'parent_burn_block_time' => :'Integer',
        :'parent_burn_block_time_iso' => :'String',
        :'parent_burn_block_height' => :'Integer',
        :'block_hash' => :'String',
        :'txs' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'block_hash',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StacksBlockchainApi::Microblock` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StacksBlockchainApi::Microblock`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'canonical')
        self.canonical = attributes[:'canonical']
      end

      if attributes.key?(:'microblock_canonical')
        self.microblock_canonical = attributes[:'microblock_canonical']
      end

      if attributes.key?(:'microblock_hash')
        self.microblock_hash = attributes[:'microblock_hash']
      end

      if attributes.key?(:'microblock_sequence')
        self.microblock_sequence = attributes[:'microblock_sequence']
      end

      if attributes.key?(:'microblock_parent_hash')
        self.microblock_parent_hash = attributes[:'microblock_parent_hash']
      end

      if attributes.key?(:'block_height')
        self.block_height = attributes[:'block_height']
      end

      if attributes.key?(:'parent_block_height')
        self.parent_block_height = attributes[:'parent_block_height']
      end

      if attributes.key?(:'parent_block_hash')
        self.parent_block_hash = attributes[:'parent_block_hash']
      end

      if attributes.key?(:'parent_burn_block_hash')
        self.parent_burn_block_hash = attributes[:'parent_burn_block_hash']
      end

      if attributes.key?(:'parent_burn_block_time')
        self.parent_burn_block_time = attributes[:'parent_burn_block_time']
      end

      if attributes.key?(:'parent_burn_block_time_iso')
        self.parent_burn_block_time_iso = attributes[:'parent_burn_block_time_iso']
      end

      if attributes.key?(:'parent_burn_block_height')
        self.parent_burn_block_height = attributes[:'parent_burn_block_height']
      end

      if attributes.key?(:'block_hash')
        self.block_hash = attributes[:'block_hash']
      end

      if attributes.key?(:'txs')
        if (value = attributes[:'txs']).is_a?(Array)
          self.txs = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @canonical.nil?
        invalid_properties.push('invalid value for "canonical", canonical cannot be nil.')
      end

      if @microblock_canonical.nil?
        invalid_properties.push('invalid value for "microblock_canonical", microblock_canonical cannot be nil.')
      end

      if @microblock_hash.nil?
        invalid_properties.push('invalid value for "microblock_hash", microblock_hash cannot be nil.')
      end

      if @microblock_sequence.nil?
        invalid_properties.push('invalid value for "microblock_sequence", microblock_sequence cannot be nil.')
      end

      if @microblock_parent_hash.nil?
        invalid_properties.push('invalid value for "microblock_parent_hash", microblock_parent_hash cannot be nil.')
      end

      if @block_height.nil?
        invalid_properties.push('invalid value for "block_height", block_height cannot be nil.')
      end

      if @parent_block_height.nil?
        invalid_properties.push('invalid value for "parent_block_height", parent_block_height cannot be nil.')
      end

      if @parent_block_hash.nil?
        invalid_properties.push('invalid value for "parent_block_hash", parent_block_hash cannot be nil.')
      end

      if @parent_burn_block_hash.nil?
        invalid_properties.push('invalid value for "parent_burn_block_hash", parent_burn_block_hash cannot be nil.')
      end

      if @parent_burn_block_time.nil?
        invalid_properties.push('invalid value for "parent_burn_block_time", parent_burn_block_time cannot be nil.')
      end

      if @parent_burn_block_time_iso.nil?
        invalid_properties.push('invalid value for "parent_burn_block_time_iso", parent_burn_block_time_iso cannot be nil.')
      end

      if @parent_burn_block_height.nil?
        invalid_properties.push('invalid value for "parent_burn_block_height", parent_burn_block_height cannot be nil.')
      end

      if @txs.nil?
        invalid_properties.push('invalid value for "txs", txs cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @canonical.nil?
      return false if @microblock_canonical.nil?
      return false if @microblock_hash.nil?
      return false if @microblock_sequence.nil?
      return false if @microblock_parent_hash.nil?
      return false if @block_height.nil?
      return false if @parent_block_height.nil?
      return false if @parent_block_hash.nil?
      return false if @parent_burn_block_hash.nil?
      return false if @parent_burn_block_time.nil?
      return false if @parent_burn_block_time_iso.nil?
      return false if @parent_burn_block_height.nil?
      return false if @txs.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          canonical == o.canonical &&
          microblock_canonical == o.microblock_canonical &&
          microblock_hash == o.microblock_hash &&
          microblock_sequence == o.microblock_sequence &&
          microblock_parent_hash == o.microblock_parent_hash &&
          block_height == o.block_height &&
          parent_block_height == o.parent_block_height &&
          parent_block_hash == o.parent_block_hash &&
          parent_burn_block_hash == o.parent_burn_block_hash &&
          parent_burn_block_time == o.parent_burn_block_time &&
          parent_burn_block_time_iso == o.parent_burn_block_time_iso &&
          parent_burn_block_height == o.parent_burn_block_height &&
          block_hash == o.block_hash &&
          txs == o.txs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [canonical, microblock_canonical, microblock_hash, microblock_sequence, microblock_parent_hash, block_height, parent_block_height, parent_block_hash, parent_burn_block_hash, parent_burn_block_time, parent_burn_block_time_iso, parent_burn_block_height, block_hash, txs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StacksBlockchainApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
