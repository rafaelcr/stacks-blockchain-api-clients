=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for StacksBlockchainApi::NamesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NamesApi' do
  before do
    # run before each test
    @api_instance = StacksBlockchainApi::NamesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NamesApi' do
    it 'should create an instance of NamesApi' do
      expect(@api_instance).to be_instance_of(StacksBlockchainApi::NamesApi)
    end
  end

  # unit tests for fetch_zone_file
  # Get Zone File
  # Retrieves a userâ€™s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
  # @param name fully-qualified name
  # @param [Hash] opts the optional parameters
  # @return [AnyOfobjectobject]
  describe 'fetch_zone_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_names
  # Get All Names
  # Retrieves a list of all names known to the node.
  # @param page names are returned in pages of size 100, so specify the page number.
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_all_names test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_namespaces
  # Get All Namespaces
  # Retrieves a list of all namespaces known to the node.
  # @param [Hash] opts the optional parameters
  # @return [BnsGetAllNamespacesResponse]
  describe 'get_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_historical_zone_file
  # Get Historical Zone File
  # Retrieves the historical zonefile specified by the username and zone hash.
  # @param name fully-qualified name
  # @param zone_file_hash zone file hash
  # @param [Hash] opts the optional parameters
  # @return [AnyOfobjectobject]
  describe 'get_historical_zone_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_name_history
  # Get Name History
  # Retrieves a history of all blockchain records of a registered name.
  # @param name name to query
  # @param page the page (in 20-entry pages) of the history to fetch
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_name_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_name_info
  # Get Name Details
  # Retrieves details of a given name including the &#x60;address&#x60;, &#x60;status&#x60; and last transaction id - &#x60;last_txid&#x60;.
  # @param name fully-qualified name
  # @param [Hash] opts the optional parameters
  # @return [BnsGetNameInfoResponse]
  describe 'get_name_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_name_price
  # Get Name Price
  # Retrieves the price of a name. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
  # @param name the name to query price information for
  # @param [Hash] opts the optional parameters
  # @return [BnsGetNamePriceResponse]
  describe 'get_name_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_names_owned_by_address
  # Get Names Owned by Address
  # Retrieves a list of names owned by the address provided.
  # @param blockchain the layer-1 blockchain for the address
  # @param address the address to lookup
  # @param [Hash] opts the optional parameters
  # @return [BnsNamesOwnByAddressResponse]
  describe 'get_names_owned_by_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_namespace_names
  # Get Namespace Names
  # Retrieves a list of names within a given namespace.
  # @param tld the namespace to fetch names from
  # @param page names are returned in pages of size 100, so specify the page number.
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_namespace_names test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_namespace_price
  # Get Namespace Price
  # Retrieves the price of a namespace. The &#x60;amount&#x60; given will be in the smallest possible units of the currency.
  # @param tld the namespace to fetch price for
  # @param [Hash] opts the optional parameters
  # @return [BnsGetNamespacePriceResponse]
  describe 'get_namespace_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
