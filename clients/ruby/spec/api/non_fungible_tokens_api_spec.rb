=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for StacksBlockchainApi::NonFungibleTokensApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NonFungibleTokensApi' do
  before do
    # run before each test
    @api_instance = StacksBlockchainApi::NonFungibleTokensApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NonFungibleTokensApi' do
    it 'should create an instance of NonFungibleTokensApi' do
      expect(@api_instance).to be_instance_of(StacksBlockchainApi::NonFungibleTokensApi)
    end
  end

  # unit tests for get_contract_nft_metadata
  # Non fungible tokens metadata for contract id
  # Retrieves metadata for non fungible tokens for a given contract id. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
  # @param contract_id token&#39;s contract id
  # @param [Hash] opts the optional parameters
  # @return [NonFungibleTokenMetadata]
  describe 'get_contract_nft_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_nft_history
  # Non-Fungible Token history
  # Retrieves all events relevant to a Non-Fungible Token. Useful to determine the ownership history of a particular asset.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
  # @param asset_identifier token asset class identifier
  # @param value hex representation of the token&#39;s unique value
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of events to fetch
  # @option opts [Integer] :offset index of first event to fetch
  # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions
  # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
  # @return [NonFungibleTokenHistoryEventList]
  describe 'get_nft_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_nft_holdings
  # Non-Fungible Token holdings
  # Retrieves the list of Non-Fungible Tokens owned by the given principal (STX address or Smart Contract ID). Results can be filtered by one or more asset identifiers and can include metadata about the transaction that made the principal own each token.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
  # @param principal token owner&#39;s STX address or Smart Contract ID
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :asset_identifiers identifiers of the token asset classes to filter for
  # @option opts [Integer] :limit max number of tokens to fetch
  # @option opts [Integer] :offset index of first tokens to fetch
  # @option opts [Boolean] :unanchored whether or not to include tokens from unconfirmed transactions
  # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
  # @return [NonFungibleTokenHoldingsList]
  describe 'get_nft_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_nft_metadata_list
  # Non fungible tokens metadata list
  # Retrieves a list of non fungible tokens with their metadata. More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of tokens to fetch
  # @option opts [Integer] :offset index of first tokens to fetch
  # @return [NonFungibleTokensMetadataList]
  describe 'get_nft_metadata_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_nft_mints
  # Non-Fungible Token mints
  # Retrieves all mint events for a Non-Fungible Token asset class. Useful to determine which NFTs of a particular collection have been claimed.  More information on Non-Fungible Tokens on the Stacks blockchain can be found [here](https://docs.stacks.co/write-smart-contracts/tokens#non-fungible-tokens-nfts). 
  # @param asset_identifier token asset class identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of events to fetch
  # @option opts [Integer] :offset index of first event to fetch
  # @option opts [Boolean] :unanchored whether or not to include events from unconfirmed transactions
  # @option opts [Boolean] :tx_metadata whether or not to include the complete transaction metadata instead of just &#x60;tx_id&#x60;. Enabling this option can affect performance and response times.
  # @return [NonFungibleTokenMintList]
  describe 'get_nft_mints test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
