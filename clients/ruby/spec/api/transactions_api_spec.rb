=begin
#Stacks Blockchain API

#Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

The version of the OpenAPI document: v3.0.3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for StacksBlockchainApi::TransactionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TransactionsApi' do
  before do
    # run before each test
    @api_instance = StacksBlockchainApi::TransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TransactionsApi' do
    it 'should create an instance of TransactionsApi' do
      expect(@api_instance).to be_instance_of(StacksBlockchainApi::TransactionsApi)
    end
  end

  # unit tests for get_address_mempool_transactions
  # Transactions for address
  # Retrieves all transactions for a given address that are currently in mempool
  # @param address Transactions for the address
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of transactions to fetch
  # @option opts [Integer] :offset index of first transaction to fetch
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [Object]
  describe 'get_address_mempool_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dropped_mempool_transaction_list
  # Get dropped mempool transactions
  # Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of mempool transactions to fetch
  # @option opts [Integer] :offset index of first mempool transaction to fetch
  # @return [Object]
  describe 'get_dropped_mempool_transaction_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mempool_transaction_list
  # Get mempool transactions
  # Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sender_address Filter to only return transactions with this sender address.
  # @option opts [String] :recipient_address Filter to only return transactions with this recipient address (only applicable for STX transfer tx types).
  # @option opts [String] :address Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types).
  # @option opts [Integer] :limit max number of mempool transactions to fetch
  # @option opts [Integer] :offset index of first mempool transaction to fetch
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [MempoolTransactionListResponse]
  describe 'get_mempool_transaction_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_raw_transaction_by_id
  # Get Raw Transaction
  # Retrieves a hex encoded serialized transaction for a given ID 
  # @param tx_id Hash of transaction
  # @param [Hash] opts the optional parameters
  # @return [GetRawTransactionResult]
  describe 'get_raw_transaction_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transaction_by_id
  # Get transaction
  # Retrieves transaction details for a given transaction ID  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
  # @param tx_id Hash of transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :event_offset The number of events to skip
  # @option opts [Integer] :event_limit The numbers of events to return
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [AnyOfobjectobjectobjectobjectobject]
  describe 'get_transaction_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transaction_list
  # Get recent transactions
  # Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  &#x60;import type { TransactionResults } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of transactions to fetch
  # @option opts [Integer] :offset index of first transaction to fetch
  # @option opts [Array<String>] :type Filter by transaction type
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [TransactionResults]
  describe 'get_transaction_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transactions_by_block_hash
  # Transactions by block hash
  # Retrieves a list of all transactions within a block for a given block hash.
  # @param block_hash Hash of block
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of transactions to fetch
  # @option opts [Integer] :offset index of first transaction to fetch
  # @return [Object]
  describe 'get_transactions_by_block_hash test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transactions_by_block_height
  # Transactions by block height
  # Retrieves all transactions within a block at a given height
  # @param height Height of block
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit max number of transactions to fetch
  # @option opts [Integer] :offset index of first transaction to fetch
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [Object]
  describe 'get_transactions_by_block_height test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tx_list_details
  # Get list of details for transactions
  # Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  &#x60;import type { Transaction } from &#39;@stacks/stacks-blockchain-api-types&#39;;&#x60; 
  # @param tx_id Array of transaction ids
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :event_offset The number of events to skip
  # @option opts [Integer] :event_limit The numbers of events to return
  # @option opts [Boolean] :unanchored Include transaction data from unanchored (i.e. unconfirmed) microblocks
  # @return [Hash<String, AnyOfobjectobject>]
  describe 'get_tx_list_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_core_node_transactions
  # Broadcast raw transaction
  # Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :body 
  # @return [String]
  describe 'post_core_node_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
