//
// AccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountsAPI {

    /**
     Get account assets
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account assets to fetch (optional)
     - parameter offset: (query) index of first account assets to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state at that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountAssets(principal: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressAssetsListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountAssetsWithRequestBuilder(principal: principal, limit: limit, offset: offset, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account assets
     - GET /extended/v1/address/{principal}/assets
     - Retrieves a list of all assets events associated with an account or a Contract Identifier. This includes Transfers, Mints.
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account assets to fetch (optional)
     - parameter offset: (query) index of first account assets to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state at that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressAssetsListResponse> 
     */
    open class func getAccountAssetsWithRequestBuilder(principal: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressAssetsListResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/assets"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressAssetsListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account balances
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountBalance(principal: String, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressBalanceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountBalanceWithRequestBuilder(principal: principal, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account balances
     - GET /extended/v1/address/{principal}/balances
     - Retrieves total account balance information for a given Address or Contract Identifier. This includes the balances of  STX Tokens, Fungible Tokens and Non-Fungible Tokens for the account.
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressBalanceResponse> 
     */
    open class func getAccountBalanceWithRequestBuilder(principal: String, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressBalanceResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/balances"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressBalanceResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get inbound STX transfers
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) number of items to return (optional)
     - parameter offset: (query) number of items to skip (optional)
     - parameter height: (query) Filter for transfers only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountInbound(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressStxInboundListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountInboundWithRequestBuilder(principal: principal, limit: limit, offset: offset, height: height, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get inbound STX transfers
     - GET /extended/v1/address/{principal}/stx_inbound
     - Retrieves a list of STX transfers with memos to the given principal. This includes regular transfers from a stx-transfer transaction type, and transfers from contract-call transactions a the `send-many-memo` bulk sending contract. 
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) number of items to return (optional)
     - parameter offset: (query) number of items to skip (optional)
     - parameter height: (query) Filter for transfers only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressStxInboundListResponse> 
     */
    open class func getAccountInboundWithRequestBuilder(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressStxInboundListResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/stx_inbound"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressStxInboundListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account info
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter proof: (query) Returns object without the proof field if set to 0 (optional)
     - parameter tip: (query) The Stacks chain tip to query from (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountInfo(principal: String, proof: Int? = nil, tip: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountDataResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountInfoWithRequestBuilder(principal: principal, proof: proof, tip: tip).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account info
     - GET /v2/accounts/{principal}
     - Retrieves the account data for a given Account or a Contract Identifier  Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is an unsigned 64-bit integer, and the proofs are provided as hex strings.  For non-existent accounts, this does not return a 404 error, rather it returns an object with balance and nonce of 0. 
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter proof: (query) Returns object without the proof field if set to 0 (optional)
     - parameter tip: (query) The Stacks chain tip to query from (optional)
     - returns: RequestBuilder<AccountDataResponse> 
     */
    open class func getAccountInfoWithRequestBuilder(principal: String, proof: Int? = nil, tip: String? = nil) -> RequestBuilder<AccountDataResponse> {
        var localVariablePath = "/v2/accounts/{principal}"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "proof": proof?.encodeToJSON(),
            "tip": tip?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountDataResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get nft events
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) number of items to return (optional)
     - parameter offset: (query) number of items to skip (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func getAccountNft(principal: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressNftListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountNftWithRequestBuilder(principal: principal, limit: limit, offset: offset, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get nft events
     - GET /extended/v1/address/{principal}/nft_events
     - **NOTE:** This endpoint is deprecated in favor of [Non-Fungible Token holdings](#operation/get_nft_holdings).  Retrieves a list of all nfts owned by an address, contains the clarity value of the identifier of the nft. 
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) number of items to return (optional)
     - parameter offset: (query) number of items to skip (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressNftListResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getAccountNftWithRequestBuilder(principal: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressNftListResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/nft_events"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressNftListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the latest nonce used by an account
     
     - parameter principal: (path) Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) 
     - parameter blockHeight: (query) Optionally get the nonce at a given block height (optional)
     - parameter blockHash: (query) Optionally get the nonce at a given block hash (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountNonces(principal: String, blockHeight: Double? = nil, blockHash: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressNonces?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountNoncesWithRequestBuilder(principal: principal, blockHeight: blockHeight, blockHash: blockHash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the latest nonce used by an account
     - GET /extended/v1/address/{principal}/nonces
     - Retrieves the latest nonce values used by an account by inspecting the mempool, microblock transactions, and anchored transactions.
     - parameter principal: (path) Stacks address (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0&#x60;) 
     - parameter blockHeight: (query) Optionally get the nonce at a given block height (optional)
     - parameter blockHash: (query) Optionally get the nonce at a given block hash (optional)
     - returns: RequestBuilder<AddressNonces> 
     */
    open class func getAccountNoncesWithRequestBuilder(principal: String, blockHeight: Double? = nil, blockHash: String? = nil) -> RequestBuilder<AddressNonces> {
        var localVariablePath = "/extended/v1/address/{principal}/nonces"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "block_height": blockHeight?.encodeToJSON(),
            "block_hash": blockHash?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressNonces>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account STX balance
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountStxBalance(principal: String, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountStxBalanceWithRequestBuilder(principal: principal, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account STX balance
     - GET /extended/v1/address/{principal}/stx
     - Retrieves STX token balance for a given Address or Contract Identifier.
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getAccountStxBalanceWithRequestBuilder(principal: String, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/address/{principal}/stx"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account transactions
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account transactions to fetch (optional)
     - parameter offset: (query) index of first account transaction to fetch (optional)
     - parameter height: (query) Filter for transactions only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountTransactions(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressTransactionsListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountTransactionsWithRequestBuilder(principal: principal, limit: limit, offset: offset, height: height, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account transactions
     - GET /extended/v1/address/{principal}/transactions
     - Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).  If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account transactions to fetch (optional)
     - parameter offset: (query) index of first account transaction to fetch (optional)
     - parameter height: (query) Filter for transactions only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressTransactionsListResponse> 
     */
    open class func getAccountTransactionsWithRequestBuilder(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressTransactionsListResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/transactions"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressTransactionsListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account transactions including STX transfers for each transaction.
     
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account transactions to fetch (optional)
     - parameter offset: (query) index of first account transaction to fetch (optional)
     - parameter height: (query) Filter for transactions only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountTransactionsWithTransfers(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressTransactionsWithTransfersListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountTransactionsWithTransfersWithRequestBuilder(principal: principal, limit: limit, offset: offset, height: height, unanchored: unanchored, untilBlock: untilBlock).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account transactions including STX transfers for each transaction.
     - GET /extended/v1/address/{principal}/transactions_with_transfers
     - Retrieve all transactions for an account or contract identifier including STX transfers for each transaction.
     - parameter principal: (path) Stacks address or a Contract identifier (e.g. &#x60;SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info&#x60;) 
     - parameter limit: (query) max number of account transactions to fetch (optional)
     - parameter offset: (query) index of first account transaction to fetch (optional)
     - parameter height: (query) Filter for transactions only at this given block height (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter untilBlock: (query) returned data representing the state up until that point in time, rather than the current block. (optional)
     - returns: RequestBuilder<AddressTransactionsWithTransfersListResponse> 
     */
    open class func getAccountTransactionsWithTransfersWithRequestBuilder(principal: String, limit: Int? = nil, offset: Int? = nil, height: Double? = nil, unanchored: Bool? = nil, untilBlock: String? = nil) -> RequestBuilder<AddressTransactionsWithTransfersListResponse> {
        var localVariablePath = "/extended/v1/address/{principal}/transactions_with_transfers"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
            "until_block": untilBlock?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressTransactionsWithTransfersListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get account transaction information for specific transaction
     
     - parameter principal: (path) Stacks address or a contract identifier 
     - parameter txId: (path) Transaction id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSingleTransactionWithTransfers(principal: String, txId: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressTransactionWithTransfers?, _ error: Error?) -> Void)) -> RequestTask {
        return getSingleTransactionWithTransfersWithRequestBuilder(principal: principal, txId: txId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get account transaction information for specific transaction
     - GET /extended/v1/address/{principal}/{tx_id}/with_transfers
     - Retrieves transaction details for a given Transcation Id `tx_id`, for a given account or contract Identifier.
     - parameter principal: (path) Stacks address or a contract identifier 
     - parameter txId: (path) Transaction id 
     - returns: RequestBuilder<AddressTransactionWithTransfers> 
     */
    open class func getSingleTransactionWithTransfersWithRequestBuilder(principal: String, txId: String) -> RequestBuilder<AddressTransactionWithTransfers> {
        var localVariablePath = "/extended/v1/address/{principal}/{tx_id}/with_transfers"
        let principalPreEscape = "\(APIHelper.mapValueToPathItem(principal))"
        let principalPostEscape = principalPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{principal}", with: principalPostEscape, options: .literal, range: nil)
        let txIdPreEscape = "\(APIHelper.mapValueToPathItem(txId))"
        let txIdPostEscape = txIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tx_id}", with: txIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressTransactionWithTransfers>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
