//
// BlocksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BlocksAPI {

    /**
     Get block by burnchain block hash
     
     - parameter burnBlockHash: (path) Hash of the burnchain block 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockByBurnBlockHash(burnBlockHash: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockByBurnBlockHashWithRequestBuilder(burnBlockHash: burnBlockHash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get block by burnchain block hash
     - GET /extended/v1/block/by_burn_block_hash/{burn_block_hash}
     - Retrieves block details of a specific block for a given burnchain block hash
     - parameter burnBlockHash: (path) Hash of the burnchain block 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByBurnBlockHashWithRequestBuilder(burnBlockHash: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/block/by_burn_block_hash/{burn_block_hash}"
        let burnBlockHashPreEscape = "\(APIHelper.mapValueToPathItem(burnBlockHash))"
        let burnBlockHashPostEscape = burnBlockHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{burn_block_hash}", with: burnBlockHashPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get block by burnchain height
     
     - parameter burnBlockHeight: (path) Height of the burn chain block 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockByBurnBlockHeight(burnBlockHeight: Double, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockByBurnBlockHeightWithRequestBuilder(burnBlockHeight: burnBlockHeight).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get block by burnchain height
     - GET /extended/v1/block/by_burn_block_height/{burn_block_height}
     - Retrieves block details of a specific block for a given burn chain height
     - parameter burnBlockHeight: (path) Height of the burn chain block 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByBurnBlockHeightWithRequestBuilder(burnBlockHeight: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/block/by_burn_block_height/{burn_block_height}"
        let burnBlockHeightPreEscape = "\(APIHelper.mapValueToPathItem(burnBlockHeight))"
        let burnBlockHeightPostEscape = burnBlockHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{burn_block_height}", with: burnBlockHeightPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get block by hash
     
     - parameter hash: (path) Hash of the block 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockByHash(hash: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: Block?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockByHashWithRequestBuilder(hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get block by hash
     - GET /extended/v1/block/{hash}
     - Retrieves block details of a specific block for a given chain height
     - parameter hash: (path) Hash of the block 
     - returns: RequestBuilder<Block> 
     */
    open class func getBlockByHashWithRequestBuilder(hash: String) -> RequestBuilder<Block> {
        var localVariablePath = "/extended/v1/block/{hash}"
        let hashPreEscape = "\(APIHelper.mapValueToPathItem(hash))"
        let hashPostEscape = hashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hash}", with: hashPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Block>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get block by height
     
     - parameter height: (path) Height of the block 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockByHeight(height: Double, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockByHeightWithRequestBuilder(height: height).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get block by height
     - GET /extended/v1/block/by_height/{height}
     - Retrieves block details of a specific block at a given block height
     - parameter height: (path) Height of the block 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBlockByHeightWithRequestBuilder(height: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/block/by_height/{height}"
        let heightPreEscape = "\(APIHelper.mapValueToPathItem(height))"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get recent blocks
     
     - parameter limit: (query) max number of blocks to fetch (optional, default to 20)
     - parameter offset: (query) index of first block to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent blocks
     - GET /extended/v1/block
     - Retrieves a list of recently mined blocks  If you need to actively monitor new blocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     - parameter limit: (query) max number of blocks to fetch (optional, default to 20)
     - parameter offset: (query) index of first block to fetch (optional)
     - returns: RequestBuilder<BlockListResponse> 
     */
    open class func getBlockListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<BlockListResponse> {
        let localVariablePath = "/extended/v1/block"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
