//
// FaucetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FaucetsAPI {

    /**
     Add testnet BTC tokens to address
     
     - parameter address: (query) A valid testnet BTC address 
     - parameter inlineObject1: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func runFaucetBtc(address: String, inlineObject1: InlineObject1? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return runFaucetBtcWithRequestBuilder(address: address, inlineObject1: inlineObject1).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add testnet BTC tokens to address
     - POST /extended/v1/faucets/btc
     - Add 1 BTC token to the specified testnet BTC address.  The endpoint returns the transaction ID, which you can use to view the transaction in a testnet Bitcoin block explorer. The tokens are delivered once the transaction has been included in a block.  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet. 
     - parameter address: (query) A valid testnet BTC address 
     - parameter inlineObject1: (body)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func runFaucetBtcWithRequestBuilder(address: String, inlineObject1: InlineObject1? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/extended/v1/faucets/btc"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject1)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get STX testnet tokens
     
     - parameter address: (query) A valid testnet STX address 
     - parameter stacking: (query) Request the amount of STX tokens needed for individual address stacking (optional, default to false)
     - parameter inlineObject: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func runFaucetStx(address: String, stacking: Bool? = nil, inlineObject: InlineObject? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RunFaucetResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return runFaucetStxWithRequestBuilder(address: address, stacking: stacking, inlineObject: inlineObject).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get STX testnet tokens
     - POST /extended/v1/faucets/stx
     - Add 500 STX tokens to the specified testnet address. Testnet STX addresses begin with `ST`. If the `stacking` parameter is set to `true`, the faucet will add the required number of tokens for individual stacking to the specified testnet address.  The endpoint returns the transaction ID, which you can use to view the transaction in the [Stacks Explorer](https://explorer.stacks.co/?chain=testnet). The tokens are delivered once the transaction has been included in an anchor block.  A common reason for failed faucet transactions is that the faucet has run out of tokens. If you are experiencing failed faucet transactions to a testnet address, you can get help in [Discord](https://stacks.chat).  **Note:** This is a testnet only endpoint. This endpoint will not work on the mainnet. 
     - parameter address: (query) A valid testnet STX address 
     - parameter stacking: (query) Request the amount of STX tokens needed for individual address stacking (optional, default to false)
     - parameter inlineObject: (body)  (optional)
     - returns: RequestBuilder<RunFaucetResponse> 
     */
    open class func runFaucetStxWithRequestBuilder(address: String, stacking: Bool? = nil, inlineObject: InlineObject? = nil) -> RequestBuilder<RunFaucetResponse> {
        let localVariablePath = "/extended/v1/faucets/stx"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address.encodeToJSON(),
            "stacking": stacking?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RunFaucetResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
