//
// InfoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InfoAPI {

    /**
     Get Core API info
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCoreApiInfo(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CoreNodeInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getCoreApiInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Core API info
     - GET /v2/info
     - Retrieves information about the Core API including the server version
     - returns: RequestBuilder<CoreNodeInfoResponse> 
     */
    open class func getCoreApiInfoWithRequestBuilder() -> RequestBuilder<CoreNodeInfoResponse> {
        let localVariablePath = "/v2/info"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CoreNodeInfoResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter network
     */
    public enum Network_getNetworkBlockTimeByNetwork: String, CaseIterable {
        case testnet = "testnet"
        case mainnet = "mainnet"
    }

    /**
     Get a given network's target block time
     
     - parameter network: (path) Which network to retrieve the target block time of 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNetworkBlockTimeByNetwork(network: Network_getNetworkBlockTimeByNetwork, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getNetworkBlockTimeByNetworkWithRequestBuilder(network: network).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a given network's target block time
     - GET /extended/v1/info/network_block_time/{network}
     - Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     - parameter network: (path) Which network to retrieve the target block time of 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getNetworkBlockTimeByNetworkWithRequestBuilder(network: Network_getNetworkBlockTimeByNetwork) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/info/network_block_time/{network}"
        let networkPreEscape = "\(network.rawValue)"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the network target block time
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNetworkBlockTimes(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: NetworkBlockTimesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getNetworkBlockTimesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the network target block time
     - GET /extended/v1/info/network_block_times
     - Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     - returns: RequestBuilder<NetworkBlockTimesResponse> 
     */
    open class func getNetworkBlockTimesWithRequestBuilder() -> RequestBuilder<NetworkBlockTimesResponse> {
        let localVariablePath = "/extended/v1/info/network_block_times"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NetworkBlockTimesResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Proof-of-Transfer details
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPoxInfo(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CoreNodePoxResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPoxInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Proof-of-Transfer details
     - GET /v2/pox
     - Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     - returns: RequestBuilder<CoreNodePoxResponse> 
     */
    open class func getPoxInfoWithRequestBuilder() -> RequestBuilder<CoreNodePoxResponse> {
        let localVariablePath = "/v2/pox"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CoreNodePoxResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     API status
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStatus(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServerStatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getStatusWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     API status
     - GET /extended/v1/status
     - Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     - returns: RequestBuilder<ServerStatusResponse> 
     */
    open class func getStatusWithRequestBuilder() -> RequestBuilder<ServerStatusResponse> {
        let localVariablePath = "/extended/v1/status"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServerStatusResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get total and unlocked STX supply
     
     - parameter height: (query) The block height at which to query supply details from, if not provided then the latest block height is used (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStxSupply(height: Double? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetStxSupplyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getStxSupplyWithRequestBuilder(height: height).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get total and unlocked STX supply
     - GET /extended/v1/stx_supply
     - Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     - parameter height: (query) The block height at which to query supply details from, if not provided then the latest block height is used (optional)
     - returns: RequestBuilder<GetStxSupplyResponse> 
     */
    open class func getStxSupplyWithRequestBuilder(height: Double? = nil) -> RequestBuilder<GetStxSupplyResponse> {
        let localVariablePath = "/extended/v1/stx_supply"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "height": height?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetStxSupplyResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get circulating STX supply in plain text format
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStxSupplyCirculatingPlain(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getStxSupplyCirculatingPlainWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get circulating STX supply in plain text format
     - GET /extended/v1/stx_supply/circulating/plain
     - Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     - returns: RequestBuilder<String> 
     */
    open class func getStxSupplyCirculatingPlainWithRequestBuilder() -> RequestBuilder<String> {
        let localVariablePath = "/extended/v1/stx_supply/circulating/plain"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get total STX supply in plain text format
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStxSupplyTotalSupplyPlain(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getStxSupplyTotalSupplyPlainWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get total STX supply in plain text format
     - GET /extended/v1/stx_supply/total/plain
     - Retrieves the total supply for STX tokens as plain text.
     - returns: RequestBuilder<String> 
     */
    open class func getStxSupplyTotalSupplyPlainWithRequestBuilder() -> RequestBuilder<String> {
        let localVariablePath = "/extended/v1/stx_supply/total/plain"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     
     - parameter height: (query) The block height at which to query supply details from, if not provided then the latest block height is used (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTotalStxSupplyLegacyFormat(height: Double? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetStxSupplyLegacyFormatResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTotalStxSupplyLegacyFormatWithRequestBuilder(height: height).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     - GET /extended/v1/stx_supply/legacy_format
     - Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     - parameter height: (query) The block height at which to query supply details from, if not provided then the latest block height is used (optional)
     - returns: RequestBuilder<GetStxSupplyLegacyFormatResponse> 
     */
    open class func getTotalStxSupplyLegacyFormatWithRequestBuilder(height: Double? = nil) -> RequestBuilder<GetStxSupplyLegacyFormatResponse> {
        let localVariablePath = "/extended/v1/stx_supply/legacy_format"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "height": height?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetStxSupplyLegacyFormatResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
