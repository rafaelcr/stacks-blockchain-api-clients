//
// NamesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NamesAPI {

    /**
     Get Zone File
     
     - parameter name: (path) fully-qualified name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func fetchZoneFile(name: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyOfobjectobject?, _ error: Error?) -> Void)) -> RequestTask {
        return fetchZoneFileWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Zone File
     - GET /v1/names/{name}/zonefile
     - Retrieves a userâ€™s raw zone file. This only works for RFC-compliant zone files. This method returns an error for names that have non-standard zone files.
     - parameter name: (path) fully-qualified name 
     - returns: RequestBuilder<AnyOfobjectobject> 
     */
    open class func fetchZoneFileWithRequestBuilder(name: String) -> RequestBuilder<AnyOfobjectobject> {
        var localVariablePath = "/v1/names/{name}/zonefile"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyOfobjectobject>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get All Names
     
     - parameter page: (query) names are returned in pages of size 100, so specify the page number. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllNames(page: Int, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllNamesWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get All Names
     - GET /v1/names
     - Retrieves a list of all names known to the node.
     - parameter page: (query) names are returned in pages of size 100, so specify the page number. 
     - returns: RequestBuilder<[String]> 
     */
    open class func getAllNamesWithRequestBuilder(page: Int) -> RequestBuilder<[String]> {
        let localVariablePath = "/v1/names"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get All Namespaces
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllNamespaces(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BnsGetAllNamespacesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllNamespacesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get All Namespaces
     - GET /v1/namespaces
     - Retrieves a list of all namespaces known to the node.
     - returns: RequestBuilder<BnsGetAllNamespacesResponse> 
     */
    open class func getAllNamespacesWithRequestBuilder() -> RequestBuilder<BnsGetAllNamespacesResponse> {
        let localVariablePath = "/v1/namespaces"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BnsGetAllNamespacesResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Historical Zone File
     
     - parameter name: (path) fully-qualified name 
     - parameter zoneFileHash: (path) zone file hash 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getHistoricalZoneFile(name: String, zoneFileHash: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyOfobjectobject?, _ error: Error?) -> Void)) -> RequestTask {
        return getHistoricalZoneFileWithRequestBuilder(name: name, zoneFileHash: zoneFileHash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Historical Zone File
     - GET /v1/names/{name}/zonefile/{zoneFileHash}
     - Retrieves the historical zonefile specified by the username and zone hash.
     - parameter name: (path) fully-qualified name 
     - parameter zoneFileHash: (path) zone file hash 
     - returns: RequestBuilder<AnyOfobjectobject> 
     */
    open class func getHistoricalZoneFileWithRequestBuilder(name: String, zoneFileHash: String) -> RequestBuilder<AnyOfobjectobject> {
        var localVariablePath = "/v1/names/{name}/zonefile/{zoneFileHash}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let zoneFileHashPreEscape = "\(APIHelper.mapValueToPathItem(zoneFileHash))"
        let zoneFileHashPostEscape = zoneFileHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{zoneFileHash}", with: zoneFileHashPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyOfobjectobject>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Name History
     
     - parameter name: (path) name to query 
     - parameter page: (query) the page (in 20-entry pages) of the history to fetch 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNameHistory(name: String, page: Int, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getNameHistoryWithRequestBuilder(name: name, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Name History
     - GET /v1/names/{name}/history
     - Retrieves a history of all blockchain records of a registered name.
     - parameter name: (path) name to query 
     - parameter page: (query) the page (in 20-entry pages) of the history to fetch 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getNameHistoryWithRequestBuilder(name: String, page: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/names/{name}/history"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Name Details
     
     - parameter name: (path) fully-qualified name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNameInfo(name: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BnsGetNameInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getNameInfoWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Name Details
     - GET /v1/names/{name}
     - Retrieves details of a given name including the `address`, `status` and last transaction id - `last_txid`.
     - parameter name: (path) fully-qualified name 
     - returns: RequestBuilder<BnsGetNameInfoResponse> 
     */
    open class func getNameInfoWithRequestBuilder(name: String) -> RequestBuilder<BnsGetNameInfoResponse> {
        var localVariablePath = "/v1/names/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BnsGetNameInfoResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Name Price
     
     - parameter name: (path) the name to query price information for 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamePrice(name: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BnsGetNamePriceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamePriceWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Name Price
     - GET /v2/prices/names/{name}
     - Retrieves the price of a name. The `amount` given will be in the smallest possible units of the currency.
     - parameter name: (path) the name to query price information for 
     - returns: RequestBuilder<BnsGetNamePriceResponse> 
     */
    open class func getNamePriceWithRequestBuilder(name: String) -> RequestBuilder<BnsGetNamePriceResponse> {
        var localVariablePath = "/v2/prices/names/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BnsGetNamePriceResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Names Owned by Address
     
     - parameter blockchain: (path) the layer-1 blockchain for the address 
     - parameter address: (path) the address to lookup 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamesOwnedByAddress(blockchain: String, address: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BnsNamesOwnByAddressResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamesOwnedByAddressWithRequestBuilder(blockchain: blockchain, address: address).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Names Owned by Address
     - GET /v1/addresses/{blockchain}/{address}
     - Retrieves a list of names owned by the address provided.
     - parameter blockchain: (path) the layer-1 blockchain for the address 
     - parameter address: (path) the address to lookup 
     - returns: RequestBuilder<BnsNamesOwnByAddressResponse> 
     */
    open class func getNamesOwnedByAddressWithRequestBuilder(blockchain: String, address: String) -> RequestBuilder<BnsNamesOwnByAddressResponse> {
        var localVariablePath = "/v1/addresses/{blockchain}/{address}"
        let blockchainPreEscape = "\(APIHelper.mapValueToPathItem(blockchain))"
        let blockchainPostEscape = blockchainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockchain}", with: blockchainPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BnsNamesOwnByAddressResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Namespace Names
     
     - parameter tld: (path) the namespace to fetch names from 
     - parameter page: (query) names are returned in pages of size 100, so specify the page number. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamespaceNames(tld: String, page: Int, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamespaceNamesWithRequestBuilder(tld: tld, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Namespace Names
     - GET /v1/namespaces/{tld}/names
     - Retrieves a list of names within a given namespace.
     - parameter tld: (path) the namespace to fetch names from 
     - parameter page: (query) names are returned in pages of size 100, so specify the page number. 
     - returns: RequestBuilder<[String]> 
     */
    open class func getNamespaceNamesWithRequestBuilder(tld: String, page: Int) -> RequestBuilder<[String]> {
        var localVariablePath = "/v1/namespaces/{tld}/names"
        let tldPreEscape = "\(APIHelper.mapValueToPathItem(tld))"
        let tldPostEscape = tldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tld}", with: tldPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Namespace Price
     
     - parameter tld: (path) the namespace to fetch price for 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamespacePrice(tld: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BnsGetNamespacePriceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamespacePriceWithRequestBuilder(tld: tld).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Namespace Price
     - GET /v2/prices/namespaces/{tld}
     - Retrieves the price of a namespace. The `amount` given will be in the smallest possible units of the currency.
     - parameter tld: (path) the namespace to fetch price for 
     - returns: RequestBuilder<BnsGetNamespacePriceResponse> 
     */
    open class func getNamespacePriceWithRequestBuilder(tld: String) -> RequestBuilder<BnsGetNamespacePriceResponse> {
        var localVariablePath = "/v2/prices/namespaces/{tld}"
        let tldPreEscape = "\(APIHelper.mapValueToPathItem(tld))"
        let tldPostEscape = tldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tld}", with: tldPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BnsGetNamespacePriceResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
