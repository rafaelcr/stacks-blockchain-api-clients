//
// RosettaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RosettaAPI {

    /**
     Get an Account Balance
     
     - parameter rosettaAccountBalanceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaAccountBalance(rosettaAccountBalanceRequest: RosettaAccountBalanceRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaAccountBalanceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaAccountBalanceWithRequestBuilder(rosettaAccountBalanceRequest: rosettaAccountBalanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an Account Balance
     - POST /rosetta/v1/account/balance
     - An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed. 
     - parameter rosettaAccountBalanceRequest: (body)  
     - returns: RequestBuilder<RosettaAccountBalanceResponse> 
     */
    open class func rosettaAccountBalanceWithRequestBuilder(rosettaAccountBalanceRequest: RosettaAccountBalanceRequest) -> RequestBuilder<RosettaAccountBalanceResponse> {
        let localVariablePath = "/rosetta/v1/account/balance"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaAccountBalanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaAccountBalanceResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a Block
     
     - parameter rosettaBlockRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaBlock(rosettaBlockRequest: RosettaBlockRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaBlockResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaBlockWithRequestBuilder(rosettaBlockRequest: rosettaBlockRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Block
     - POST /rosetta/v1/block
     - Retrieves the Block information for a given block identifier including a list of all transactions in the block.
     - parameter rosettaBlockRequest: (body)  
     - returns: RequestBuilder<RosettaBlockResponse> 
     */
    open class func rosettaBlockWithRequestBuilder(rosettaBlockRequest: RosettaBlockRequest) -> RequestBuilder<RosettaBlockResponse> {
        let localVariablePath = "/rosetta/v1/block"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaBlockRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaBlockResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a Block Transaction
     
     - parameter rosettaBlockTransactionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaBlockTransaction(rosettaBlockTransactionRequest: RosettaBlockTransactionRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaBlockTransactionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaBlockTransactionWithRequestBuilder(rosettaBlockTransactionRequest: rosettaBlockTransactionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Block Transaction
     - POST /rosetta/v1/block/transaction
     - Retrieves a Transaction included in a block that is not returned in a BlockResponse.
     - parameter rosettaBlockTransactionRequest: (body)  
     - returns: RequestBuilder<RosettaBlockTransactionResponse> 
     */
    open class func rosettaBlockTransactionWithRequestBuilder(rosettaBlockTransactionRequest: RosettaBlockTransactionRequest) -> RequestBuilder<RosettaBlockTransactionResponse> {
        let localVariablePath = "/rosetta/v1/block/transaction"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaBlockTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaBlockTransactionResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Network Transaction from Signatures
     
     - parameter rosettaConstructionCombineRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionCombine(rosettaConstructionCombineRequest: RosettaConstructionCombineRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionCombineResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionCombineWithRequestBuilder(rosettaConstructionCombineRequest: rosettaConstructionCombineRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Network Transaction from Signatures
     - POST /rosetta/v1/construction/combine
     - Take unsigned transaction and signature, combine both and return signed transaction
     - parameter rosettaConstructionCombineRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionCombineResponse> 
     */
    open class func rosettaConstructionCombineWithRequestBuilder(rosettaConstructionCombineRequest: RosettaConstructionCombineRequest) -> RequestBuilder<RosettaConstructionCombineResponse> {
        let localVariablePath = "/rosetta/v1/construction/combine"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionCombineRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionCombineResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Derive an AccountIdentifier from a PublicKey
     
     - parameter rosettaConstructionDeriveRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionDerive(rosettaConstructionDeriveRequest: RosettaConstructionDeriveRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionDeriveResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionDeriveWithRequestBuilder(rosettaConstructionDeriveRequest: rosettaConstructionDeriveRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Derive an AccountIdentifier from a PublicKey
     - POST /rosetta/v1/construction/derive
     - Retrieves the Account Identifier information based on a Public Key for a given network
     - parameter rosettaConstructionDeriveRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionDeriveResponse> 
     */
    open class func rosettaConstructionDeriveWithRequestBuilder(rosettaConstructionDeriveRequest: RosettaConstructionDeriveRequest) -> RequestBuilder<RosettaConstructionDeriveResponse> {
        let localVariablePath = "/rosetta/v1/construction/derive"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionDeriveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionDeriveResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the Hash of a Signed Transaction
     
     - parameter rosettaConstructionHashRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionHash(rosettaConstructionHashRequest: RosettaConstructionHashRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionHashResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionHashWithRequestBuilder(rosettaConstructionHashRequest: rosettaConstructionHashRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the Hash of a Signed Transaction
     - POST /rosetta/v1/construction/hash
     - Retrieves the network-specific transaction hash for a signed transaction.
     - parameter rosettaConstructionHashRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionHashResponse> 
     */
    open class func rosettaConstructionHashWithRequestBuilder(rosettaConstructionHashRequest: RosettaConstructionHashRequest) -> RequestBuilder<RosettaConstructionHashResponse> {
        let localVariablePath = "/rosetta/v1/construction/hash"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionHashRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionHashResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Metadata for Transaction Construction
     
     - parameter rosettaConstructionMetadataRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionMetadata(rosettaConstructionMetadataRequest: RosettaConstructionMetadataRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionMetadataResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionMetadataWithRequestBuilder(rosettaConstructionMetadataRequest: rosettaConstructionMetadataRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Metadata for Transaction Construction
     - POST /rosetta/v1/construction/metadata
     - To Do
     - parameter rosettaConstructionMetadataRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionMetadataResponse> 
     */
    open class func rosettaConstructionMetadataWithRequestBuilder(rosettaConstructionMetadataRequest: RosettaConstructionMetadataRequest) -> RequestBuilder<RosettaConstructionMetadataResponse> {
        let localVariablePath = "/rosetta/v1/construction/metadata"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionMetadataRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionMetadataResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Parse a Transaction
     
     - parameter rosettaConstructionParseRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionParse(rosettaConstructionParseRequest: RosettaConstructionParseRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionParseResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionParseWithRequestBuilder(rosettaConstructionParseRequest: rosettaConstructionParseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Parse a Transaction
     - POST /rosetta/v1/construction/parse
     - TODO
     - parameter rosettaConstructionParseRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionParseResponse> 
     */
    open class func rosettaConstructionParseWithRequestBuilder(rosettaConstructionParseRequest: RosettaConstructionParseRequest) -> RequestBuilder<RosettaConstructionParseResponse> {
        let localVariablePath = "/rosetta/v1/construction/parse"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionParseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionParseResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Generate an Unsigned Transaction and Signing Payloads
     
     - parameter rosettaConstructionPayloadsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionPayloads(rosettaConstructionPayloadsRequest: RosettaConstructionPayloadsRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionPayloadResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionPayloadsWithRequestBuilder(rosettaConstructionPayloadsRequest: rosettaConstructionPayloadsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate an Unsigned Transaction and Signing Payloads
     - POST /rosetta/v1/construction/payloads
     - Generate and unsigned transaction from operations and metadata
     - parameter rosettaConstructionPayloadsRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionPayloadResponse> 
     */
    open class func rosettaConstructionPayloadsWithRequestBuilder(rosettaConstructionPayloadsRequest: RosettaConstructionPayloadsRequest) -> RequestBuilder<RosettaConstructionPayloadResponse> {
        let localVariablePath = "/rosetta/v1/construction/payloads"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionPayloadsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionPayloadResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a Request to Fetch Metadata
     
     - parameter rosettaConstructionPreprocessRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionPreprocess(rosettaConstructionPreprocessRequest: RosettaConstructionPreprocessRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionPreprocessResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionPreprocessWithRequestBuilder(rosettaConstructionPreprocessRequest: rosettaConstructionPreprocessRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Request to Fetch Metadata
     - POST /rosetta/v1/construction/preprocess
     - TODO
     - parameter rosettaConstructionPreprocessRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionPreprocessResponse> 
     */
    open class func rosettaConstructionPreprocessWithRequestBuilder(rosettaConstructionPreprocessRequest: RosettaConstructionPreprocessRequest) -> RequestBuilder<RosettaConstructionPreprocessResponse> {
        let localVariablePath = "/rosetta/v1/construction/preprocess"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionPreprocessRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionPreprocessResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Submit a Signed Transaction
     
     - parameter rosettaConstructionSubmitRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaConstructionSubmit(rosettaConstructionSubmitRequest: RosettaConstructionSubmitRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaConstructionSubmitResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaConstructionSubmitWithRequestBuilder(rosettaConstructionSubmitRequest: rosettaConstructionSubmitRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit a Signed Transaction
     - POST /rosetta/v1/construction/submit
     - Submit a pre-signed transaction to the node.
     - parameter rosettaConstructionSubmitRequest: (body)  
     - returns: RequestBuilder<RosettaConstructionSubmitResponse> 
     */
    open class func rosettaConstructionSubmitWithRequestBuilder(rosettaConstructionSubmitRequest: RosettaConstructionSubmitRequest) -> RequestBuilder<RosettaConstructionSubmitResponse> {
        let localVariablePath = "/rosetta/v1/construction/submit"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaConstructionSubmitRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaConstructionSubmitResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get All Mempool Transactions
     
     - parameter rosettaMempoolRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaMempool(rosettaMempoolRequest: RosettaMempoolRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaMempoolResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaMempoolWithRequestBuilder(rosettaMempoolRequest: rosettaMempoolRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get All Mempool Transactions
     - POST /rosetta/v1/mempool
     - Retrieves a list of transcations currently in the mempool for a given network.
     - parameter rosettaMempoolRequest: (body)  
     - returns: RequestBuilder<RosettaMempoolResponse> 
     */
    open class func rosettaMempoolWithRequestBuilder(rosettaMempoolRequest: RosettaMempoolRequest) -> RequestBuilder<RosettaMempoolResponse> {
        let localVariablePath = "/rosetta/v1/mempool"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaMempoolRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaMempoolResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a Mempool Transaction
     
     - parameter rosettaMempoolTransactionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaMempoolTransaction(rosettaMempoolTransactionRequest: RosettaMempoolTransactionRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaMempoolTransactionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaMempoolTransactionWithRequestBuilder(rosettaMempoolTransactionRequest: rosettaMempoolTransactionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Mempool Transaction
     - POST /rosetta/v1/mempool/transaction
     - Retrieves transaction details from the mempool for a given transaction id from a given network.
     - parameter rosettaMempoolTransactionRequest: (body)  
     - returns: RequestBuilder<RosettaMempoolTransactionResponse> 
     */
    open class func rosettaMempoolTransactionWithRequestBuilder(rosettaMempoolTransactionRequest: RosettaMempoolTransactionRequest) -> RequestBuilder<RosettaMempoolTransactionResponse> {
        let localVariablePath = "/rosetta/v1/mempool/transaction"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaMempoolTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaMempoolTransactionResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get List of Available Networks
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaNetworkList(apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaNetworkListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaNetworkListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get List of Available Networks
     - POST /rosetta/v1/network/list
     - Retrieves a list of NetworkIdentifiers that the Rosetta server supports.
     - returns: RequestBuilder<RosettaNetworkListResponse> 
     */
    open class func rosettaNetworkListWithRequestBuilder() -> RequestBuilder<RosettaNetworkListResponse> {
        let localVariablePath = "/rosetta/v1/network/list"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaNetworkListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Network Options
     
     - parameter rosettaOptionsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaNetworkOptions(rosettaOptionsRequest: RosettaOptionsRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: RosettaNetworkOptionsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaNetworkOptionsWithRequestBuilder(rosettaOptionsRequest: rosettaOptionsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Network Options
     - POST /rosetta/v1/network/options
     - Retrieves the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network. 
     - parameter rosettaOptionsRequest: (body)  
     - returns: RequestBuilder<RosettaNetworkOptionsResponse> 
     */
    open class func rosettaNetworkOptionsWithRequestBuilder(rosettaOptionsRequest: RosettaOptionsRequest) -> RequestBuilder<RosettaNetworkOptionsResponse> {
        let localVariablePath = "/rosetta/v1/network/options"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaOptionsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RosettaNetworkOptionsResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Network Status
     
     - parameter rosettaStatusRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rosettaNetworkStatus(rosettaStatusRequest: RosettaStatusRequest, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: AnyCodable]?, _ error: Error?) -> Void)) -> RequestTask {
        return rosettaNetworkStatusWithRequestBuilder(rosettaStatusRequest: rosettaStatusRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Network Status
     - POST /rosetta/v1/network/status
     - Retrieves the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here. 
     - parameter rosettaStatusRequest: (body)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func rosettaNetworkStatusWithRequestBuilder(rosettaStatusRequest: RosettaStatusRequest) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/rosetta/v1/network/status"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rosettaStatusRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
