//
// SearchAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SearchAPI {

    /**
     Search
     
     - parameter id: (path) The hex hash string for a block or transaction, account address, or contract address 
     - parameter includeMetadata: (query) This includes the detailed data for purticular hash in the response (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchById(id: String, includeMetadata: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyOfobjectobject?, _ error: Error?) -> Void)) -> RequestTask {
        return searchByIdWithRequestBuilder(id: id, includeMetadata: includeMetadata).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search
     - GET /extended/v1/search/{id}
     - Search blocks, transactions, contracts, or accounts by hash/ID
     - parameter id: (path) The hex hash string for a block or transaction, account address, or contract address 
     - parameter includeMetadata: (query) This includes the detailed data for purticular hash in the response (optional)
     - returns: RequestBuilder<AnyOfobjectobject> 
     */
    open class func searchByIdWithRequestBuilder(id: String, includeMetadata: Bool? = nil) -> RequestBuilder<AnyOfobjectobject> {
        var localVariablePath = "/extended/v1/search/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_metadata": includeMetadata?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyOfobjectobject>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
