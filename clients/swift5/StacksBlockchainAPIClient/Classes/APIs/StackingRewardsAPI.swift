//
// StackingRewardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StackingRewardsAPI {

    /**
     Get recent burnchain reward recipients
     
     - parameter limit: (query) max number of rewards to fetch (optional, default to 96)
     - parameter offset: (query) index of first rewards to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBurnchainRewardList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BurnchainRewardListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getBurnchainRewardListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent burnchain reward recipients
     - GET /extended/v1/burnchain/rewards
     - Retrieves a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     - parameter limit: (query) max number of rewards to fetch (optional, default to 96)
     - parameter offset: (query) index of first rewards to fetch (optional)
     - returns: RequestBuilder<BurnchainRewardListResponse> 
     */
    open class func getBurnchainRewardListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<BurnchainRewardListResponse> {
        let localVariablePath = "/extended/v1/burnchain/rewards"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BurnchainRewardListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get recent burnchain reward for the given recipient
     
     - parameter address: (path) Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - parameter limit: (query) max number of rewards to fetch (optional)
     - parameter offset: (query) index of first rewards to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBurnchainRewardListByAddress(address: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getBurnchainRewardListByAddressWithRequestBuilder(address: address, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent burnchain reward for the given recipient
     - GET /extended/v1/burnchain/rewards/{address}
     - Retrieves a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     - parameter address: (path) Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - parameter limit: (query) max number of rewards to fetch (optional)
     - parameter offset: (query) index of first rewards to fetch (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBurnchainRewardListByAddressWithRequestBuilder(address: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/burnchain/rewards/{address}"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get recent reward slot holders
     
     - parameter limit: (query) max number of items to fetch (optional, default to 96)
     - parameter offset: (query) index of the first items to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBurnchainRewardSlotHolders(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BurnchainRewardSlotHolderListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getBurnchainRewardSlotHoldersWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent reward slot holders
     - GET /extended/v1/burnchain/reward_slot_holders
     - Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments.
     - parameter limit: (query) max number of items to fetch (optional, default to 96)
     - parameter offset: (query) index of the first items to fetch (optional)
     - returns: RequestBuilder<BurnchainRewardSlotHolderListResponse> 
     */
    open class func getBurnchainRewardSlotHoldersWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<BurnchainRewardSlotHolderListResponse> {
        let localVariablePath = "/extended/v1/burnchain/reward_slot_holders"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BurnchainRewardSlotHolderListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get recent reward slot holder entries for the given address
     
     - parameter address: (path) Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - parameter limit: (query) max number of items to fetch (optional)
     - parameter offset: (query) index of the first items to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBurnchainRewardSlotHoldersByAddress(address: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getBurnchainRewardSlotHoldersByAddressWithRequestBuilder(address: address, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent reward slot holder entries for the given address
     - GET /extended/v1/burnchain/reward_slot_holders/{address}
     - Retrieves a list of the Bitcoin addresses that would validly receive Proof-of-Transfer commitments for a given reward slot holder recipient address.
     - parameter address: (path) Reward slot holder recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - parameter limit: (query) max number of items to fetch (optional)
     - parameter offset: (query) index of the first items to fetch (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getBurnchainRewardSlotHoldersByAddressWithRequestBuilder(address: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/burnchain/reward_slot_holders/{address}"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get total burnchain rewards for the given recipient
     
     - parameter address: (path) Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBurnchainRewardsTotalByAddress(address: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BurnchainRewardsTotal?, _ error: Error?) -> Void)) -> RequestTask {
        return getBurnchainRewardsTotalByAddressWithRequestBuilder(address: address).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get total burnchain rewards for the given recipient
     - GET /extended/v1/burnchain/rewards/{address}/total
     - Retrieves the total burnchain (e.g. Bitcoin) rewards for a given recipient `address`
     - parameter address: (path) Reward recipient address. Should either be in the native burnchain&#39;s format (e.g. B58 for Bitcoin), or if a STX principal address is provided it will be encoded as into the equivalent burnchain format 
     - returns: RequestBuilder<BurnchainRewardsTotal> 
     */
    open class func getBurnchainRewardsTotalByAddressWithRequestBuilder(address: String) -> RequestBuilder<BurnchainRewardsTotal> {
        var localVariablePath = "/extended/v1/burnchain/rewards/{address}/total"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BurnchainRewardsTotal>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
