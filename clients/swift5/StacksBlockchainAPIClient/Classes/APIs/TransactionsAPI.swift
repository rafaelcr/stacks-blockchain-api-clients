//
// TransactionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TransactionsAPI {

    /**
     Transactions for address
     
     - parameter address: (path) Transactions for the address 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAddressMempoolTransactions(address: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getAddressMempoolTransactionsWithRequestBuilder(address: address, limit: limit, offset: offset, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transactions for address
     - GET /extended/v1/address/{address}/mempool
     - Retrieves all transactions for a given address that are currently in mempool
     - parameter address: (path) Transactions for the address 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getAddressMempoolTransactionsWithRequestBuilder(address: String, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/address/{address}/mempool"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get dropped mempool transactions
     
     - parameter limit: (query) max number of mempool transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first mempool transaction to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDroppedMempoolTransactionList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getDroppedMempoolTransactionListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get dropped mempool transactions
     - GET /extended/v1/tx/mempool/dropped
     - Retrieves all recently-broadcast transactions that have been dropped from the mempool.  Transactions are dropped from the mempool if:  * they were stale and awaiting garbage collection or,  * were expensive,  or  * were replaced with a new fee 
     - parameter limit: (query) max number of mempool transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first mempool transaction to fetch (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getDroppedMempoolTransactionListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/extended/v1/tx/mempool/dropped"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get mempool transactions
     
     - parameter senderAddress: (query) Filter to only return transactions with this sender address. (optional)
     - parameter recipientAddress: (query) Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     - parameter address: (query) Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     - parameter limit: (query) max number of mempool transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first mempool transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMempoolTransactionList(senderAddress: String? = nil, recipientAddress: String? = nil, address: String? = nil, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: MempoolTransactionListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getMempoolTransactionListWithRequestBuilder(senderAddress: senderAddress, recipientAddress: recipientAddress, address: address, limit: limit, offset: offset, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get mempool transactions
     - GET /extended/v1/tx/mempool
     - Retrieves all transactions that have been recently broadcast to the mempool. These are pending transactions awaiting confirmation.  If you need to monitor new transactions, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates. 
     - parameter senderAddress: (query) Filter to only return transactions with this sender address. (optional)
     - parameter recipientAddress: (query) Filter to only return transactions with this recipient address (only applicable for STX transfer tx types). (optional)
     - parameter address: (query) Filter to only return transactions with this address as the sender or recipient (recipient only applicable for STX transfer tx types). (optional)
     - parameter limit: (query) max number of mempool transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first mempool transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<MempoolTransactionListResponse> 
     */
    open class func getMempoolTransactionListWithRequestBuilder(senderAddress: String? = nil, recipientAddress: String? = nil, address: String? = nil, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil) -> RequestBuilder<MempoolTransactionListResponse> {
        let localVariablePath = "/extended/v1/tx/mempool"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sender_address": senderAddress?.encodeToJSON(),
            "recipient_address": recipientAddress?.encodeToJSON(),
            "address": address?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MempoolTransactionListResponse>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Raw Transaction
     
     - parameter txId: (path) Hash of transaction 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRawTransactionById(txId: String, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRawTransactionResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getRawTransactionByIdWithRequestBuilder(txId: txId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Raw Transaction
     - GET /extended/v1/tx/{tx_id}/raw
     - Retrieves a hex encoded serialized transaction for a given ID 
     - parameter txId: (path) Hash of transaction 
     - returns: RequestBuilder<GetRawTransactionResult> 
     */
    open class func getRawTransactionByIdWithRequestBuilder(txId: String) -> RequestBuilder<GetRawTransactionResult> {
        var localVariablePath = "/extended/v1/tx/{tx_id}/raw"
        let txIdPreEscape = "\(APIHelper.mapValueToPathItem(txId))"
        let txIdPostEscape = txIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tx_id}", with: txIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRawTransactionResult>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get transaction
     
     - parameter txId: (path) Hash of transaction 
     - parameter eventOffset: (query) The number of events to skip (optional, default to 0)
     - parameter eventLimit: (query) The numbers of events to return (optional, default to 96)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransactionById(txId: String, eventOffset: Int? = nil, eventLimit: Int? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyOfobjectobjectobjectobjectobject?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransactionByIdWithRequestBuilder(txId: txId, eventOffset: eventOffset, eventLimit: eventLimit, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get transaction
     - GET /extended/v1/tx/{tx_id}
     - Retrieves transaction details for a given transaction ID  `import type { Transaction } from '@stacks/stacks-blockchain-api-types';` 
     - parameter txId: (path) Hash of transaction 
     - parameter eventOffset: (query) The number of events to skip (optional, default to 0)
     - parameter eventLimit: (query) The numbers of events to return (optional, default to 96)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<AnyOfobjectobjectobjectobjectobject> 
     */
    open class func getTransactionByIdWithRequestBuilder(txId: String, eventOffset: Int? = nil, eventLimit: Int? = nil, unanchored: Bool? = nil) -> RequestBuilder<AnyOfobjectobjectobjectobjectobject> {
        var localVariablePath = "/extended/v1/tx/{tx_id}"
        let txIdPreEscape = "\(APIHelper.mapValueToPathItem(txId))"
        let txIdPostEscape = txIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tx_id}", with: txIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "event_offset": eventOffset?.encodeToJSON(),
            "event_limit": eventLimit?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyOfobjectobjectobjectobjectobject>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getTransactionList: String, CaseIterable {
        case coinbase = "coinbase"
        case tokenTransfer = "token_transfer"
        case smartContract = "smart_contract"
        case contractCall = "contract_call"
        case poisonMicroblock = "poison_microblock"
    }

    /**
     Get recent transactions
     
     - parameter limit: (query) max number of transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter type: (query) Filter by transaction type (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransactionList(limit: Int? = nil, offset: Int? = nil, type: [ModelType_getTransactionList]? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionResults?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransactionListWithRequestBuilder(limit: limit, offset: offset, type: type, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent transactions
     - GET /extended/v1/tx
     - Retrieves all recently mined transactions  If using TypeScript, import typings for this response from our types package:  `import type { TransactionResults } from '@stacks/stacks-blockchain-api-types';` 
     - parameter limit: (query) max number of transactions to fetch (optional, default to 96)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter type: (query) Filter by transaction type (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<TransactionResults> 
     */
    open class func getTransactionListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil, type: [ModelType_getTransactionList]? = nil, unanchored: Bool? = nil) -> RequestBuilder<TransactionResults> {
        let localVariablePath = "/extended/v1/tx"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionResults>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Transactions by block hash
     
     - parameter blockHash: (path) Hash of block 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransactionsByBlockHash(blockHash: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransactionsByBlockHashWithRequestBuilder(blockHash: blockHash, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transactions by block hash
     - GET /extended/v1/tx/block/{block_hash}
     - Retrieves a list of all transactions within a block for a given block hash.
     - parameter blockHash: (path) Hash of block 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTransactionsByBlockHashWithRequestBuilder(blockHash: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/tx/block/{block_hash}"
        let blockHashPreEscape = "\(APIHelper.mapValueToPathItem(blockHash))"
        let blockHashPostEscape = blockHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{block_hash}", with: blockHashPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Transactions by block height
     
     - parameter height: (path) Height of block 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransactionsByBlockHeight(height: Int, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransactionsByBlockHeightWithRequestBuilder(height: height, limit: limit, offset: offset, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transactions by block height
     - GET /extended/v1/tx/block_height/{height}
     - Retrieves all transactions within a block at a given height
     - parameter height: (path) Height of block 
     - parameter limit: (query) max number of transactions to fetch (optional)
     - parameter offset: (query) index of first transaction to fetch (optional)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getTransactionsByBlockHeightWithRequestBuilder(height: Int, limit: Int? = nil, offset: Int? = nil, unanchored: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/extended/v1/tx/block_height/{height}"
        let heightPreEscape = "\(APIHelper.mapValueToPathItem(height))"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get list of details for transactions
     
     - parameter txId: (query) Array of transaction ids 
     - parameter eventOffset: (query) The number of events to skip (optional, default to 0)
     - parameter eventLimit: (query) The numbers of events to return (optional, default to 96)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTxListDetails(txId: [String], eventOffset: Int? = nil, eventLimit: Int? = nil, unanchored: Bool? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: AnyOfobjectobject]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTxListDetailsWithRequestBuilder(txId: txId, eventOffset: eventOffset, eventLimit: eventLimit, unanchored: unanchored).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get list of details for transactions
     - GET /extended/v1/tx/multiple
     - Retrieves a list of transactions for a given list of transaction IDs  If using TypeScript, import typings for this response from our types package:  `import type { Transaction } from '@stacks/stacks-blockchain-api-types';` 
     - parameter txId: (query) Array of transaction ids 
     - parameter eventOffset: (query) The number of events to skip (optional, default to 0)
     - parameter eventLimit: (query) The numbers of events to return (optional, default to 96)
     - parameter unanchored: (query) Include transaction data from unanchored (i.e. unconfirmed) microblocks (optional, default to false)
     - returns: RequestBuilder<[String: AnyOfobjectobject]> 
     */
    open class func getTxListDetailsWithRequestBuilder(txId: [String], eventOffset: Int? = nil, eventLimit: Int? = nil, unanchored: Bool? = nil) -> RequestBuilder<[String: AnyOfobjectobject]> {
        let localVariablePath = "/extended/v1/tx/multiple"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tx_id": txId.encodeToJSON(),
            "event_offset": eventOffset?.encodeToJSON(),
            "event_limit": eventLimit?.encodeToJSON(),
            "unanchored": unanchored?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyOfobjectobject]>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Broadcast raw transaction
     
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postCoreNodeTransactions(body: URL? = nil, apiResponseQueue: DispatchQueue = Stacks Blockchain API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return postCoreNodeTransactionsWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Broadcast raw transaction
     - POST /v2/transactions
     - Broadcasts raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postCoreNodeTransactionsWithRequestBuilder(body: URL? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/v2/transactions"
        let localVariableURLString = Stacks Blockchain API ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Stacks Blockchain API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
