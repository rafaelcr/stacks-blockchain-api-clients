//
// AddressBalanceResponseStx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** StxBalance */
public struct AddressBalanceResponseStx: Codable, JSONEncodable, Hashable {

    public var balance: String
    public var totalSent: String
    public var totalReceived: String
    public var totalFeesSent: String
    public var totalMinerRewardsReceived: String
    /** The transaction where the lock event occurred. Empty if no tokens are locked. */
    public var lockTxId: String
    /** The amount of locked STX, as string quoted micro-STX. Zero if no tokens are locked. */
    public var locked: String
    /** The STX chain block height of when the lock event occurred. Zero if no tokens are locked. */
    public var lockHeight: Int
    /** The burnchain block height of when the lock event occurred. Zero if no tokens are locked. */
    public var burnchainLockHeight: Int
    /** The burnchain block height of when the tokens unlock. Zero if no tokens are locked. */
    public var burnchainUnlockHeight: Int

    public init(balance: String, totalSent: String, totalReceived: String, totalFeesSent: String, totalMinerRewardsReceived: String, lockTxId: String, locked: String, lockHeight: Int, burnchainLockHeight: Int, burnchainUnlockHeight: Int) {
        self.balance = balance
        self.totalSent = totalSent
        self.totalReceived = totalReceived
        self.totalFeesSent = totalFeesSent
        self.totalMinerRewardsReceived = totalMinerRewardsReceived
        self.lockTxId = lockTxId
        self.locked = locked
        self.lockHeight = lockHeight
        self.burnchainLockHeight = burnchainLockHeight
        self.burnchainUnlockHeight = burnchainUnlockHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case balance
        case totalSent = "total_sent"
        case totalReceived = "total_received"
        case totalFeesSent = "total_fees_sent"
        case totalMinerRewardsReceived = "total_miner_rewards_received"
        case lockTxId = "lock_tx_id"
        case locked
        case lockHeight = "lock_height"
        case burnchainLockHeight = "burnchain_lock_height"
        case burnchainUnlockHeight = "burnchain_unlock_height"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(balance, forKey: .balance)
        try container.encode(totalSent, forKey: .totalSent)
        try container.encode(totalReceived, forKey: .totalReceived)
        try container.encode(totalFeesSent, forKey: .totalFeesSent)
        try container.encode(totalMinerRewardsReceived, forKey: .totalMinerRewardsReceived)
        try container.encode(lockTxId, forKey: .lockTxId)
        try container.encode(locked, forKey: .locked)
        try container.encode(lockHeight, forKey: .lockHeight)
        try container.encode(burnchainLockHeight, forKey: .burnchainLockHeight)
        try container.encode(burnchainUnlockHeight, forKey: .burnchainUnlockHeight)
    }
}

