//
// AddressTransactionWithTransfers.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Transaction with STX transfers for a given address */
public struct AddressTransactionWithTransfers: Codable, JSONEncodable, Hashable {

    public var tx: AnyCodable
    /** Total sent from the given address, including the tx fee, in micro-STX as an integer string. */
    public var stxSent: String
    /** Total received by the given address in micro-STX as an integer string. */
    public var stxReceived: String
    public var stxTransfers: [AddressTransactionWithTransfersStxTransfers]
    public var ftTransfers: [AddressTransactionWithTransfersFtTransfers]?
    public var nftTransfers: [AddressTransactionWithTransfersNftTransfers]?

    public init(tx: AnyCodable, stxSent: String, stxReceived: String, stxTransfers: [AddressTransactionWithTransfersStxTransfers], ftTransfers: [AddressTransactionWithTransfersFtTransfers]? = nil, nftTransfers: [AddressTransactionWithTransfersNftTransfers]? = nil) {
        self.tx = tx
        self.stxSent = stxSent
        self.stxReceived = stxReceived
        self.stxTransfers = stxTransfers
        self.ftTransfers = ftTransfers
        self.nftTransfers = nftTransfers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tx
        case stxSent = "stx_sent"
        case stxReceived = "stx_received"
        case stxTransfers = "stx_transfers"
        case ftTransfers = "ft_transfers"
        case nftTransfers = "nft_transfers"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(tx, forKey: .tx)
        try container.encode(stxSent, forKey: .stxSent)
        try container.encode(stxReceived, forKey: .stxReceived)
        try container.encode(stxTransfers, forKey: .stxTransfers)
        try container.encodeIfPresent(ftTransfers, forKey: .ftTransfers)
        try container.encodeIfPresent(nftTransfers, forKey: .nftTransfers)
    }
}

