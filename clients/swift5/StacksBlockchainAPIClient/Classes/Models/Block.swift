//
// Block.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A block */
public struct Block: Codable, JSONEncodable, Hashable {

    /** Set to `true` if block corresponds to the canonical chain tip */
    public var canonical: Bool
    /** Height of the block */
    public var height: Int
    /** Hash representing the block */
    public var hash: String
    /** Hash of the parent block */
    public var parentBlockHash: String
    /** Unix timestamp (in seconds) indicating when this block was mined. */
    public var burnBlockTime: Double
    /** An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined. */
    public var burnBlockTimeIso: String
    /** Hash of the anchor chain block */
    public var burnBlockHash: String
    /** Height of the anchor chain block */
    public var burnBlockHeight: Int
    /** Anchor chain transaction ID */
    public var minerTxid: String
    /** The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
    public var parentMicroblockHash: String
    /** The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1. */
    public var parentMicroblockSequence: Int
    /** List of transactions included in the block */
    public var txs: [String]
    /** List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list. */
    public var microblocksAccepted: [String]
    /** List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list. */
    public var microblocksStreamed: [String]
    /** Execution cost read count. */
    public var executionCostReadCount: Int
    /** Execution cost read length. */
    public var executionCostReadLength: Int
    /** Execution cost runtime. */
    public var executionCostRuntime: Int
    /** Execution cost write count. */
    public var executionCostWriteCount: Int
    /** Execution cost write length. */
    public var executionCostWriteLength: Int

    public init(canonical: Bool, height: Int, hash: String, parentBlockHash: String, burnBlockTime: Double, burnBlockTimeIso: String, burnBlockHash: String, burnBlockHeight: Int, minerTxid: String, parentMicroblockHash: String, parentMicroblockSequence: Int, txs: [String], microblocksAccepted: [String], microblocksStreamed: [String], executionCostReadCount: Int, executionCostReadLength: Int, executionCostRuntime: Int, executionCostWriteCount: Int, executionCostWriteLength: Int) {
        self.canonical = canonical
        self.height = height
        self.hash = hash
        self.parentBlockHash = parentBlockHash
        self.burnBlockTime = burnBlockTime
        self.burnBlockTimeIso = burnBlockTimeIso
        self.burnBlockHash = burnBlockHash
        self.burnBlockHeight = burnBlockHeight
        self.minerTxid = minerTxid
        self.parentMicroblockHash = parentMicroblockHash
        self.parentMicroblockSequence = parentMicroblockSequence
        self.txs = txs
        self.microblocksAccepted = microblocksAccepted
        self.microblocksStreamed = microblocksStreamed
        self.executionCostReadCount = executionCostReadCount
        self.executionCostReadLength = executionCostReadLength
        self.executionCostRuntime = executionCostRuntime
        self.executionCostWriteCount = executionCostWriteCount
        self.executionCostWriteLength = executionCostWriteLength
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canonical
        case height
        case hash
        case parentBlockHash = "parent_block_hash"
        case burnBlockTime = "burn_block_time"
        case burnBlockTimeIso = "burn_block_time_iso"
        case burnBlockHash = "burn_block_hash"
        case burnBlockHeight = "burn_block_height"
        case minerTxid = "miner_txid"
        case parentMicroblockHash = "parent_microblock_hash"
        case parentMicroblockSequence = "parent_microblock_sequence"
        case txs
        case microblocksAccepted = "microblocks_accepted"
        case microblocksStreamed = "microblocks_streamed"
        case executionCostReadCount = "execution_cost_read_count"
        case executionCostReadLength = "execution_cost_read_length"
        case executionCostRuntime = "execution_cost_runtime"
        case executionCostWriteCount = "execution_cost_write_count"
        case executionCostWriteLength = "execution_cost_write_length"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(canonical, forKey: .canonical)
        try container.encode(height, forKey: .height)
        try container.encode(hash, forKey: .hash)
        try container.encode(parentBlockHash, forKey: .parentBlockHash)
        try container.encode(burnBlockTime, forKey: .burnBlockTime)
        try container.encode(burnBlockTimeIso, forKey: .burnBlockTimeIso)
        try container.encode(burnBlockHash, forKey: .burnBlockHash)
        try container.encode(burnBlockHeight, forKey: .burnBlockHeight)
        try container.encode(minerTxid, forKey: .minerTxid)
        try container.encode(parentMicroblockHash, forKey: .parentMicroblockHash)
        try container.encode(parentMicroblockSequence, forKey: .parentMicroblockSequence)
        try container.encode(txs, forKey: .txs)
        try container.encode(microblocksAccepted, forKey: .microblocksAccepted)
        try container.encode(microblocksStreamed, forKey: .microblocksStreamed)
        try container.encode(executionCostReadCount, forKey: .executionCostReadCount)
        try container.encode(executionCostReadLength, forKey: .executionCostReadLength)
        try container.encode(executionCostRuntime, forKey: .executionCostRuntime)
        try container.encode(executionCostWriteCount, forKey: .executionCostWriteCount)
        try container.encode(executionCostWriteLength, forKey: .executionCostWriteLength)
    }
}

