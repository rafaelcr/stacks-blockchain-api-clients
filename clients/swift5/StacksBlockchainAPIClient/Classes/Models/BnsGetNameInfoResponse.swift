//
// BnsGetNameInfoResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Get name details */
public struct BnsGetNameInfoResponse: Codable, JSONEncodable, Hashable {

    public var address: String
    public var blockchain: String
    public var expireBlock: Int?
    public var gracePeriod: Int?
    public var lastTxid: String
    public var resolver: String?
    public var status: String
    public var zonefile: String
    public var zonefileHash: String

    public init(address: String, blockchain: String, expireBlock: Int? = nil, gracePeriod: Int? = nil, lastTxid: String, resolver: String? = nil, status: String, zonefile: String, zonefileHash: String) {
        self.address = address
        self.blockchain = blockchain
        self.expireBlock = expireBlock
        self.gracePeriod = gracePeriod
        self.lastTxid = lastTxid
        self.resolver = resolver
        self.status = status
        self.zonefile = zonefile
        self.zonefileHash = zonefileHash
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case blockchain
        case expireBlock = "expire_block"
        case gracePeriod = "grace_period"
        case lastTxid = "last_txid"
        case resolver
        case status
        case zonefile
        case zonefileHash = "zonefile_hash"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(blockchain, forKey: .blockchain)
        try container.encodeIfPresent(expireBlock, forKey: .expireBlock)
        try container.encodeIfPresent(gracePeriod, forKey: .gracePeriod)
        try container.encode(lastTxid, forKey: .lastTxid)
        try container.encodeIfPresent(resolver, forKey: .resolver)
        try container.encode(status, forKey: .status)
        try container.encode(zonefile, forKey: .zonefile)
        try container.encode(zonefileHash, forKey: .zonefileHash)
    }
}

