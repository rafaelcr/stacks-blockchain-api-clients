//
// BurnchainReward.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Reward payment made on the burnchain */
public struct BurnchainReward: Codable, JSONEncodable, Hashable {

    /** Set to `true` if block corresponds to the canonical burchchain tip */
    public var canonical: Bool
    /** The hash representing the burnchain block */
    public var burnBlockHash: String
    /** Height of the burnchain block */
    public var burnBlockHeight: Int
    /** The total amount of burnchain tokens burned for this burnchain block, in the smallest unit (e.g. satoshis for Bitcoin) */
    public var burnAmount: String
    /** The recipient address that received the burnchain rewards, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
    public var rewardRecipient: String
    /** The amount of burnchain tokens rewarded to the recipient, in the smallest unit (e.g. satoshis for Bitcoin) */
    public var rewardAmount: String
    /** The index position of the reward entry, useful for ordering when there's more than one recipient per burnchain block */
    public var rewardIndex: Int

    public init(canonical: Bool, burnBlockHash: String, burnBlockHeight: Int, burnAmount: String, rewardRecipient: String, rewardAmount: String, rewardIndex: Int) {
        self.canonical = canonical
        self.burnBlockHash = burnBlockHash
        self.burnBlockHeight = burnBlockHeight
        self.burnAmount = burnAmount
        self.rewardRecipient = rewardRecipient
        self.rewardAmount = rewardAmount
        self.rewardIndex = rewardIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canonical
        case burnBlockHash = "burn_block_hash"
        case burnBlockHeight = "burn_block_height"
        case burnAmount = "burn_amount"
        case rewardRecipient = "reward_recipient"
        case rewardAmount = "reward_amount"
        case rewardIndex = "reward_index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(canonical, forKey: .canonical)
        try container.encode(burnBlockHash, forKey: .burnBlockHash)
        try container.encode(burnBlockHeight, forKey: .burnBlockHeight)
        try container.encode(burnAmount, forKey: .burnAmount)
        try container.encode(rewardRecipient, forKey: .rewardRecipient)
        try container.encode(rewardAmount, forKey: .rewardAmount)
        try container.encode(rewardIndex, forKey: .rewardIndex)
    }
}

