//
// BurnchainRewardSlotHolder.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Reward slot holder on the burnchain */
public struct BurnchainRewardSlotHolder: Codable, JSONEncodable, Hashable {

    /** Set to `true` if block corresponds to the canonical burchchain tip */
    public var canonical: Bool
    /** The hash representing the burnchain block */
    public var burnBlockHash: String
    /** Height of the burnchain block */
    public var burnBlockHeight: Int
    /** The recipient address that validly received PoX commitments, in the format native to the burnchain (e.g. B58 encoded for Bitcoin) */
    public var address: String
    /** The index position of the reward entry, useful for ordering when there's more than one slot per burnchain block */
    public var slotIndex: Int

    public init(canonical: Bool, burnBlockHash: String, burnBlockHeight: Int, address: String, slotIndex: Int) {
        self.canonical = canonical
        self.burnBlockHash = burnBlockHash
        self.burnBlockHeight = burnBlockHeight
        self.address = address
        self.slotIndex = slotIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canonical
        case burnBlockHash = "burn_block_hash"
        case burnBlockHeight = "burn_block_height"
        case address
        case slotIndex = "slot_index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(canonical, forKey: .canonical)
        try container.encode(burnBlockHash, forKey: .burnBlockHash)
        try container.encode(burnBlockHeight, forKey: .burnBlockHeight)
        try container.encode(address, forKey: .address)
        try container.encode(slotIndex, forKey: .slotIndex)
    }
}

