//
// ChainTip.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Current chain tip information */
public struct ChainTip: Codable, JSONEncodable, Hashable {

    /** the current block height */
    public var blockHeight: Int
    /** the current block hash */
    public var blockHash: String
    /** the current index block hash */
    public var indexBlockHash: String
    /** the current microblock hash */
    public var microblockHash: String?
    /** the current microblock sequence number */
    public var microblockSequence: Int?

    public init(blockHeight: Int, blockHash: String, indexBlockHash: String, microblockHash: String? = nil, microblockSequence: Int? = nil) {
        self.blockHeight = blockHeight
        self.blockHash = blockHash
        self.indexBlockHash = indexBlockHash
        self.microblockHash = microblockHash
        self.microblockSequence = microblockSequence
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockHeight = "block_height"
        case blockHash = "block_hash"
        case indexBlockHash = "index_block_hash"
        case microblockHash = "microblock_hash"
        case microblockSequence = "microblock_sequence"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(blockHeight, forKey: .blockHeight)
        try container.encode(blockHash, forKey: .blockHash)
        try container.encode(indexBlockHash, forKey: .indexBlockHash)
        try container.encodeIfPresent(microblockHash, forKey: .microblockHash)
        try container.encodeIfPresent(microblockSequence, forKey: .microblockSequence)
    }
}

