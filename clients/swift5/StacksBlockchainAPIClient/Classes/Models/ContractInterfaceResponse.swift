//
// ContractInterfaceResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** GET request to get contract interface */
public struct ContractInterfaceResponse: Codable, JSONEncodable, Hashable {

    /** List of defined methods */
    public var functions: [AnyCodable]
    /** List of defined variables */
    public var variables: [AnyCodable]
    /** List of defined data-maps */
    public var maps: [AnyCodable]
    /** List of fungible tokens in the contract */
    public var fungibleTokens: [AnyCodable]
    /** List of non-fungible tokens in the contract */
    public var nonFungibleTokens: [AnyCodable]

    public init(functions: [AnyCodable], variables: [AnyCodable], maps: [AnyCodable], fungibleTokens: [AnyCodable], nonFungibleTokens: [AnyCodable]) {
        self.functions = functions
        self.variables = variables
        self.maps = maps
        self.fungibleTokens = fungibleTokens
        self.nonFungibleTokens = nonFungibleTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case functions
        case variables
        case maps
        case fungibleTokens = "fungible_tokens"
        case nonFungibleTokens = "non_fungible_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(functions, forKey: .functions)
        try container.encode(variables, forKey: .variables)
        try container.encode(maps, forKey: .maps)
        try container.encode(fungibleTokens, forKey: .fungibleTokens)
        try container.encode(nonFungibleTokens, forKey: .nonFungibleTokens)
    }
}

