//
// CoreNodeInfoResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** GET request that core node information */
public struct CoreNodeInfoResponse: Codable, JSONEncodable, Hashable {

    /** identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade */
    public var peerVersion: Int
    /** is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block */
    public var poxConsensus: String
    /** latest bitcoin chain height */
    public var burnBlockHeight: Int
    /** same as burn_consensus, but evaluated at stable_burn_block_height */
    public var stablePoxConsensus: String
    /** leftover from stacks 1.0, basically always burn_block_height - 1 */
    public var stableBurnBlockHeight: Int
    /** is a version descriptor */
    public var serverVersion: String
    /** is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change */
    public var networkId: Int
    /** same as network_id, but for bitcoin */
    public var parentNetworkId: Int
    /** the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height */
    public var stacksTipHeight: Int
    /** the best known block hash for the Stack chain (not including any pending microblocks) */
    public var stacksTip: String
    /** the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined */
    public var stacksTipConsensusHash: String
    /** the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned */
    public var unanchoredTip: String
    /** the block height at which the testnet network will be reset. not applicable for mainnet */
    public var exitAtBlockHeight: Int

    public init(peerVersion: Int, poxConsensus: String, burnBlockHeight: Int, stablePoxConsensus: String, stableBurnBlockHeight: Int, serverVersion: String, networkId: Int, parentNetworkId: Int, stacksTipHeight: Int, stacksTip: String, stacksTipConsensusHash: String, unanchoredTip: String, exitAtBlockHeight: Int) {
        self.peerVersion = peerVersion
        self.poxConsensus = poxConsensus
        self.burnBlockHeight = burnBlockHeight
        self.stablePoxConsensus = stablePoxConsensus
        self.stableBurnBlockHeight = stableBurnBlockHeight
        self.serverVersion = serverVersion
        self.networkId = networkId
        self.parentNetworkId = parentNetworkId
        self.stacksTipHeight = stacksTipHeight
        self.stacksTip = stacksTip
        self.stacksTipConsensusHash = stacksTipConsensusHash
        self.unanchoredTip = unanchoredTip
        self.exitAtBlockHeight = exitAtBlockHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case peerVersion = "peer_version"
        case poxConsensus = "pox_consensus"
        case burnBlockHeight = "burn_block_height"
        case stablePoxConsensus = "stable_pox_consensus"
        case stableBurnBlockHeight = "stable_burn_block_height"
        case serverVersion = "server_version"
        case networkId = "network_id"
        case parentNetworkId = "parent_network_id"
        case stacksTipHeight = "stacks_tip_height"
        case stacksTip = "stacks_tip"
        case stacksTipConsensusHash = "stacks_tip_consensus_hash"
        case unanchoredTip = "unanchored_tip"
        case exitAtBlockHeight = "exit_at_block_height"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(peerVersion, forKey: .peerVersion)
        try container.encode(poxConsensus, forKey: .poxConsensus)
        try container.encode(burnBlockHeight, forKey: .burnBlockHeight)
        try container.encode(stablePoxConsensus, forKey: .stablePoxConsensus)
        try container.encode(stableBurnBlockHeight, forKey: .stableBurnBlockHeight)
        try container.encode(serverVersion, forKey: .serverVersion)
        try container.encode(networkId, forKey: .networkId)
        try container.encode(parentNetworkId, forKey: .parentNetworkId)
        try container.encode(stacksTipHeight, forKey: .stacksTipHeight)
        try container.encode(stacksTip, forKey: .stacksTip)
        try container.encode(stacksTipConsensusHash, forKey: .stacksTipConsensusHash)
        try container.encode(unanchoredTip, forKey: .unanchoredTip)
        try container.encode(exitAtBlockHeight, forKey: .exitAtBlockHeight)
    }
}

