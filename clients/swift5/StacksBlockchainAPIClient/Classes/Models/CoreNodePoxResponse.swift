//
// CoreNodePoxResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Get Proof of Transfer (PoX) information */
public struct CoreNodePoxResponse: Codable, JSONEncodable, Hashable {

    public var contractId: String
    public var firstBurnchainBlockHeight: Int
    public var minAmountUstx: Int
    public var registrationWindowLength: Int
    public var rejectionFraction: Int
    public var rewardCycleId: Int
    public var rewardCycleLength: Int
    public var rejectionVotesLeftRequired: Int
    public var totalLiquidSupplyUstx: Int

    public init(contractId: String, firstBurnchainBlockHeight: Int, minAmountUstx: Int, registrationWindowLength: Int, rejectionFraction: Int, rewardCycleId: Int, rewardCycleLength: Int, rejectionVotesLeftRequired: Int, totalLiquidSupplyUstx: Int) {
        self.contractId = contractId
        self.firstBurnchainBlockHeight = firstBurnchainBlockHeight
        self.minAmountUstx = minAmountUstx
        self.registrationWindowLength = registrationWindowLength
        self.rejectionFraction = rejectionFraction
        self.rewardCycleId = rewardCycleId
        self.rewardCycleLength = rewardCycleLength
        self.rejectionVotesLeftRequired = rejectionVotesLeftRequired
        self.totalLiquidSupplyUstx = totalLiquidSupplyUstx
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contractId = "contract_id"
        case firstBurnchainBlockHeight = "first_burnchain_block_height"
        case minAmountUstx = "min_amount_ustx"
        case registrationWindowLength = "registration_window_length"
        case rejectionFraction = "rejection_fraction"
        case rewardCycleId = "reward_cycle_id"
        case rewardCycleLength = "reward_cycle_length"
        case rejectionVotesLeftRequired = "rejection_votes_left_required"
        case totalLiquidSupplyUstx = "total_liquid_supply_ustx"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(contractId, forKey: .contractId)
        try container.encode(firstBurnchainBlockHeight, forKey: .firstBurnchainBlockHeight)
        try container.encode(minAmountUstx, forKey: .minAmountUstx)
        try container.encode(registrationWindowLength, forKey: .registrationWindowLength)
        try container.encode(rejectionFraction, forKey: .rejectionFraction)
        try container.encode(rewardCycleId, forKey: .rewardCycleId)
        try container.encode(rewardCycleLength, forKey: .rewardCycleLength)
        try container.encode(rejectionVotesLeftRequired, forKey: .rejectionVotesLeftRequired)
        try container.encode(totalLiquidSupplyUstx, forKey: .totalLiquidSupplyUstx)
    }
}

