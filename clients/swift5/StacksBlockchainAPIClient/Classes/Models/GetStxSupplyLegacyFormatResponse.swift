//
// GetStxSupplyLegacyFormatResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** GET request that returns network target block times */
public struct GetStxSupplyLegacyFormatResponse: Codable, JSONEncodable, Hashable {

    /** String quoted decimal number of the percentage of STX that have unlocked */
    public var unlockedPercent: String
    /** String quoted decimal number of the total possible number of STX */
    public var totalStacks: String
    /** Same as `totalStacks` but formatted with comma thousands separators */
    public var totalStacksFormatted: String
    /** String quoted decimal number of the STX that have been mined or unlocked */
    public var unlockedSupply: String
    /** Same as `unlockedSupply` but formatted with comma thousands separators */
    public var unlockedSupplyFormatted: String
    /** The block height at which this information was queried */
    public var blockHeight: String

    public init(unlockedPercent: String, totalStacks: String, totalStacksFormatted: String, unlockedSupply: String, unlockedSupplyFormatted: String, blockHeight: String) {
        self.unlockedPercent = unlockedPercent
        self.totalStacks = totalStacks
        self.totalStacksFormatted = totalStacksFormatted
        self.unlockedSupply = unlockedSupply
        self.unlockedSupplyFormatted = unlockedSupplyFormatted
        self.blockHeight = blockHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case unlockedPercent
        case totalStacks
        case totalStacksFormatted
        case unlockedSupply
        case unlockedSupplyFormatted
        case blockHeight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(unlockedPercent, forKey: .unlockedPercent)
        try container.encode(totalStacks, forKey: .totalStacks)
        try container.encode(totalStacksFormatted, forKey: .totalStacksFormatted)
        try container.encode(unlockedSupply, forKey: .unlockedSupply)
        try container.encode(unlockedSupplyFormatted, forKey: .unlockedSupplyFormatted)
        try container.encode(blockHeight, forKey: .blockHeight)
    }
}

