//
// RosettaCoinChange.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&#39;t populate this model). */
public struct RosettaCoinChange: Codable, JSONEncodable, Hashable {

    public enum CoinAction: String, Codable, CaseIterable {
        case created = "coin_created"
        case spent = "coin_spent"
    }
    public var coinIdentifier: RosettaAccountBalanceResponseCoinIdentifier
    /** CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once. */
    public var coinAction: CoinAction

    public init(coinIdentifier: RosettaAccountBalanceResponseCoinIdentifier, coinAction: CoinAction) {
        self.coinIdentifier = coinIdentifier
        self.coinAction = coinAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case coinIdentifier = "coin_identifier"
        case coinAction = "coin_action"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(coinIdentifier, forKey: .coinIdentifier)
        try container.encode(coinAction, forKey: .coinAction)
    }
}

