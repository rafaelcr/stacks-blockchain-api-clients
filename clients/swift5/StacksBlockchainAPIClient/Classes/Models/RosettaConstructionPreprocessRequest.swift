//
// RosettaConstructionPreprocessRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConstructionPreprocessRequest is passed to the /construction/preprocess endpoint so that a Rosetta implementation can determine which metadata it needs to request for construction */
public struct RosettaConstructionPreprocessRequest: Codable, JSONEncodable, Hashable {

    public var networkIdentifier: AnyCodable
    public var operations: [AnyCodable]
    public var metadata: AnyCodable?
    public var maxFee: [RosettaMaxFeeAmount]?
    /**  The caller can also provide a suggested fee multiplier to indicate that the suggested fee should be scaled. This may be used to set higher fees for urgent transactions or to pay lower fees when there is less urgency. It is assumed that providing a very low multiplier (like 0.0001) will never lead to a transaction being created with a fee less than the minimum network fee (if applicable). In the case that the caller provides both a max fee and a suggested fee multiplier, the max fee will set an upper bound on the suggested fee (regardless of the multiplier provided). */
    public var suggestedFeeMultiplier: Int?

    public init(networkIdentifier: AnyCodable, operations: [AnyCodable], metadata: AnyCodable? = nil, maxFee: [RosettaMaxFeeAmount]? = nil, suggestedFeeMultiplier: Int? = nil) {
        self.networkIdentifier = networkIdentifier
        self.operations = operations
        self.metadata = metadata
        self.maxFee = maxFee
        self.suggestedFeeMultiplier = suggestedFeeMultiplier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case networkIdentifier = "network_identifier"
        case operations
        case metadata
        case maxFee = "max_fee"
        case suggestedFeeMultiplier = "suggested_fee_multiplier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(networkIdentifier, forKey: .networkIdentifier)
        try container.encode(operations, forKey: .operations)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(maxFee, forKey: .maxFee)
        try container.encodeIfPresent(suggestedFeeMultiplier, forKey: .suggestedFeeMultiplier)
    }
}

