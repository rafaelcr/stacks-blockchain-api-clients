//
// RosettaCurrency.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins). */
public struct RosettaCurrency: Codable, JSONEncodable, Hashable {

    /** Canonical symbol associated with a currency. */
    public var symbol: String
    /** Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10. */
    public var decimals: Int
    /** Any additional information related to the currency itself. For example, it would be useful to populate this object with the contract address of an ERC-20 token. */
    public var metadata: AnyCodable?

    public init(symbol: String, decimals: Int, metadata: AnyCodable? = nil) {
        self.symbol = symbol
        self.decimals = decimals
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case decimals
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(decimals, forKey: .decimals)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

