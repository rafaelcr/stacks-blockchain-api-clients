//
// RosettaError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Instead of utilizing HTTP status codes to describe node errors (which often do not have a good analog), rich errors are returned using this object. Both the code and message fields can be individually used to correctly identify an error. Implementations MUST use unique values for both fields. */
public struct RosettaError: Codable, JSONEncodable, Hashable {

    /** Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code. */
    public var code: Int
    /** Message is a network-specific error message. The message MUST NOT change for a given code. In particular, this means that any contextual information should be included in the details field. */
    public var message: String
    /** An error is retriable if the same request may succeed if submitted again. */
    public var retriable: Bool
    public var details: RosettaErrorDetails?

    public init(code: Int, message: String, retriable: Bool, details: RosettaErrorDetails? = nil) {
        self.code = code
        self.message = message
        self.retriable = retriable
        self.details = details
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case message
        case retriable
        case details
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(code, forKey: .code)
        try container.encode(message, forKey: .message)
        try container.encode(retriable, forKey: .retriable)
        try container.encodeIfPresent(details, forKey: .details)
    }
}

