//
// RosettaNetworkListResponseSubNetworkIdentifier.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains. */
public struct RosettaNetworkListResponseSubNetworkIdentifier: Codable, JSONEncodable, Hashable {

    /** Network name */
    public var network: String
    public var metadata: RosettaNetworkListResponseSubNetworkIdentifierMetadata?

    public init(network: String, metadata: RosettaNetworkListResponseSubNetworkIdentifierMetadata? = nil) {
        self.network = network
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case network
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(network, forKey: .network)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

