//
// RosettaSubAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to. */
public struct RosettaSubAccount: Codable, JSONEncodable, Hashable {

    /** The address may be a cryptographic public key (or some encoding of it) or a provided username. */
    public var address: String
    /** If the SubAccount address is not sufficient to uniquely specify a SubAccount, any other identifying information can be stored here. It is important to note that two SubAccounts with identical addresses but differing metadata will not be considered equal by clients. */
    public var metadata: AnyCodable?

    public init(address: String, metadata: AnyCodable? = nil) {
        self.address = address
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

